plugins/intel-spi/fu-pci-device.c:	val |= priv->bus << 16;
plugins/intel-spi/fu-pci-device.c:	val |= priv->dev << 11;
plugins/intel-spi/fu-pci-device.c:	val |= priv->fun << 8;
plugins/intel-spi/fu-pci-device.c:	fu_common_string_append_kx(str, idt, "Bus", priv->bus);
plugins/intel-spi/fu-pci-device.c:	fu_common_string_append_kx(str, idt, "Dev", priv->dev);
plugins/intel-spi/fu-pci-device.c:	fu_common_string_append_kx(str, idt, "Fun", priv->fun);
plugins/intel-spi/fu-pci-device.c:	priv->bus = bus_tmp;
plugins/intel-spi/fu-pci-device.c:	priv->dev = dev_tmp;
plugins/intel-spi/fu-pci-device.c:	priv->fun = fun_tmp;
plugins/intel-spi/fu-ifd-device.c:	priv->region = region;
plugins/intel-spi/fu-ifd-device.c:	priv->offset = freg_base;
plugins/intel-spi/fu-ifd-device.c:	priv->access[region] = access;
plugins/intel-spi/fu-ifd-device.c:	fu_common_string_append_kv(str, idt, "Region", fu_ifd_region_to_string(priv->region));
plugins/intel-spi/fu-ifd-device.c:	fu_common_string_append_kx(str, idt, "Offset", priv->offset);
plugins/intel-spi/fu-ifd-device.c:		if (priv->access[i] == FU_IFD_ACCESS_NONE)
plugins/intel-spi/fu-ifd-device.c:					   fu_ifd_access_to_string(priv->access[i]));
plugins/intel-spi/fu-ifd-device.c:					priv->offset,
plugins/intel-spi/fu-ifd-device.c:	if (priv->region == FU_IFD_REGION_BIOS)
plugins/synaptics-rmi/fu-synaptics-rmi-device.c:	return &priv->flash;
plugins/synaptics-rmi/fu-synaptics-rmi-device.c:	fu_common_string_append_kx(str, idt, "CurrentPage", priv->current_page);
plugins/synaptics-rmi/fu-synaptics-rmi-device.c:	fu_common_string_append_kx(str, idt, "InIepMode", priv->in_iep_mode);
plugins/synaptics-rmi/fu-synaptics-rmi-device.c:	fu_common_string_append_kx(str, idt, "MaxPage", priv->max_page);
plugins/synaptics-rmi/fu-synaptics-rmi-device.c:	fu_common_string_append_kx(str, idt, "SigSize", priv->sig_size);
plugins/synaptics-rmi/fu-synaptics-rmi-device.c:	if (priv->f34 != NULL) {
plugins/synaptics-rmi/fu-synaptics-rmi-device.c:		fu_common_string_append_kx(str, idt, "BlVer", priv->f34->function_version + 0x5);
plugins/synaptics-rmi/fu-synaptics-rmi-device.c:	fu_synaptics_rmi_flash_to_string(&priv->flash, idt, str);
plugins/synaptics-rmi/fu-synaptics-rmi-device.c:	if (priv->functions->len == 0) {
plugins/synaptics-rmi/fu-synaptics-rmi-device.c:	for (guint i = 0; i < priv->functions->len; i++) {
plugins/synaptics-rmi/fu-synaptics-rmi-device.c:		FuSynapticsRmiFunction *func = g_ptr_array_index(priv->functions, i);
plugins/synaptics-rmi/fu-synaptics-rmi-device.c:	if (priv->current_page == page)
plugins/synaptics-rmi/fu-synaptics-rmi-device.c:	priv->current_page = page;
plugins/synaptics-rmi/fu-synaptics-rmi-device.c:	priv->in_iep_mode = iepmode;
plugins/synaptics-rmi/fu-synaptics-rmi-device.c:	return priv->in_iep_mode;
plugins/synaptics-rmi/fu-synaptics-rmi-device.c:					   priv->f01->command_base,
plugins/synaptics-rmi/fu-synaptics-rmi-device.c:	g_ptr_array_set_size(priv->functions, 0);
plugins/synaptics-rmi/fu-synaptics-rmi-device.c:	for (guint page = 0; page < priv->max_page; page++) {
plugins/synaptics-rmi/fu-synaptics-rmi-device.c:			g_ptr_array_add(priv->functions, g_steal_pointer(&func));
plugins/synaptics-rmi/fu-synaptics-rmi-device.c:		for (guint i = 0; i < priv->functions->len; i++) {
plugins/synaptics-rmi/fu-synaptics-rmi-device.c:			FuSynapticsRmiFunction *func = g_ptr_array_index(priv->functions, i);
plugins/synaptics-rmi/fu-synaptics-rmi-device.c:	priv->sig_size = sig_size;
plugins/synaptics-rmi/fu-synaptics-rmi-device.c:	return priv->sig_size;
plugins/synaptics-rmi/fu-synaptics-rmi-device.c:	priv->max_page = max_page;
plugins/synaptics-rmi/fu-synaptics-rmi-device.c:	return priv->max_page;
plugins/synaptics-rmi/fu-synaptics-rmi-device.c:	priv->in_iep_mode = FALSE;
plugins/synaptics-rmi/fu-synaptics-rmi-device.c:	priv->f01 = fu_synaptics_rmi_device_get_function(self, 0x01, error);
plugins/synaptics-rmi/fu-synaptics-rmi-device.c:	if (priv->f01 == NULL)
plugins/synaptics-rmi/fu-synaptics-rmi-device.c:	addr = priv->f01->query_base;
plugins/synaptics-rmi/fu-synaptics-rmi-device.c:						&priv->flash.build_id,
plugins/synaptics-rmi/fu-synaptics-rmi-device.c:	if (!fu_synaptics_rmi_device_query_build_id(self, &priv->flash.build_id, error)) {
plugins/synaptics-rmi/fu-synaptics-rmi-device.c:	priv->f34 = fu_synaptics_rmi_device_get_function(self, 0x34, error);
plugins/synaptics-rmi/fu-synaptics-rmi-device.c:	if (priv->f34 == NULL)
plugins/synaptics-rmi/fu-synaptics-rmi-device.c:	if (priv->f34->function_version == 0x0) {
plugins/synaptics-rmi/fu-synaptics-rmi-device.c:	} else if (priv->f34->function_version == 0x1) {
plugins/synaptics-rmi/fu-synaptics-rmi-device.c:	} else if (priv->f34->function_version == 0x2) {
plugins/synaptics-rmi/fu-synaptics-rmi-device.c:			    priv->f34->function_version);
plugins/synaptics-rmi/fu-synaptics-rmi-device.c:				 priv->flash.build_id);
plugins/synaptics-rmi/fu-synaptics-rmi-device.c:	bl_ver = g_strdup_printf("%u.0.0", priv->flash.bootloader_id[1]);
plugins/synaptics-rmi/fu-synaptics-rmi-device.c:	size_expected = ((gsize)priv->flash.block_count_fw * (gsize)priv->flash.block_size) +
plugins/synaptics-rmi/fu-synaptics-rmi-device.c:	size_expected = (gsize)priv->flash.block_count_cfg * (gsize)priv->flash.block_size;
plugins/synaptics-rmi/fu-synaptics-rmi-device.c:	f34_db = fu_synaptics_rmi_device_read(self, priv->f34->data_base, 0x1, error);
plugins/synaptics-rmi/fu-synaptics-rmi-device.c:	if ((flags & FU_SYNAPTICS_RMI_DEVICE_FLAG_FORCE) == 0 && priv->in_iep_mode)
plugins/synaptics-rmi/fu-synaptics-rmi-device.c:	priv->in_iep_mode = TRUE;
plugins/synaptics-rmi/fu-synaptics-rmi-device.c:								     priv->f34->interrupt_mask,
plugins/synaptics-rmi/fu-synaptics-rmi-device.c:	if (priv->f34->function_version == 0x1) {
plugins/synaptics-rmi/fu-synaptics-rmi-device.c:		res = fu_synaptics_rmi_device_read(self, priv->flash.status_addr, 0x2, error);
plugins/synaptics-rmi/fu-synaptics-rmi-device.c:		res = fu_synaptics_rmi_device_read(self, priv->flash.status_addr, 0x1, error);
plugins/synaptics-rmi/fu-synaptics-rmi-device.c:	if (priv->f34->function_version == 0x1)
plugins/synaptics-rmi/fu-synaptics-rmi-device.c:			    priv->flash.bootloader_id,
plugins/synaptics-rmi/fu-synaptics-rmi-device.c:			    sizeof(priv->flash.bootloader_id));
plugins/synaptics-rmi/fu-synaptics-rmi-device.c:					   priv->f34->data_base + block_data_offset,
plugins/synaptics-rmi/fu-synaptics-rmi-device.c:				   priv->f34->interrupt_mask | priv->f01->interrupt_mask);
plugins/synaptics-rmi/fu-synaptics-rmi-device.c:					   priv->f01->control_base + 1,
plugins/synaptics-rmi/fu-synaptics-rmi-device.c:	if (priv->f34->function_version == 0x0 || priv->f34->function_version == 0x1) {
plugins/synaptics-rmi/fu-synaptics-rmi-device.c:	if (priv->f34->function_version == 0x2) {
plugins/synaptics-rmi/fu-synaptics-rmi-device.c:		    priv->f34->function_version);
plugins/synaptics-rmi/fu-synaptics-rmi-device.c:	priv->current_page = 0xfe;
plugins/synaptics-rmi/fu-synaptics-rmi-device.c:	priv->functions = g_ptr_array_new_with_free_func(g_free);
plugins/synaptics-rmi/fu-synaptics-rmi-device.c:	g_ptr_array_unref(priv->functions);
plugins/vli/fu-vli-device.c:	if (priv->spi_cmds[req] == 0x0) {
plugins/vli/fu-vli-device.c:		*cmd = priv->spi_cmds[req];
plugins/vli/fu-vli-device.c:	if (priv->spi_cmd_read_id_sz == 4)
plugins/vli/fu-vli-device.c:		return g_strdup_printf("%08X", priv->flash_id);
plugins/vli/fu-vli-device.c:	if (priv->spi_cmd_read_id_sz == 2)
plugins/vli/fu-vli-device.c:		return g_strdup_printf("%04X", priv->flash_id);
plugins/vli/fu-vli-device.c:	if (priv->spi_cmd_read_id_sz == 1)
plugins/vli/fu-vli-device.c:		return g_strdup_printf("%02X", priv->flash_id);
plugins/vli/fu-vli-device.c:	return g_strdup_printf("%X", priv->flash_id);
plugins/vli/fu-vli-device.c:	if (priv->kind != device_kind) {
plugins/vli/fu-vli-device.c:		priv->kind = device_kind;
plugins/vli/fu-vli-device.c:	if (priv->kind != FU_VLI_DEVICE_KIND_UNKNOWN) {
plugins/vli/fu-vli-device.c:					 fu_vli_common_device_kind_to_string(priv->kind));
plugins/vli/fu-vli-device.c:	priv->spi_auto_detect = spi_auto_detect;
plugins/vli/fu-vli-device.c:	return priv->kind;
plugins/vli/fu-vli-device.c:	return fu_vli_common_device_kind_get_offset(priv->kind);
plugins/vli/fu-vli-device.c:	if (priv->kind != FU_VLI_DEVICE_KIND_UNKNOWN) {
plugins/vli/fu-vli-device.c:					   fu_vli_common_device_kind_to_string(priv->kind));
plugins/vli/fu-vli-device.c:	fu_common_string_append_kb(str, idt, "SpiAutoDetect", priv->spi_auto_detect);
plugins/vli/fu-vli-device.c:	if (priv->flash_id != 0x0) {
plugins/vli/fu-vli-device.c:					   priv->spi_cmds[i]);
plugins/vli/fu-vli-device.c:					   0xc0 | (priv->spi_cmd_read_id_sz * 2),
plugins/vli/fu-vli-device.c:					   priv->spi_cmds[FU_VLI_DEVICE_SPI_REQ_READ_ID],
plugins/vli/fu-vli-device.c:	if (priv->spi_cmd_read_id_sz == 4) {
plugins/vli/fu-vli-device.c:						&priv->flash_id,
plugins/vli/fu-vli-device.c:	} else if (priv->spi_cmd_read_id_sz == 2) {
plugins/vli/fu-vli-device.c:		priv->flash_id = tmp;
plugins/vli/fu-vli-device.c:	} else if (priv->spi_cmd_read_id_sz == 1) {
plugins/vli/fu-vli-device.c:		priv->flash_id = tmp;
plugins/vli/fu-vli-device.c:	if (priv->spi_auto_detect) {
plugins/vli/fu-vli-device.c:		if (priv->flash_id != 0x0) {
plugins/vli/fu-vli-device.c:		priv->spi_cmds[FU_VLI_DEVICE_SPI_REQ_READ_ID] = fu_common_strtoull(value);
plugins/vli/fu-vli-device.c:		priv->spi_cmd_read_id_sz = fu_common_strtoull(value);
plugins/vli/fu-vli-device.c:		priv->spi_cmds[FU_VLI_DEVICE_SPI_REQ_CHIP_ERASE] = fu_common_strtoull(value);
plugins/vli/fu-vli-device.c:		priv->spi_cmds[FU_VLI_DEVICE_SPI_REQ_SECTOR_ERASE] = fu_common_strtoull(value);
plugins/vli/fu-vli-device.c:		priv->spi_auto_detect = fu_common_strtoull(value) > 0;
plugins/vli/fu-vli-device.c:		g_value_set_uint(value, priv->kind);
plugins/vli/fu-vli-device.c:	priv->spi_cmds[FU_VLI_DEVICE_SPI_REQ_WRITE_STATUS] = 0x01;
plugins/vli/fu-vli-device.c:	priv->spi_cmds[FU_VLI_DEVICE_SPI_REQ_PAGE_PROG] = 0x02;
plugins/vli/fu-vli-device.c:	priv->spi_cmds[FU_VLI_DEVICE_SPI_REQ_READ_DATA] = 0x03;
plugins/vli/fu-vli-device.c:	priv->spi_cmds[FU_VLI_DEVICE_SPI_REQ_READ_STATUS] = 0x05;
plugins/vli/fu-vli-device.c:	priv->spi_cmds[FU_VLI_DEVICE_SPI_REQ_WRITE_EN] = 0x06;
plugins/vli/fu-vli-device.c:	priv->spi_cmds[FU_VLI_DEVICE_SPI_REQ_SECTOR_ERASE] = 0x20;
plugins/vli/fu-vli-device.c:	priv->spi_cmds[FU_VLI_DEVICE_SPI_REQ_CHIP_ERASE] = 0x60;
plugins/vli/fu-vli-device.c:	priv->spi_cmds[FU_VLI_DEVICE_SPI_REQ_READ_ID] = 0x9f;
plugins/vli/fu-vli-device.c:	priv->spi_cmd_read_id_sz = 2;
plugins/vli/fu-vli-device.c:	priv->spi_auto_detect = TRUE;
plugins/redfish/fu-redfish-device.c:	if (priv->milestone > 0x0)
plugins/redfish/fu-redfish-device.c:		fu_common_string_append_kx(str, idt, "Milestone", priv->milestone);
plugins/redfish/fu-redfish-device.c:	if (priv->build != NULL)
plugins/redfish/fu-redfish-device.c:		fu_common_string_append_kv(str, idt, "Build", priv->build);
plugins/redfish/fu-redfish-device.c:	g_autoptr(FuRedfishRequest) request = fu_redfish_backend_request_new(priv->backend);
plugins/redfish/fu-redfish-device.c:	g_autoptr(FuRedfishRequest) request = fu_redfish_backend_request_new(priv->backend);
plugins/redfish/fu-redfish-device.c:	g_autoptr(FuRedfishRequest) request = fu_redfish_backend_request_new(priv->backend);
plugins/redfish/fu-redfish-device.c:	priv->milestone = g_ascii_strtoull(out_build, NULL, 10);
plugins/redfish/fu-redfish-device.c:	if (priv->milestone == 0) {
plugins/redfish/fu-redfish-device.c:	if (priv->milestone % 2 != 0) {
plugins/redfish/fu-redfish-device.c:	priv->build = g_strndup(out_build + 2, 1);
plugins/redfish/fu-redfish-device.c:	JsonObject *member = priv->member;
plugins/redfish/fu-redfish-device.c:	return priv->backend;
plugins/redfish/fu-redfish-device.c:	g_autoptr(FuRedfishRequest) request = fu_redfish_backend_request_new(priv->backend);
plugins/redfish/fu-redfish-device.c:		g_value_set_object(value, priv->backend);
plugins/redfish/fu-redfish-device.c:		g_value_set_pointer(value, priv->member);
plugins/redfish/fu-redfish-device.c:		g_set_object(&priv->backend, g_value_get_object(value));
plugins/redfish/fu-redfish-device.c:		priv->member = json_object_ref(g_value_get_pointer(value));
plugins/redfish/fu-redfish-device.c:	if (priv->backend != NULL)
plugins/redfish/fu-redfish-device.c:		g_object_unref(priv->backend);
plugins/redfish/fu-redfish-device.c:	if (priv->member != NULL)
plugins/redfish/fu-redfish-device.c:		json_object_unref(priv->member);
plugins/redfish/fu-redfish-device.c:	g_free(priv->build);
plugins/pci-mei/fu-plugin-pci-mei.c:	fu_mei_hfsts1_to_string(priv->hfsts1, idt + 1, str);
plugins/pci-mei/fu-plugin-pci-mei.c:	fu_mei_hfsts2_to_string(priv->hfsts2, idt + 1, str);
plugins/pci-mei/fu-plugin-pci-mei.c:	fu_mei_hfsts3_to_string(priv->hfsts3, idt + 1, str);
plugins/pci-mei/fu-plugin-pci-mei.c:	fu_mei_hfsts4_to_string(priv->hfsts4, idt + 1, str);
plugins/pci-mei/fu-plugin-pci-mei.c:	fu_mei_hfsts5_to_string(priv->hfsts5, idt + 1, str);
plugins/pci-mei/fu-plugin-pci-mei.c:	fu_mei_hfsts6_to_string(priv->hfsts6, idt + 1, str);
plugins/pci-mei/fu-plugin-pci-mei.c:	guint8 ver = priv->vers.major;
plugins/pci-mei/fu-plugin-pci-mei.c:		if (priv->hfsts1.fields.operation_mode == 0xf)
plugins/pci-mei/fu-plugin-pci-mei.c:	priv->vers.platform = fu_common_strtoull(sections[0]);
plugins/pci-mei/fu-plugin-pci-mei.c:	priv->vers.major = fu_common_strtoull(split[0]);
plugins/pci-mei/fu-plugin-pci-mei.c:	priv->vers.minor = fu_common_strtoull(split[1]);
plugins/pci-mei/fu-plugin-pci-mei.c:	priv->vers.hotfix = fu_common_strtoull(split[2]);
plugins/pci-mei/fu-plugin-pci-mei.c:	priv->vers.buildno = fu_common_strtoull(split[3]);
plugins/pci-mei/fu-plugin-pci-mei.c:	priv->family = fu_mei_detect_family(plugin);
plugins/pci-mei/fu-plugin-pci-mei.c:	if (priv->family == FU_MEI_FAMILY_CSME)
plugins/pci-mei/fu-plugin-pci-mei.c:		priv->issue = fu_mei_common_is_csme_vulnerable(&priv->vers);
plugins/pci-mei/fu-plugin-pci-mei.c:	else if (priv->family == FU_MEI_FAMILY_TXE)
plugins/pci-mei/fu-plugin-pci-mei.c:		priv->issue = fu_mei_common_is_txe_vulnerable(&priv->vers);
plugins/pci-mei/fu-plugin-pci-mei.c:	else if (priv->family == FU_MEI_FAMILY_SPS)
plugins/pci-mei/fu-plugin-pci-mei.c:		priv->issue = fu_mei_common_is_sps_vulnerable(&priv->vers);
plugins/pci-mei/fu-plugin-pci-mei.c:			fu_mei_common_family_to_string(priv->family),
plugins/pci-mei/fu-plugin-pci-mei.c:			priv->vers.major,
plugins/pci-mei/fu-plugin-pci-mei.c:			priv->vers.minor,
plugins/pci-mei/fu-plugin-pci-mei.c:			priv->vers.hotfix);
plugins/pci-mei/fu-plugin-pci-mei.c:	priv->hfsts1.data = fu_common_read_uint32(buf, G_LITTLE_ENDIAN);
plugins/pci-mei/fu-plugin-pci-mei.c:	priv->hfsts2.data = fu_common_read_uint32(buf, G_LITTLE_ENDIAN);
plugins/pci-mei/fu-plugin-pci-mei.c:	priv->hfsts3.data = fu_common_read_uint32(buf, G_LITTLE_ENDIAN);
plugins/pci-mei/fu-plugin-pci-mei.c:	priv->hfsts4.data = fu_common_read_uint32(buf, G_LITTLE_ENDIAN);
plugins/pci-mei/fu-plugin-pci-mei.c:	priv->hfsts5.data = fu_common_read_uint32(buf, G_LITTLE_ENDIAN);
plugins/pci-mei/fu-plugin-pci-mei.c:	priv->hfsts6.data = fu_common_read_uint32(buf, G_LITTLE_ENDIAN);
plugins/pci-mei/fu-plugin-pci-mei.c:	g_set_object(&priv->pci_device, device);
plugins/pci-mei/fu-plugin-pci-mei.c:					 fu_mei_common_family_to_string(priv->family));
plugins/pci-mei/fu-plugin-pci-mei.c:	if (priv->hfsts1.fields.mfg_mode) {
plugins/pci-mei/fu-plugin-pci-mei.c:					 fu_mei_common_family_to_string(priv->family));
plugins/pci-mei/fu-plugin-pci-mei.c:	if (priv->hfsts1.fields.operation_mode == ME_HFS_MODE_OVER_JMPR) {
plugins/pci-mei/fu-plugin-pci-mei.c:	if (priv->family == FU_MEI_FAMILY_TXE)
plugins/pci-mei/fu-plugin-pci-mei.c:	if (priv->hfsts6.fields.boot_guard_disable) {
plugins/pci-mei/fu-plugin-pci-mei.c:	if (priv->family == FU_MEI_FAMILY_TXE)
plugins/pci-mei/fu-plugin-pci-mei.c:	if (priv->hfsts6.fields.boot_guard_disable)
plugins/pci-mei/fu-plugin-pci-mei.c:	if (!priv->hfsts6.fields.verified_boot) {
plugins/pci-mei/fu-plugin-pci-mei.c:	if (priv->family == FU_MEI_FAMILY_TXE)
plugins/pci-mei/fu-plugin-pci-mei.c:	if (priv->hfsts6.fields.boot_guard_disable)
plugins/pci-mei/fu-plugin-pci-mei.c:	if (!priv->hfsts6.fields.force_boot_guard_acm) {
plugins/pci-mei/fu-plugin-pci-mei.c:	if (priv->family == FU_MEI_FAMILY_TXE)
plugins/pci-mei/fu-plugin-pci-mei.c:	if (priv->hfsts6.fields.boot_guard_disable)
plugins/pci-mei/fu-plugin-pci-mei.c:	if (priv->hfsts6.fields.error_enforce_policy != ME_HFS_ENFORCEMENT_POLICY_SHUTDOWN_NOW) {
plugins/pci-mei/fu-plugin-pci-mei.c:	if (priv->family == FU_MEI_FAMILY_TXE)
plugins/pci-mei/fu-plugin-pci-mei.c:	if (priv->hfsts6.fields.boot_guard_disable)
plugins/pci-mei/fu-plugin-pci-mei.c:	if (!priv->hfsts6.fields.fpf_soc_lock) {
plugins/pci-mei/fu-plugin-pci-mei.c:				  priv->vers.platform,
plugins/pci-mei/fu-plugin-pci-mei.c:				  priv->vers.major,
plugins/pci-mei/fu-plugin-pci-mei.c:				  priv->vers.minor,
plugins/pci-mei/fu-plugin-pci-mei.c:				  priv->vers.hotfix,
plugins/pci-mei/fu-plugin-pci-mei.c:				  priv->vers.buildno);
plugins/pci-mei/fu-plugin-pci-mei.c:	if (priv->issue == FU_MEI_ISSUE_UNKNOWN) {
plugins/pci-mei/fu-plugin-pci-mei.c:					 fu_mei_common_family_to_string(priv->family));
plugins/pci-mei/fu-plugin-pci-mei.c:	if (priv->issue == FU_MEI_ISSUE_VULNERABLE) {
plugins/pci-mei/fu-plugin-pci-mei.c:	if (priv->pci_device == NULL)
plugins/rts54hub/fu-rts54hub-rtd21xx-device.c:	fu_common_string_append_kx(str, idt, "TargetAddr", priv->target_addr);
plugins/rts54hub/fu-rts54hub-rtd21xx-device.c:	fu_common_string_append_kx(str, idt, "I2cSpeed", priv->i2c_speed);
plugins/rts54hub/fu-rts54hub-rtd21xx-device.c:	fu_common_string_append_kx(str, idt, "RegisterAddrLen", priv->register_addr_len);
plugins/rts54hub/fu-rts54hub-rtd21xx-device.c:			priv->target_addr = tmp;
plugins/rts54hub/fu-rts54hub-rtd21xx-device.c:			priv->i2c_speed = tmp;
plugins/rts54hub/fu-rts54hub-rtd21xx-device.c:			priv->register_addr_len = tmp;
plugins/rts54hub/fu-rts54hub-rtd21xx-device.c:	if (target_addr != priv->target_addr) {
plugins/rts54hub/fu-rts54hub-rtd21xx-device.c:		priv->target_addr = target_addr;
plugins/rts54hub/fu-rts54hub-rtd21xx-device.c:	if (target_addr != priv->target_addr) {
plugins/rts54hub/fu-rts54hub-rtd21xx-device.c:		priv->target_addr = target_addr;
plugins/wacom-usb/fu-wac-module.c:				   fu_wac_module_fw_type_to_string(priv->fw_type));
plugins/wacom-usb/fu-wac-module.c:				   fu_wac_module_status_to_string(priv->status));
plugins/wacom-usb/fu-wac-module.c:				   fu_wac_module_command_to_string(priv->command));
plugins/wacom-usb/fu-wac-module.c:	if (priv->fw_type != buf[1]) {
plugins/wacom-usb/fu-wac-module.c:			    (guint)priv->fw_type);
plugins/wacom-usb/fu-wac-module.c:	if (priv->command != buf[2] || priv->status != buf[3]) {
plugins/wacom-usb/fu-wac-module.c:		priv->command = buf[2];
plugins/wacom-usb/fu-wac-module.c:		priv->status = buf[3];
plugins/wacom-usb/fu-wac-module.c:				fu_wac_module_command_to_string(priv->command),
plugins/wacom-usb/fu-wac-module.c:				fu_wac_module_status_to_string(priv->status));
plugins/wacom-usb/fu-wac-module.c:			[1] = priv->fw_type,
plugins/wacom-usb/fu-wac-module.c:		if (priv->status == FU_WAC_MODULE_STATUS_BUSY) {
plugins/wacom-usb/fu-wac-module.c:		if (priv->status == FU_WAC_MODULE_STATUS_OK)
plugins/wacom-usb/fu-wac-module.c:			    fu_wac_module_status_to_string(priv->status));
plugins/wacom-usb/fu-wac-module.c:	if (priv->status != FU_WAC_MODULE_STATUS_OK) {
plugins/wacom-usb/fu-wac-module.c:			    fu_wac_module_status_to_string(priv->status));
plugins/wacom-usb/fu-wac-module.c:		g_value_set_uint(value, priv->fw_type);
plugins/wacom-usb/fu-wac-module.c:		g_value_set_object(value, priv->usb_device);
plugins/wacom-usb/fu-wac-module.c:		priv->fw_type = g_value_get_uint(value);
plugins/wacom-usb/fu-wac-module.c:		g_set_object(&priv->usb_device, g_value_get_object(value));
plugins/wacom-usb/fu-wac-module.c:	vendor_id = g_strdup_printf("USB:0x%04X", g_usb_device_get_vid(priv->usb_device));
plugins/wacom-usb/fu-wac-module.c:	fu_device_set_physical_id(FU_DEVICE(self), g_usb_device_get_platform_id(priv->usb_device));
plugins/wacom-usb/fu-wac-module.c:	fu_device_set_logical_id(FU_DEVICE(self), fu_wac_module_fw_type_to_string(priv->fw_type));
plugins/wacom-usb/fu-wac-module.c:				g_usb_device_get_vid(priv->usb_device),
plugins/wacom-usb/fu-wac-module.c:				g_usb_device_get_pid(priv->usb_device),
plugins/wacom-usb/fu-wac-module.c:				fu_wac_module_fw_type_to_string(priv->fw_type));
plugins/wacom-usb/fu-wac-module.c:	if (priv->usb_device != NULL)
plugins/wacom-usb/fu-wac-module.c:		g_object_unref(priv->usb_device);
plugins/uefi-pk/fu-plugin-uefi-pk.c:			priv->has_pk_test_key = TRUE;
plugins/uefi-pk/fu-plugin-uefi-pk.c:		priv->has_pk_test_key = TRUE;
plugins/uefi-pk/fu-plugin-uefi-pk.c:	if (priv->has_pk_test_key) {
plugins/thunderbolt/fu-thunderbolt-firmware.c:	return priv->is_host;
plugins/thunderbolt/fu-thunderbolt-firmware.c:	return priv->is_native;
plugins/thunderbolt/fu-thunderbolt-firmware.c:	return priv->has_pd;
plugins/thunderbolt/fu-thunderbolt-firmware.c:	return priv->device_id;
plugins/thunderbolt/fu-thunderbolt-firmware.c:	return priv->vendor_id;
plugins/thunderbolt/fu-thunderbolt-firmware.c:	return priv->model_id;
plugins/thunderbolt/fu-thunderbolt-firmware.c:	return priv->flash_size;
plugins/thunderbolt/fu-thunderbolt-firmware.c:				  fu_thunderbolt_firmware_family_to_string(priv->family));
plugins/thunderbolt/fu-thunderbolt-firmware.c:	fu_xmlb_builder_insert_kb(bn, "is_host", priv->is_host);
plugins/thunderbolt/fu-thunderbolt-firmware.c:	fu_xmlb_builder_insert_kb(bn, "is_native", priv->is_native);
plugins/thunderbolt/fu-thunderbolt-firmware.c:	fu_xmlb_builder_insert_kx(bn, "device_id", priv->device_id);
plugins/thunderbolt/fu-thunderbolt-firmware.c:	fu_xmlb_builder_insert_kx(bn, "vendor_id", priv->vendor_id);
plugins/thunderbolt/fu-thunderbolt-firmware.c:	fu_xmlb_builder_insert_kx(bn, "model_id", priv->model_id);
plugins/thunderbolt/fu-thunderbolt-firmware.c:	fu_xmlb_builder_insert_kx(bn, "flash_size", priv->flash_size);
plugins/thunderbolt/fu-thunderbolt-firmware.c:	fu_xmlb_builder_insert_kx(bn, "generation", priv->gen);
plugins/thunderbolt/fu-thunderbolt-firmware.c:	fu_xmlb_builder_insert_kx(bn, "ports", priv->ports);
plugins/thunderbolt/fu-thunderbolt-firmware.c:	fu_xmlb_builder_insert_kb(bn, "has_pd", priv->has_pd);
plugins/thunderbolt/fu-thunderbolt-firmware.c:		g_autofree gchar *tmp = g_strdup_printf("%x", priv->sections[i]);
plugins/thunderbolt/fu-thunderbolt-firmware.c:	guint32 location_start = priv->sections[section] + offset;
plugins/thunderbolt/fu-thunderbolt-firmware.c:	if (priv->gen >= 3 || priv->gen == 0) {
plugins/thunderbolt/fu-thunderbolt-firmware.c:		priv->sections[_SECTION_DROM] = offset + priv->sections[_SECTION_DIGITAL];
plugins/thunderbolt/fu-thunderbolt-firmware.c:		priv->sections[_SECTION_ARC_PARAMS] = offset + priv->sections[_SECTION_DIGITAL];
plugins/thunderbolt/fu-thunderbolt-firmware.c:	if (priv->is_host && priv->gen > 2) {
plugins/thunderbolt/fu-thunderbolt-firmware.c:		priv->sections[_SECTION_DRAM_UCODE] = offset + priv->sections[_SECTION_DIGITAL];
plugins/thunderbolt/fu-thunderbolt-firmware.c:	if (priv->sections[_SECTION_DROM] != 0)
plugins/thunderbolt/fu-thunderbolt-firmware.c:	if (priv->is_host && priv->gen < 3)
plugins/thunderbolt/fu-thunderbolt-firmware.c:	priv->sections[_SECTION_DIGITAL] = offset;
plugins/thunderbolt/fu-thunderbolt-firmware.c:	priv->is_native = tmp & 0x20;
plugins/thunderbolt/fu-thunderbolt-firmware.c:	priv->is_host = tmp & (1 << 1);
plugins/thunderbolt/fu-thunderbolt-firmware.c:						 &priv->device_id,
plugins/thunderbolt/fu-thunderbolt-firmware.c:		if (hw_info_arr[i].id == priv->device_id) {
plugins/thunderbolt/fu-thunderbolt-firmware.c:			priv->family = hw_info_arr[i].family;
plugins/thunderbolt/fu-thunderbolt-firmware.c:			priv->gen = hw_info_arr[i].gen;
plugins/thunderbolt/fu-thunderbolt-firmware.c:			priv->ports = hw_info_arr[i].ports;
plugins/thunderbolt/fu-thunderbolt-firmware.c:	if (priv->ports == 0 && priv->is_host) {
plugins/thunderbolt/fu-thunderbolt-firmware.c:			    priv->device_id);
plugins/thunderbolt/fu-thunderbolt-firmware.c:	if (priv->sections[_SECTION_DROM] != 0) {
plugins/thunderbolt/fu-thunderbolt-firmware.c:							 &priv->vendor_id,
plugins/thunderbolt/fu-thunderbolt-firmware.c:							 &priv->model_id,
plugins/thunderbolt/fu-thunderbolt-firmware.c:	if (priv->sections[_SECTION_ARC_PARAMS] != 0) {
plugins/thunderbolt/fu-thunderbolt-firmware.c:		priv->has_pd = fu_thunderbolt_firmware_valid_pd_pointer(pd_pointer);
plugins/thunderbolt/fu-thunderbolt-firmware.c:	switch (priv->family) {
plugins/thunderbolt/fu-thunderbolt-firmware.c:	if (priv->is_host) {
plugins/thunderbolt/fu-thunderbolt-firmware.c:		switch (priv->family) {
plugins/thunderbolt/fu-thunderbolt-firmware.c:			priv->flash_size = tmp & 0x07;
plugins/flashrom/fu-flashrom-device.c:	if (g_strcmp0(priv->programmer_name, name) == 0)
plugins/flashrom/fu-flashrom-device.c:	g_free(priv->programmer_name);
plugins/flashrom/fu-flashrom-device.c:	priv->programmer_name = g_strdup(name);
plugins/flashrom/fu-flashrom-device.c:	return priv->programmer_name;
plugins/flashrom/fu-flashrom-device.c:	if (g_strcmp0(priv->programmer_args, args) == 0)
plugins/flashrom/fu-flashrom-device.c:	g_free(priv->programmer_args);
plugins/flashrom/fu-flashrom-device.c:	priv->programmer_args = g_strdup(args);
plugins/flashrom/fu-flashrom-device.c:	return priv->flash_size;
plugins/flashrom/fu-flashrom-device.c:	return priv->flashctx;
plugins/flashrom/fu-flashrom-device.c:	g_free(priv->programmer_name);
plugins/flashrom/fu-flashrom-device.c:	g_free(priv->programmer_args);
plugins/flashrom/fu-flashrom-device.c:	if (priv->programmer_name == NULL) {
plugins/flashrom/fu-flashrom-device.c:	if (flashrom_programmer_init(&priv->flashprog,
plugins/flashrom/fu-flashrom-device.c:				     priv->programmer_name,
plugins/flashrom/fu-flashrom-device.c:				     priv->programmer_args)) {
plugins/flashrom/fu-flashrom-device.c:	rc = flashrom_flash_probe(&priv->flashctx, priv->flashprog, NULL);
plugins/flashrom/fu-flashrom-device.c:	priv->flash_size = flashrom_flash_getsize(priv->flashctx);
plugins/flashrom/fu-flashrom-device.c:	if (priv->flash_size == 0) {
plugins/flashrom/fu-flashrom-device.c:	flashrom_flash_release(priv->flashctx);
plugins/flashrom/fu-flashrom-device.c:	flashrom_programmer_shutdown(priv->flashprog);
plugins/flashrom/fu-plugin-flashrom.c:	    ((priv->bcr & BCR_WPD) == 0 && (priv->bcr & BCR_BLE) > 0))
plugins/logitech-hidpp/fu-logitech-hidpp-runtime.c:	return priv->signed_firmware;
plugins/logitech-hidpp/fu-logitech-hidpp-runtime.c:	priv->signed_firmware = signed_firmware;
plugins/logitech-hidpp/fu-logitech-hidpp-runtime.c:	return priv->io_channel;
plugins/logitech-hidpp/fu-logitech-hidpp-runtime.c:	priv->io_channel = io_channel;
plugins/logitech-hidpp/fu-logitech-hidpp-runtime.c:	return priv->version_bl_major;
plugins/logitech-hidpp/fu-logitech-hidpp-runtime.c:	priv->version_bl_major = version_bl_major;
plugins/logitech-hidpp/fu-logitech-hidpp-runtime.c:	fu_common_string_append_kb(str, idt, "SignedFirmware", priv->signed_firmware);
plugins/logitech-hidpp/fu-logitech-hidpp-runtime.c:	return fu_logitech_hidpp_transfer(priv->io_channel, msg, error);
plugins/logitech-hidpp/fu-logitech-hidpp-runtime.c:	if (priv->io_channel != NULL) {
plugins/logitech-hidpp/fu-logitech-hidpp-runtime.c:		if (!fu_io_channel_shutdown(priv->io_channel, error))
plugins/logitech-hidpp/fu-logitech-hidpp-runtime.c:		g_clear_object(&priv->io_channel);
plugins/logitech-hidpp/fu-logitech-hidpp-runtime.c:	if (!fu_logitech_hidpp_receive(priv->io_channel, msg, timeout, &error_local)) {
plugins/logitech-hidpp/fu-logitech-hidpp-runtime.c:	priv->io_channel = fu_io_channel_new_file(devpath, error);
plugins/logitech-hidpp/fu-logitech-hidpp-runtime.c:	if (priv->io_channel == NULL)
plugins/logitech-hidpp/fu-logitech-hidpp-runtime.c:			priv->version_bl_major = 0x01;
plugins/logitech-hidpp/fu-logitech-hidpp-runtime.c:			priv->version_bl_major = 0x03;
plugins/logitech-hidpp/fu-logitech-hidpp-runtime.c:			priv->version_bl_major = 0x03;
plugins/logitech-hidpp/fu-logitech-hidpp-bootloader.c:	fu_common_string_append_kx(str, idt, "FlashAddrHigh", priv->flash_addr_hi);
plugins/logitech-hidpp/fu-logitech-hidpp-bootloader.c:	fu_common_string_append_kx(str, idt, "FlashAddrLow", priv->flash_addr_lo);
plugins/logitech-hidpp/fu-logitech-hidpp-bootloader.c:	fu_common_string_append_kx(str, idt, "FlashBlockSize", priv->flash_blocksize);
plugins/logitech-hidpp/fu-logitech-hidpp-bootloader.c:	return priv->flash_addr_lo;
plugins/logitech-hidpp/fu-logitech-hidpp-bootloader.c:	return priv->flash_addr_hi;
plugins/logitech-hidpp/fu-logitech-hidpp-bootloader.c:	return priv->flash_blocksize;
plugins/logitech-hidpp/fu-logitech-hidpp-bootloader.c:	priv->flash_addr_lo = fu_common_read_uint16(req->data + 0, G_BIG_ENDIAN);
plugins/logitech-hidpp/fu-logitech-hidpp-bootloader.c:	priv->flash_addr_hi = fu_common_read_uint16(req->data + 2, G_BIG_ENDIAN);
plugins/logitech-hidpp/fu-logitech-hidpp-bootloader.c:	priv->flash_blocksize = fu_common_read_uint16(req->data + 4, G_BIG_ENDIAN);
plugins/logitech-hidpp/fu-logitech-hidpp-device.c:	priv->device_idx = device_idx;
plugins/logitech-hidpp/fu-logitech-hidpp-device.c:	return priv->hidpp_pid;
plugins/logitech-hidpp/fu-logitech-hidpp-device.c:	priv->hidpp_pid = hidpp_pid;
plugins/logitech-hidpp/fu-logitech-hidpp-device.c:	return priv->model_id;
plugins/logitech-hidpp/fu-logitech-hidpp-device.c:	msg->device_id = priv->device_idx;
plugins/logitech-hidpp/fu-logitech-hidpp-device.c:	msg->hidpp_version = priv->hidpp_version;
plugins/logitech-hidpp/fu-logitech-hidpp-device.c:	if (!fu_logitech_hidpp_transfer(priv->io_channel, msg, &error_local)) {
plugins/logitech-hidpp/fu-logitech-hidpp-device.c:			priv->hidpp_version = 1;
plugins/logitech-hidpp/fu-logitech-hidpp-device.c:	if (priv->device_idx == HIDPP_DEVICE_IDX_UNSET &&
plugins/logitech-hidpp/fu-logitech-hidpp-device.c:		priv->device_idx = msg->device_id;
plugins/logitech-hidpp/fu-logitech-hidpp-device.c:		g_debug("Device index is %02x", priv->device_idx);
plugins/logitech-hidpp/fu-logitech-hidpp-device.c:	if (priv->hidpp_version != FU_HIDPP_VERSION_BLE) {
plugins/logitech-hidpp/fu-logitech-hidpp-device.c:		priv->hidpp_version = (guint)version;
plugins/logitech-hidpp/fu-logitech-hidpp-device.c:	if (priv->io_channel != NULL) {
plugins/logitech-hidpp/fu-logitech-hidpp-device.c:		if (!fu_io_channel_shutdown(priv->io_channel, error))
plugins/logitech-hidpp/fu-logitech-hidpp-device.c:		g_clear_object(&priv->io_channel);
plugins/logitech-hidpp/fu-logitech-hidpp-device.c:	msg->device_id = priv->device_idx;
plugins/logitech-hidpp/fu-logitech-hidpp-device.c:	msg->hidpp_version = priv->hidpp_version;
plugins/logitech-hidpp/fu-logitech-hidpp-device.c:	if (!fu_logitech_hidpp_receive(priv->io_channel, msg, timeout, &error_local)) {
plugins/logitech-hidpp/fu-logitech-hidpp-device.c:	if (priv->feature_index->len == 0) {
plugins/logitech-hidpp/fu-logitech-hidpp-device.c:	priv->io_channel = fu_io_channel_new_file(devpath, error);
plugins/logitech-hidpp/fu-logitech-hidpp-device.c:	if (priv->io_channel == NULL)
plugins/logitech-hidpp/fu-logitech-hidpp-device.c:	fu_common_string_append_ku(str, idt, "HidppVersion", priv->hidpp_version);
plugins/logitech-hidpp/fu-logitech-hidpp-device.c:	fu_common_string_append_ku(str, idt, "HidppPid", priv->hidpp_pid);
plugins/logitech-hidpp/fu-logitech-hidpp-device.c:	fu_common_string_append_kx(str, idt, "DeviceIdx", priv->device_idx);
plugins/logitech-hidpp/fu-logitech-hidpp-device.c:	fu_common_string_append_kv(str, idt, "ModelId", priv->model_id);
plugins/logitech-hidpp/fu-logitech-hidpp-device.c:	for (guint i = 0; i < priv->feature_index->len; i++) {
plugins/logitech-hidpp/fu-logitech-hidpp-device.c:		FuLogitechHidPpHidppMap *map = g_ptr_array_index(priv->feature_index, i);
plugins/logitech-hidpp/fu-logitech-hidpp-device.c:	for (guint i = 0; i < priv->feature_index->len; i++) {
plugins/logitech-hidpp/fu-logitech-hidpp-device.c:		FuLogitechHidPpHidppMap *map = g_ptr_array_index(priv->feature_index, i);
plugins/logitech-hidpp/fu-logitech-hidpp-device.c:	if (priv->model_id == NULL) {
plugins/logitech-hidpp/fu-logitech-hidpp-device.c:	    g_strdup_printf("%s-%s", fu_device_get_logical_id(FU_DEVICE(self)), priv->model_id);
plugins/logitech-hidpp/fu-logitech-hidpp-device.c:				      priv->model_id);
plugins/logitech-hidpp/fu-logitech-hidpp-device.c:	msg->device_id = priv->device_idx;
plugins/logitech-hidpp/fu-logitech-hidpp-device.c:	msg->hidpp_version = priv->hidpp_version;
plugins/logitech-hidpp/fu-logitech-hidpp-device.c:	if (!fu_logitech_hidpp_transfer(priv->io_channel, msg, error)) {
plugins/logitech-hidpp/fu-logitech-hidpp-device.c:		msg->device_id = priv->device_idx;
plugins/logitech-hidpp/fu-logitech-hidpp-device.c:		if (!fu_logitech_hidpp_transfer(priv->io_channel, msg, error)) {
plugins/logitech-hidpp/fu-logitech-hidpp-device.c:			priv->cached_fw_entity = i;
plugins/logitech-hidpp/fu-logitech-hidpp-device.c:	msg->device_id = priv->device_idx;
plugins/logitech-hidpp/fu-logitech-hidpp-device.c:	msg->hidpp_version = priv->hidpp_version;
plugins/logitech-hidpp/fu-logitech-hidpp-device.c:	if (!fu_logitech_hidpp_transfer(priv->io_channel, msg, error)) {
plugins/logitech-hidpp/fu-logitech-hidpp-device.c:	priv->model_id = g_string_free(g_steal_pointer(&str), FALSE);
plugins/logitech-hidpp/fu-logitech-hidpp-device.c:				priv->model_id);
plugins/logitech-hidpp/fu-logitech-hidpp-device.c:	if (priv->hidpp_version >= 2.f) {
plugins/logitech-hidpp/fu-logitech-hidpp-device.c:			msg->device_id = priv->device_idx;
plugins/logitech-hidpp/fu-logitech-hidpp-device.c:			msg->hidpp_version = priv->hidpp_version;
plugins/logitech-hidpp/fu-logitech-hidpp-device.c:			if (!fu_logitech_hidpp_transfer(priv->io_channel, msg, error)) {
plugins/logitech-hidpp/fu-logitech-hidpp-device.c:			if (!fu_logitech_hidpp_transfer(priv->io_channel, msg, error)) {
plugins/logitech-hidpp/fu-logitech-hidpp-device.c:				msg->device_id = priv->device_idx;
plugins/logitech-hidpp/fu-logitech-hidpp-device.c:				msg->hidpp_version = priv->hidpp_version;
plugins/logitech-hidpp/fu-logitech-hidpp-device.c:				if (!fu_logitech_hidpp_transfer(priv->io_channel, msg, error)) {
plugins/logitech-hidpp/fu-logitech-hidpp-device.c:	if (priv->hidpp_version == 1.f) {
plugins/logitech-hidpp/fu-logitech-hidpp-device.c:		msg->device_id = priv->device_idx;
plugins/logitech-hidpp/fu-logitech-hidpp-device.c:		msg->hidpp_version = priv->hidpp_version;
plugins/logitech-hidpp/fu-logitech-hidpp-device.c:		if (fu_logitech_hidpp_transfer(priv->io_channel, msg, NULL)) {
plugins/logitech-hidpp/fu-logitech-hidpp-device.c:		if (fu_logitech_hidpp_transfer(priv->io_channel, msg, NULL)) {
plugins/logitech-hidpp/fu-logitech-hidpp-device.c:	msg->device_id = priv->device_idx;
plugins/logitech-hidpp/fu-logitech-hidpp-device.c:	msg->hidpp_version = priv->hidpp_version;
plugins/logitech-hidpp/fu-logitech-hidpp-device.c:	if (!fu_logitech_hidpp_transfer(priv->io_channel, msg, error)) {
plugins/logitech-hidpp/fu-logitech-hidpp-device.c:	g_ptr_array_add(priv->feature_index, map);
plugins/logitech-hidpp/fu-logitech-hidpp-device.c:	if (priv->device_idx == HIDPP_DEVICE_IDX_UNSET ||
plugins/logitech-hidpp/fu-logitech-hidpp-device.c:	    priv->device_idx == HIDPP_DEVICE_IDX_BLE) {
plugins/logitech-hidpp/fu-logitech-hidpp-device.c:	if (priv->device_idx != HIDPP_DEVICE_IDX_UNSET &&
plugins/logitech-hidpp/fu-logitech-hidpp-device.c:	    priv->device_idx != HIDPP_DEVICE_IDX_BLE) {
plugins/logitech-hidpp/fu-logitech-hidpp-device.c:		g_string_append_printf(id_str, "DEV_IDX=%d", priv->device_idx);
plugins/logitech-hidpp/fu-logitech-hidpp-device.c:		priv->hidpp_version = FU_HIDPP_VERSION_BLE;
plugins/logitech-hidpp/fu-logitech-hidpp-device.c:		priv->device_idx = HIDPP_DEVICE_IDX_BLE;
plugins/logitech-hidpp/fu-logitech-hidpp-device.c:		priv->device_idx = HIDPP_DEVICE_IDX_RECEIVER;
plugins/logitech-hidpp/fu-logitech-hidpp-device.c:	if (priv->device_idx == HIDPP_DEVICE_IDX_UNSET) {
plugins/logitech-hidpp/fu-logitech-hidpp-device.c:	g_ptr_array_set_size(priv->feature_index, 0);
plugins/logitech-hidpp/fu-logitech-hidpp-device.c:	if (priv->hidpp_version >= 2.f) {
plugins/logitech-hidpp/fu-logitech-hidpp-device.c:		g_ptr_array_add(priv->feature_index, map);
plugins/logitech-hidpp/fu-logitech-hidpp-device.c:		msg->device_id = priv->device_idx;
plugins/logitech-hidpp/fu-logitech-hidpp-device.c:		msg->hidpp_version = priv->hidpp_version;
plugins/logitech-hidpp/fu-logitech-hidpp-device.c:		if (!fu_logitech_hidpp_transfer(priv->io_channel, msg, error)) {
plugins/logitech-hidpp/fu-logitech-hidpp-device.c:		msg->device_id = priv->device_idx;
plugins/logitech-hidpp/fu-logitech-hidpp-device.c:		msg->hidpp_version = priv->hidpp_version;
plugins/logitech-hidpp/fu-logitech-hidpp-device.c:		if (!fu_logitech_hidpp_transfer(priv->io_channel, msg, error)) {
plugins/logitech-hidpp/fu-logitech-hidpp-device.c:		msg->device_id = priv->device_idx;
plugins/logitech-hidpp/fu-logitech-hidpp-device.c:		msg->hidpp_version = priv->hidpp_version;
plugins/logitech-hidpp/fu-logitech-hidpp-device.c:		if (!fu_logitech_hidpp_transfer(priv->io_channel, msg, &error_local)) {
plugins/logitech-hidpp/fu-logitech-hidpp-device.c:		msg->device_id = priv->device_idx;
plugins/logitech-hidpp/fu-logitech-hidpp-device.c:		if (!fu_logitech_hidpp_transfer(priv->io_channel, msg, error)) {
plugins/logitech-hidpp/fu-logitech-hidpp-device.c:	msg->device_id = priv->device_idx;
plugins/logitech-hidpp/fu-logitech-hidpp-device.c:	msg->hidpp_version = priv->hidpp_version;
plugins/logitech-hidpp/fu-logitech-hidpp-device.c:	if (priv->device_idx != HIDPP_DEVICE_IDX_UNSET && priv->device_idx != HIDPP_DEVICE_IDX_BLE)
plugins/logitech-hidpp/fu-logitech-hidpp-device.c:	if (!fu_logitech_hidpp_transfer(priv->io_channel, msg, error)) {
plugins/logitech-hidpp/fu-logitech-hidpp-device.c:		if (!fu_logitech_hidpp_receive(priv->io_channel, msg2, 15000, error))
plugins/logitech-hidpp/fu-logitech-hidpp-device.c:	if (priv->cached_fw_entity != data[0]) {
plugins/logitech-hidpp/fu-logitech-hidpp-device.c:		g_warning("updating cached entity 0x%x with 0x%x", priv->cached_fw_entity, data[0]);
plugins/logitech-hidpp/fu-logitech-hidpp-device.c:		priv->cached_fw_entity = data[0];
plugins/logitech-hidpp/fu-logitech-hidpp-device.c:	msg->device_id = priv->device_idx;
plugins/logitech-hidpp/fu-logitech-hidpp-device.c:	msg->hidpp_version = priv->hidpp_version;
plugins/logitech-hidpp/fu-logitech-hidpp-device.c:	if (!fu_logitech_hidpp_transfer(priv->io_channel, msg, &error_local)) {
plugins/logitech-hidpp/fu-logitech-hidpp-device.c:	return fu_logitech_hidpp_device_attach(self, priv->cached_fw_entity, progress, error);
plugins/logitech-hidpp/fu-logitech-hidpp-device.c:		priv->model_id = g_strdup(value);
plugins/logitech-hidpp/fu-logitech-hidpp-device.c:	g_ptr_array_unref(priv->feature_index);
plugins/logitech-hidpp/fu-logitech-hidpp-device.c:	g_free(priv->model_id);
plugins/logitech-hidpp/fu-logitech-hidpp-device.c:	priv->device_idx = HIDPP_DEVICE_IDX_UNSET;
plugins/logitech-hidpp/fu-logitech-hidpp-device.c:	priv->feature_index = g_ptr_array_new_with_free_func(g_free);
plugins/logitech-hidpp/fu-logitech-hidpp-device.c:	priv->io_channel = fu_logitech_hidpp_runtime_get_io_channel(FU_HIDPP_RUNTIME(parent));
plugins/synaptics-mst/fu-plugin-synaptics-mst.c:	for (guint i = 0; i < priv->devices->len; i++) {
plugins/synaptics-mst/fu-plugin-synaptics-mst.c:		FuDevice *device = FU_DEVICE(g_ptr_array_index(priv->devices, i));
plugins/synaptics-mst/fu-plugin-synaptics-mst.c:	priv->drm_changed_id = 0;
plugins/synaptics-mst/fu-plugin-synaptics-mst.c:	if (priv->drm_changed_id != 0)
plugins/synaptics-mst/fu-plugin-synaptics-mst.c:		g_source_remove(priv->drm_changed_id);
plugins/synaptics-mst/fu-plugin-synaptics-mst.c:	priv->drm_changed_id = g_timeout_add_seconds(FU_SYNAPTICS_MST_DRM_REPLUG_DELAY,
plugins/synaptics-mst/fu-plugin-synaptics-mst.c:	g_ptr_array_add(priv->devices, g_steal_pointer(&dev));
plugins/synaptics-mst/fu-plugin-synaptics-mst.c:	priv->devices = g_ptr_array_new_with_free_func((GDestroyNotify)g_object_unref);
plugins/synaptics-mst/fu-plugin-synaptics-mst.c:	if (priv->drm_changed_id != 0)
plugins/synaptics-mst/fu-plugin-synaptics-mst.c:		g_source_remove(priv->drm_changed_id);
plugins/synaptics-mst/fu-plugin-synaptics-mst.c:	g_ptr_array_unref(priv->devices);
plugins/wacom-raw/fu-wacom-device.c:	fu_common_string_append_kx(str, idt, "FlashBlockSize", priv->flash_block_size);
plugins/wacom-raw/fu-wacom-device.c:	fu_common_string_append_kx(str, idt, "FlashBaseAddr", priv->flash_base_addr);
plugins/wacom-raw/fu-wacom-device.c:	fu_common_string_append_kx(str, idt, "FlashSize", priv->flash_size);
plugins/wacom-raw/fu-wacom-device.c:	return priv->flash_block_size;
plugins/wacom-raw/fu-wacom-device.c:	return priv->flash_base_addr;
plugins/wacom-raw/fu-wacom-device.c:	if (fu_firmware_get_addr(firmware) != priv->flash_base_addr) {
plugins/wacom-raw/fu-wacom-device.c:	if (g_bytes_get_size(fw) > priv->flash_size) {
plugins/wacom-raw/fu-wacom-device.c:					       priv->flash_base_addr,
plugins/wacom-raw/fu-wacom-device.c:					       priv->flash_block_size);
plugins/wacom-raw/fu-wacom-device.c:		priv->flash_block_size = fu_common_strtoull(value);
plugins/wacom-raw/fu-wacom-device.c:		priv->flash_base_addr = fu_common_strtoull(value);
plugins/wacom-raw/fu-wacom-device.c:		priv->flash_size = fu_common_strtoull(value);
plugins/superio/fu-superio-device.c:	if (priv->port == 0) {
plugins/superio/fu-superio-device.c:	if (!fu_udev_device_pwrite(FU_UDEV_DEVICE(self), priv->port, addr, error))
plugins/superio/fu-superio-device.c:	if (!fu_udev_device_pread(FU_UDEV_DEVICE(self), priv->port + 1, data, error))
plugins/superio/fu-superio-device.c:	if (priv->port == 0) {
plugins/superio/fu-superio-device.c:	if (!fu_udev_device_pwrite(FU_UDEV_DEVICE(self), priv->port, addr, error))
plugins/superio/fu-superio-device.c:	if (!fu_udev_device_pwrite(FU_UDEV_DEVICE(self), priv->port + 1, data, error))
plugins/superio/fu-superio-device.c:	fu_common_string_append_kv(str, idt, "Chipset", priv->chipset);
plugins/superio/fu-superio-device.c:	fu_common_string_append_kx(str, idt, "Id", priv->id);
plugins/superio/fu-superio-device.c:	fu_common_string_append_kx(str, idt, "Port", priv->port);
plugins/superio/fu-superio-device.c:	fu_common_string_append_kx(str, idt, "DataPort", priv->data_port);
plugins/superio/fu-superio-device.c:	fu_common_string_append_kx(str, idt, "ControlPort", priv->control_port);
plugins/superio/fu-superio-device.c:	if (priv->id == 0x0) {
plugins/superio/fu-superio-device.c:	if (priv->port == 0)
plugins/superio/fu-superio-device.c:	if (priv->id != id_tmp) {
plugins/superio/fu-superio-device.c:			    (guint)priv->id);
plugins/superio/fu-superio-device.c:		if (!fu_udev_device_pread(FU_UDEV_DEVICE(self), priv->control_port, &status, error))
plugins/superio/fu-superio-device.c:		if (g_timer_elapsed(timer, NULL) * 1000.0f > priv->timeout_ms)
plugins/superio/fu-superio-device.c:	return fu_udev_device_pread(FU_UDEV_DEVICE(self), priv->data_port, data, error);
plugins/superio/fu-superio-device.c:	return fu_udev_device_pwrite(FU_UDEV_DEVICE(self), priv->data_port, data, error);
plugins/superio/fu-superio-device.c:	return fu_udev_device_pwrite(FU_UDEV_DEVICE(self), priv->control_port, cmd, error);
plugins/superio/fu-superio-device.c:		if (!fu_udev_device_pread(FU_UDEV_DEVICE(self), priv->control_port, &status, error))
plugins/superio/fu-superio-device.c:		if (!fu_udev_device_pread(FU_UDEV_DEVICE(self), priv->data_port, &unused, error))
plugins/superio/fu-superio-device.c:		if (g_timer_elapsed(timer, NULL) * 1000.f > priv->timeout_ms) {
plugins/superio/fu-superio-device.c:	fu_device_set_logical_id(device, priv->chipset);
plugins/superio/fu-superio-device.c:	devid = g_strdup_printf("SuperIO-%s", priv->chipset);
plugins/superio/fu-superio-device.c:	name = g_strdup_printf("SuperIO %s", priv->chipset);
plugins/superio/fu-superio-device.c:	if (priv->data_port == 0 && priv->control_port == 0) {
plugins/superio/fu-superio-device.c:						 &priv->data_port,
plugins/superio/fu-superio-device.c:						 &priv->control_port,
plugins/superio/fu-superio-device.c:		g_value_set_string(value, priv->chipset);
plugins/superio/fu-superio-device.c:		g_free(priv->chipset);
plugins/superio/fu-superio-device.c:		priv->chipset = g_value_dup_string(value);
plugins/superio/fu-superio-device.c:			priv->id = tmp;
plugins/superio/fu-superio-device.c:			priv->port = tmp;
plugins/superio/fu-superio-device.c:			priv->control_port = tmp;
plugins/superio/fu-superio-device.c:			priv->data_port = tmp;
plugins/superio/fu-superio-device.c:			priv->timeout_ms = tmp;
plugins/superio/fu-superio-device.c:	priv->timeout_ms = FU_PLUGIN_SUPERIO_DEFAULT_TIMEOUT;
plugins/msr/fu-plugin-msr.c:		priv->ia32_debug_supported = ((ecx >> 11) & 0x1) > 0;
plugins/msr/fu-plugin-msr.c:		priv->k8_syscfg_supported = ((eax >> 0) & 0x1) > 0;
plugins/msr/fu-plugin-msr.c:	if (priv->ia32_debug_supported) {
plugins/msr/fu-plugin-msr.c:						&priv->ia32_debug.data,
plugins/msr/fu-plugin-msr.c:			priv->ia32_debug.fields.enabled,
plugins/msr/fu-plugin-msr.c:			priv->ia32_debug.fields.locked,
plugins/msr/fu-plugin-msr.c:			priv->ia32_debug.fields.debug_occurred);
plugins/msr/fu-plugin-msr.c:	if (priv->k8_syscfg_supported) {
plugins/msr/fu-plugin-msr.c:						&priv->k8_syscfg.data,
plugins/msr/fu-plugin-msr.c:		g_debug("MSR_K8_SYSCFG: sev_is_enabled=%i", priv->k8_syscfg.fields.sev_is_enabled);
plugins/msr/fu-plugin-msr.c:	if (!priv->ia32_debug_supported)
plugins/msr/fu-plugin-msr.c:	if (priv->ia32_debug.fields.enabled) {
plugins/msr/fu-plugin-msr.c:	if (!priv->ia32_debug_supported)
plugins/msr/fu-plugin-msr.c:	if (!priv->ia32_debug.fields.locked) {
plugins/msr/fu-plugin-msr.c:	if (!priv->k8_syscfg_supported) {
plugins/msr/fu-plugin-msr.c:	if (!priv->k8_syscfg.fields.sev_is_enabled) {
plugins/platform-integrity/fu-plugin-platform-integrity.c:	g_free(priv->sysfs_path);
plugins/platform-integrity/fu-plugin-platform-integrity.c:	if (priv->sysfs_path != NULL) {
plugins/platform-integrity/fu-plugin-platform-integrity.c:			    priv->sysfs_path);
plugins/platform-integrity/fu-plugin-platform-integrity.c:	priv->sysfs_path = g_strdup(fu_udev_device_get_sysfs_path(FU_UDEV_DEVICE(device)));
plugins/platform-integrity/fu-plugin-platform-integrity.c:	fn = g_build_filename(priv->sysfs_path, "bioswe", NULL);
plugins/platform-integrity/fu-plugin-platform-integrity.c:	fn = g_build_filename(priv->sysfs_path, "biosle", NULL);
plugins/platform-integrity/fu-plugin-platform-integrity.c:	fn = g_build_filename(priv->sysfs_path, "smm_bioswp", NULL);
plugins/platform-integrity/fu-plugin-platform-integrity.c:	if (priv->sysfs_path == NULL)
plugins/uefi-capsule/fu-uefi-backend.c:	priv->device_gtype = device_gtype;
plugins/uefi-capsule/fu-uefi-backend.c:	return priv->device_gtype;
plugins/uefi-capsule/fu-uefi-backend.c:	    g_object_new(priv->device_gtype,
plugins/uefi-capsule/fu-uefi-backend.c:	device = g_object_new(priv->device_gtype, "fw-class", guid, NULL);
plugins/uefi-capsule/fu-uefi-backend.c:	priv->device_gtype = FU_TYPE_UEFI_NVRAM_DEVICE;
plugins/uefi-capsule/fu-plugin-uefi-capsule.c:		    ((priv->bcr & BCR_WPD) > 0 && (priv->bcr & BCR_BLE) == 0))
plugins/uefi-capsule/fu-uefi-device.c:	g_set_object(&priv->esp, esp);
plugins/uefi-capsule/fu-uefi-device.c:	fu_common_string_append_kv(str, idt, "Kind", fu_uefi_device_kind_to_string(priv->kind));
plugins/uefi-capsule/fu-uefi-device.c:	fu_common_string_append_kv(str, idt, "FwClass", priv->fw_class);
plugins/uefi-capsule/fu-uefi-device.c:	fu_common_string_append_kx(str, idt, "CapsuleFlags", priv->capsule_flags);
plugins/uefi-capsule/fu-uefi-device.c:	fu_common_string_append_kx(str, idt, "FwVersion", priv->fw_version);
plugins/uefi-capsule/fu-uefi-device.c:	fu_common_string_append_kx(str, idt, "FwVersionLowest", priv->fw_version_lowest);
plugins/uefi-capsule/fu-uefi-device.c:				   fu_uefi_device_status_to_string(priv->last_attempt_status));
plugins/uefi-capsule/fu-uefi-device.c:	fu_common_string_append_kx(str, idt, "LastAttemptVersion", priv->last_attempt_version);
plugins/uefi-capsule/fu-uefi-device.c:	if (priv->esp != NULL) {
plugins/uefi-capsule/fu-uefi-device.c:		fu_common_string_append_kv(str, idt, "EspId", fu_volume_get_id(priv->esp));
plugins/uefi-capsule/fu-uefi-device.c:			    g_strdup(priv->missing_header ? "True" : "False"));
plugins/uefi-capsule/fu-uefi-device.c:	g_hash_table_insert(metadata, g_strdup("EspPath"), fu_volume_get_mount_point(priv->esp));
plugins/uefi-capsule/fu-uefi-device.c:			    g_strdup_printf("0x%x", priv->last_attempt_status));
plugins/uefi-capsule/fu-uefi-device.c:			    g_strdup_printf("0x%x", priv->last_attempt_version));
plugins/uefi-capsule/fu-uefi-device.c:	return priv->kind;
plugins/uefi-capsule/fu-uefi-device.c:	return priv->fw_version;
plugins/uefi-capsule/fu-uefi-device.c:	return priv->fw_version_lowest;
plugins/uefi-capsule/fu-uefi-device.c:	return priv->last_attempt_version;
plugins/uefi-capsule/fu-uefi-device.c:	return priv->fmp_hardware_instance;
plugins/uefi-capsule/fu-uefi-device.c:	return priv->last_attempt_status;
plugins/uefi-capsule/fu-uefi-device.c:	priv->last_attempt_status = status;
plugins/uefi-capsule/fu-uefi-device.c:	version_str = g_strdup_printf("%u", priv->last_attempt_version);
plugins/uefi-capsule/fu-uefi-device.c:	return priv->capsule_flags;
plugins/uefi-capsule/fu-uefi-device.c:	return priv->fw_class;
plugins/uefi-capsule/fu-uefi-device.c:			       priv->fw_class,
plugins/uefi-capsule/fu-uefi-device.c:			       priv->fmp_hardware_instance);
plugins/uefi-capsule/fu-uefi-device.c:	priv->missing_header = FALSE;
plugins/uefi-capsule/fu-uefi-device.c:	} else if (!priv->requires_header) {
plugins/uefi-capsule/fu-uefi-device.c:		priv->missing_header = TRUE;
plugins/uefi-capsule/fu-uefi-device.c:		header->flags = priv->capsule_flags;
plugins/uefi-capsule/fu-uefi-device.c:	    .capsule_flags = priv->capsule_flags,
plugins/uefi-capsule/fu-uefi-device.c:	    .hw_inst = priv->fmp_hardware_instance,
plugins/uefi-capsule/fu-uefi-device.c:	return fu_volume_check_free_space(priv->esp, sz_reqd, error);
plugins/uefi-capsule/fu-uefi-device.c:	g_autofree gchar *esp_path = fu_volume_get_mount_point(priv->esp);
plugins/uefi-capsule/fu-uefi-device.c:	priv->esp_locker = fu_volume_locker(priv->esp, error);
plugins/uefi-capsule/fu-uefi-device.c:	if (priv->esp_locker == NULL)
plugins/uefi-capsule/fu-uefi-device.c:	if (!fu_device_locker_close(priv->esp_locker, error))
plugins/uefi-capsule/fu-uefi-device.c:	g_clear_object(&priv->esp_locker);
plugins/uefi-capsule/fu-uefi-device.c:	if (priv->fw_class == NULL) {
plugins/uefi-capsule/fu-uefi-device.c:	if (!fwupd_guid_is_valid(priv->fw_class)) {
plugins/uefi-capsule/fu-uefi-device.c:			    priv->fw_class);
plugins/uefi-capsule/fu-uefi-device.c:	fu_device_add_guid(device, priv->fw_class);
plugins/uefi-capsule/fu-uefi-device.c:	version = fu_common_version_from_uint32(priv->fw_version, version_format);
plugins/uefi-capsule/fu-uefi-device.c:	fu_device_set_version_raw(device, priv->fw_version);
plugins/uefi-capsule/fu-uefi-device.c:	if (priv->fw_version_lowest != 0) {
plugins/uefi-capsule/fu-uefi-device.c:		    fu_common_version_from_uint32(priv->fw_version_lowest, version_format);
plugins/uefi-capsule/fu-uefi-device.c:		fu_device_set_version_lowest_raw(device, priv->fw_version_lowest);
plugins/uefi-capsule/fu-uefi-device.c:	if (priv->kind == FU_UEFI_DEVICE_KIND_DEVICE_FIRMWARE) {
plugins/uefi-capsule/fu-uefi-device.c:	if (priv->kind == FU_UEFI_DEVICE_KIND_SYSTEM_FIRMWARE) {
plugins/uefi-capsule/fu-uefi-device.c:	if (priv->kind == FU_UEFI_DEVICE_KIND_FMP ||
plugins/uefi-capsule/fu-uefi-device.c:	    priv->kind == FU_UEFI_DEVICE_KIND_DELL_TPM_FIRMWARE)
plugins/uefi-capsule/fu-uefi-device.c:		priv->requires_header = FALSE;
plugins/uefi-capsule/fu-uefi-device.c:		priv->requires_header = TRUE;
plugins/uefi-capsule/fu-uefi-device.c:	guid_strup = g_ascii_strup(priv->fw_class, -1);
plugins/uefi-capsule/fu-uefi-device.c:	fu_uefi_device_set_status(self, priv->last_attempt_status);
plugins/uefi-capsule/fu-uefi-device.c:	return fu_volume_get_mount_point(priv->esp);
plugins/uefi-capsule/fu-uefi-device.c:		priv->fw_class = g_value_dup_string(value);
plugins/uefi-capsule/fu-uefi-device.c:		priv->kind = g_value_get_uint(value);
plugins/uefi-capsule/fu-uefi-device.c:		priv->capsule_flags = g_value_get_uint(value);
plugins/uefi-capsule/fu-uefi-device.c:		priv->fw_version = g_value_get_uint(value);
plugins/uefi-capsule/fu-uefi-device.c:		priv->fw_version_lowest = g_value_get_uint(value);
plugins/uefi-capsule/fu-uefi-device.c:		priv->last_attempt_version = g_value_get_uint(value);
plugins/uefi-capsule/fu-uefi-device.c:		priv->fmp_hardware_instance = g_value_get_uint64(value);
plugins/uefi-capsule/fu-uefi-device.c:	g_free(priv->fw_class);
plugins/uefi-capsule/fu-uefi-device.c:	if (priv->esp != NULL)
plugins/uefi-capsule/fu-uefi-device.c:		g_object_unref(priv->esp);
plugins/uefi-capsule/fu-uefi-device.c:	if (priv->esp_locker != NULL)
plugins/uefi-capsule/fu-uefi-device.c:		g_object_unref(priv->esp_locker);
plugins/uefi-capsule/fu-uefi-tool.c:	if (priv->context != NULL)
plugins/uefi-capsule/fu-uefi-tool.c:		g_option_context_free(priv->context);
plugins/uefi-capsule/fu-uefi-tool.c:	priv->context = g_option_context_new(NULL);
plugins/uefi-capsule/fu-uefi-tool.c:	    priv->context,
plugins/uefi-capsule/fu-uefi-tool.c:	g_option_context_add_main_entries(priv->context, options, NULL);
plugins/uefi-capsule/fu-uefi-tool.c:	ret = g_option_context_parse(priv->context, &argc, &argv, &error);
plugins/uefi-capsule/fu-uefi-tool.c:		tmp = g_option_context_get_help(priv->context, TRUE, NULL);
plugins/pci-bcr/fu-plugin-pci-bcr.c:	priv->bcr_addr = 0xdc;
plugins/pci-bcr/fu-plugin-pci-bcr.c:	if ((priv->bcr & BCR_WPD) == 0 && (priv->bcr & BCR_BLE) > 0) {
plugins/pci-bcr/fu-plugin-pci-bcr.c:		if (tmp != G_MAXUINT && priv->bcr_addr != tmp) {
plugins/pci-bcr/fu-plugin-pci-bcr.c:			g_debug("overriding BCR addr from 0x%02x to 0x%02x", priv->bcr_addr, tmp);
plugins/pci-bcr/fu-plugin-pci-bcr.c:			priv->bcr_addr = tmp;
plugins/pci-bcr/fu-plugin-pci-bcr.c:		if (priv->has_device) {
plugins/pci-bcr/fu-plugin-pci-bcr.c:	if (!priv->has_device) {
plugins/pci-bcr/fu-plugin-pci-bcr.c:	if ((priv->bcr & BCR_WPD) == 1) {
plugins/pci-bcr/fu-plugin-pci-bcr.c:	if (!priv->has_device)
plugins/pci-bcr/fu-plugin-pci-bcr.c:	if ((priv->bcr & BCR_BLE) == 0) {
plugins/pci-bcr/fu-plugin-pci-bcr.c:	if (!priv->has_device)
plugins/pci-bcr/fu-plugin-pci-bcr.c:	if ((priv->bcr & BCR_SMM_BWP) == 0) {
plugins/pci-bcr/fu-plugin-pci-bcr.c:	if (priv->bcr_addr == 0x0) {
plugins/pci-bcr/fu-plugin-pci-bcr.c:	if (!fu_udev_device_pread(FU_UDEV_DEVICE(device), priv->bcr_addr, &priv->bcr, error)) {
plugins/pci-bcr/fu-plugin-pci-bcr.c:	priv->has_device = TRUE;
plugins/modem-manager/fu-plugin-modem-manager.c:	if (priv->inhibited == NULL)
plugins/modem-manager/fu-plugin-modem-manager.c:	dev = fu_plugin_cache_lookup(plugin, priv->inhibited->physical_id);
plugins/modem-manager/fu-plugin-modem-manager.c:	fu_plugin_cache_remove(plugin, priv->inhibited->physical_id);
plugins/modem-manager/fu-plugin-modem-manager.c:	if (priv->udev_timeout_id != 0) {
plugins/modem-manager/fu-plugin-modem-manager.c:		g_source_remove(priv->udev_timeout_id);
plugins/modem-manager/fu-plugin-modem-manager.c:		priv->udev_timeout_id = 0;
plugins/modem-manager/fu-plugin-modem-manager.c:	g_clear_object(&priv->udev_client);
plugins/modem-manager/fu-plugin-modem-manager.c:	info = g_steal_pointer(&priv->inhibited);
plugins/modem-manager/fu-plugin-modem-manager.c:	if ((priv->manager != NULL) && (info != NULL)) {
plugins/modem-manager/fu-plugin-modem-manager.c:		mm_manager_uninhibit_device_sync(priv->manager, info->inhibited_uid, NULL, NULL);
plugins/modem-manager/fu-plugin-modem-manager.c:	g_return_val_if_fail(priv->inhibited != NULL, G_SOURCE_REMOVE);
plugins/modem-manager/fu-plugin-modem-manager.c:	priv->udev_timeout_id = 0;
plugins/modem-manager/fu-plugin-modem-manager.c:	dev = fu_plugin_cache_lookup(plugin, priv->inhibited->physical_id);
plugins/modem-manager/fu-plugin-modem-manager.c:	g_return_if_fail(priv->inhibited != NULL);
plugins/modem-manager/fu-plugin-modem-manager.c:	if (priv->udev_timeout_id != 0)
plugins/modem-manager/fu-plugin-modem-manager.c:		g_source_remove(priv->udev_timeout_id);
plugins/modem-manager/fu-plugin-modem-manager.c:	priv->udev_timeout_id = g_timeout_add_seconds(FU_MM_UDEV_DEVICE_PORTS_TIMEOUT,
plugins/modem-manager/fu-plugin-modem-manager.c:	g_return_if_fail(priv->inhibited != NULL);
plugins/modem-manager/fu-plugin-modem-manager.c:	existing = fu_plugin_cache_lookup(plugin, priv->inhibited->physical_id);
plugins/modem-manager/fu-plugin-modem-manager.c:	dev = fu_mm_device_udev_new(priv->manager, priv->inhibited);
plugins/modem-manager/fu-plugin-modem-manager.c:	fu_plugin_cache_add(plugin, priv->inhibited->physical_id, dev);
plugins/modem-manager/fu-plugin-modem-manager.c:	if (action == NULL || subsystem == NULL || priv->inhibited == NULL || name == NULL)
plugins/modem-manager/fu-plugin-modem-manager.c:	if (g_strcmp0(device_sysfs_path, priv->inhibited->physical_id) != 0)
plugins/modem-manager/fu-plugin-modem-manager.c:	if (!mm_manager_inhibit_device_sync(priv->manager, info->inhibited_uid, NULL, error))
plugins/modem-manager/fu-plugin-modem-manager.c:	priv->inhibited = g_steal_pointer(&info);
plugins/modem-manager/fu-plugin-modem-manager.c:		priv->udev_client = g_udev_client_new(subsystems);
plugins/modem-manager/fu-plugin-modem-manager.c:		g_signal_connect(priv->udev_client,
plugins/modem-manager/fu-plugin-modem-manager.c:	dev = fu_mm_device_new(priv->manager, modem);
plugins/modem-manager/fu-plugin-modem-manager.c:	if (priv->manager_ready) {
plugins/modem-manager/fu-plugin-modem-manager.c:		g_signal_handlers_disconnect_by_func(priv->manager,
plugins/modem-manager/fu-plugin-modem-manager.c:		g_signal_handlers_disconnect_by_func(priv->manager,
plugins/modem-manager/fu-plugin-modem-manager.c:		priv->manager_ready = FALSE;
plugins/modem-manager/fu-plugin-modem-manager.c:	const gchar *version = mm_manager_get_version(priv->manager);
plugins/modem-manager/fu-plugin-modem-manager.c:	g_signal_connect(priv->manager,
plugins/modem-manager/fu-plugin-modem-manager.c:	g_signal_connect(priv->manager,
plugins/modem-manager/fu-plugin-modem-manager.c:	list = g_dbus_object_manager_get_objects(G_DBUS_OBJECT_MANAGER(priv->manager));
plugins/modem-manager/fu-plugin-modem-manager.c:	priv->manager_ready = TRUE;
plugins/modem-manager/fu-plugin-modem-manager.c:	    G_DBUS_OBJECT_MANAGER_CLIENT(priv->manager));
plugins/modem-manager/fu-plugin-modem-manager.c:	g_signal_connect_swapped(priv->manager,
plugins/modem-manager/fu-plugin-modem-manager.c:	priv->manager = mm_manager_new_sync(connection,
plugins/modem-manager/fu-plugin-modem-manager.c:	if (priv->manager == NULL)
plugins/modem-manager/fu-plugin-modem-manager.c:	if (priv->udev_timeout_id)
plugins/modem-manager/fu-plugin-modem-manager.c:		g_source_remove(priv->udev_timeout_id);
plugins/modem-manager/fu-plugin-modem-manager.c:	if (priv->udev_client)
plugins/modem-manager/fu-plugin-modem-manager.c:		g_object_unref(priv->udev_client);
plugins/modem-manager/fu-plugin-modem-manager.c:	if (priv->manager != NULL)
plugins/modem-manager/fu-plugin-modem-manager.c:		g_object_unref(priv->manager);
plugins/modem-manager/fu-plugin-modem-manager.c:	if (priv->inhibited == NULL) {
plugins/iommu/fu-plugin-iommu.c:	priv->has_iommu = TRUE;
plugins/dfu/fu-dfu-device.c:	fu_common_string_append_kv(str, idt, "State", fu_dfu_state_to_string(priv->state));
plugins/dfu/fu-dfu-device.c:	fu_common_string_append_kv(str, idt, "Status", fu_dfu_status_to_string(priv->status));
plugins/dfu/fu-dfu-device.c:	fu_common_string_append_kb(str, idt, "DoneUploadOrDownload", priv->done_upload_or_download);
plugins/dfu/fu-dfu-device.c:	fu_common_string_append_kb(str, idt, "ClaimedInterface", priv->claimed_interface);
plugins/dfu/fu-dfu-device.c:	if (priv->chip_id != NULL)
plugins/dfu/fu-dfu-device.c:		fu_common_string_append_kv(str, idt, "ChipId", priv->chip_id);
plugins/dfu/fu-dfu-device.c:	fu_common_string_append_kx(str, idt, "Version", priv->version);
plugins/dfu/fu-dfu-device.c:	fu_common_string_append_kx(str, idt, "ForceVersion", priv->force_version);
plugins/dfu/fu-dfu-device.c:	if (priv->force_transfer_size != 0x0) {
plugins/dfu/fu-dfu-device.c:					   priv->force_transfer_size);
plugins/dfu/fu-dfu-device.c:	fu_common_string_append_kx(str, idt, "RuntimePid", priv->runtime_pid);
plugins/dfu/fu-dfu-device.c:	fu_common_string_append_kx(str, idt, "RuntimeVid", priv->runtime_vid);
plugins/dfu/fu-dfu-device.c:	fu_common_string_append_kx(str, idt, "RuntimeRelease", priv->runtime_release);
plugins/dfu/fu-dfu-device.c:	fu_common_string_append_kx(str, idt, "TransferSize", priv->transfer_size);
plugins/dfu/fu-dfu-device.c:	fu_common_string_append_kx(str, idt, "IfaceNumber", priv->iface_number);
plugins/dfu/fu-dfu-device.c:	fu_common_string_append_kx(str, idt, "DnloadTimeout", priv->dnload_timeout);
plugins/dfu/fu-dfu-device.c:	fu_common_string_append_kx(str, idt, "TimeoutMs", priv->timeout_ms);
plugins/dfu/fu-dfu-device.c:	for (guint i = 0; i < priv->targets->len; i++) {
plugins/dfu/fu-dfu-device.c:		FuDfuTarget *target = g_ptr_array_index(priv->targets, i);
plugins/dfu/fu-dfu-device.c:	return priv->transfer_size;
plugins/dfu/fu-dfu-device.c:	return priv->version;
plugins/dfu/fu-dfu-device.c:	return priv->dnload_timeout;
plugins/dfu/fu-dfu-device.c:	priv->transfer_size = transfer_size;
plugins/dfu/fu-dfu-device.c:	priv->transfer_size = GUINT16_FROM_LE(desc.wTransferSize);
plugins/dfu/fu-dfu-device.c:	priv->version = GUINT16_FROM_LE(desc.bcdDFUVersion);
plugins/dfu/fu-dfu-device.c:	if (priv->version == FU_DFU_FIRMARE_VERSION_DFUSE &&
plugins/dfu/fu-dfu-device.c:		priv->transfer_size = 0x1000;
plugins/dfu/fu-dfu-device.c:	priv->attributes = desc.bmAttributes;
plugins/dfu/fu-dfu-device.c:	g_ptr_array_set_size(priv->targets, 0);
plugins/dfu/fu-dfu-device.c:			priv->attributes |=
plugins/dfu/fu-dfu-device.c:		if (priv->force_version > 0)
plugins/dfu/fu-dfu-device.c:			priv->version = priv->force_version;
plugins/dfu/fu-dfu-device.c:		if (priv->version == FU_DFU_FIRMARE_VERSION_DFU_1_0 ||
plugins/dfu/fu-dfu-device.c:		    priv->version == FU_DFU_FIRMARE_VERSION_DFU_1_1) {
plugins/dfu/fu-dfu-device.c:		} else if (priv->version == FU_DFU_FIRMARE_VERSION_ATMEL_AVR) {
plugins/dfu/fu-dfu-device.c:			priv->version = FU_DFU_FIRMARE_VERSION_ATMEL_AVR;
plugins/dfu/fu-dfu-device.c:		} else if (priv->version == FU_DFU_FIRMARE_VERSION_DFUSE) {
plugins/dfu/fu-dfu-device.c:		} else if (priv->version == 0x0101) {
plugins/dfu/fu-dfu-device.c:			priv->version = FU_DFU_FIRMARE_VERSION_DFU_1_1;
plugins/dfu/fu-dfu-device.c:			g_warning("DFU version 0x%04x invalid, v1.1 assumed", priv->version);
plugins/dfu/fu-dfu-device.c:			priv->version = FU_DFU_FIRMARE_VERSION_DFU_1_1;
plugins/dfu/fu-dfu-device.c:		if (priv->version == FU_DFU_FIRMARE_VERSION_DFUSE) {
plugins/dfu/fu-dfu-device.c:		if (priv->force_transfer_size != 0x0) {
plugins/dfu/fu-dfu-device.c:			priv->transfer_size = priv->force_transfer_size;
plugins/dfu/fu-dfu-device.c:			g_debug("forcing DFU transfer size 0x%04x bytes", priv->transfer_size);
plugins/dfu/fu-dfu-device.c:		} else if (priv->transfer_size == 0xffff) {
plugins/dfu/fu-dfu-device.c:			priv->transfer_size = 0x0400;
plugins/dfu/fu-dfu-device.c:		} else if (priv->transfer_size == 0x0) {
plugins/dfu/fu-dfu-device.c:			priv->transfer_size = 64;
plugins/dfu/fu-dfu-device.c:			g_debug("using DFU transfer size 0x%04x bytes", priv->transfer_size);
plugins/dfu/fu-dfu-device.c:		switch (priv->version) {
plugins/dfu/fu-dfu-device.c:		priv->iface_number = g_usb_interface_get_number(iface);
plugins/dfu/fu-dfu-device.c:		g_ptr_array_add(priv->targets, target);
plugins/dfu/fu-dfu-device.c:	if (priv->state == FU_DFU_STATE_APP_IDLE ||
plugins/dfu/fu-dfu-device.c:		priv->runtime_vid = g_usb_device_get_vid(usb_device);
plugins/dfu/fu-dfu-device.c:		priv->runtime_pid = g_usb_device_get_pid(usb_device);
plugins/dfu/fu-dfu-device.c:		priv->runtime_release = g_usb_device_get_release(usb_device);
plugins/dfu/fu-dfu-device.c:	if (priv->targets->len == 0 &&
plugins/dfu/fu-dfu-device.c:		priv->iface_number = 0xff;
plugins/dfu/fu-dfu-device.c:		priv->runtime_vid = g_usb_device_get_vid(usb_device);
plugins/dfu/fu-dfu-device.c:		priv->runtime_pid = g_usb_device_get_pid(usb_device);
plugins/dfu/fu-dfu-device.c:		priv->runtime_release = g_usb_device_get_release(usb_device);
plugins/dfu/fu-dfu-device.c:		priv->attributes = FU_DFU_DEVICE_ATTR_CAN_DOWNLOAD | FU_DFU_DEVICE_ATTR_CAN_UPLOAD;
plugins/dfu/fu-dfu-device.c:	if (priv->targets->len == 0) {
plugins/dfu/fu-dfu-device.c:		priv->attributes &= ~FU_DFU_DEVICE_ATTR_CAN_UPLOAD;
plugins/dfu/fu-dfu-device.c:	return (priv->attributes & FU_DFU_DEVICE_ATTR_CAN_UPLOAD) > 0;
plugins/dfu/fu-dfu-device.c:	return (priv->attributes & FU_DFU_DEVICE_ATTR_CAN_DOWNLOAD) > 0;
plugins/dfu/fu-dfu-device.c:	priv->timeout_ms = timeout_ms;
plugins/dfu/fu-dfu-device.c:	return priv->timeout_ms;
plugins/dfu/fu-dfu-device.c:	return priv->state;
plugins/dfu/fu-dfu-device.c:	return priv->status;
plugins/dfu/fu-dfu-device.c:	return (priv->attributes & attribute) > 0;
plugins/dfu/fu-dfu-device.c:	priv->attributes &= ~attribute;
plugins/dfu/fu-dfu-device.c:	return priv->targets;
plugins/dfu/fu-dfu-device.c:	for (guint i = 0; i < priv->targets->len; i++) {
plugins/dfu/fu-dfu-device.c:		FuDfuTarget *target = g_ptr_array_index(priv->targets, i);
plugins/dfu/fu-dfu-device.c:	for (guint i = 0; i < priv->targets->len; i++) {
plugins/dfu/fu-dfu-device.c:		FuDfuTarget *target = g_ptr_array_index(priv->targets, i);
plugins/dfu/fu-dfu-device.c:	return priv->runtime_vid;
plugins/dfu/fu-dfu-device.c:	return priv->runtime_pid;
plugins/dfu/fu-dfu-device.c:	return priv->runtime_release;
plugins/dfu/fu-dfu-device.c:	return priv->chip_id;
plugins/dfu/fu-dfu-device.c:	priv->chip_id = g_strdup(chip_id);
plugins/dfu/fu-dfu-device.c:	if (priv->state == state)
plugins/dfu/fu-dfu-device.c:	priv->state = state;
plugins/dfu/fu-dfu-device.c:	if (priv->status == status)
plugins/dfu/fu-dfu-device.c:	priv->status = status;
plugins/dfu/fu-dfu-device.c:	if (priv->claimed_interface)
plugins/dfu/fu-dfu-device.c:	if (priv->iface_number == 0xff)
plugins/dfu/fu-dfu-device.c:					  (gint)priv->iface_number,
plugins/dfu/fu-dfu-device.c:			    priv->iface_number,
plugins/dfu/fu-dfu-device.c:	priv->claimed_interface = TRUE;
plugins/dfu/fu-dfu-device.c:	switch (priv->state) {
plugins/dfu/fu-dfu-device.c:		g_debug("aborting transfer %s", fu_dfu_status_to_string(priv->status));
plugins/dfu/fu-dfu-device.c:		g_debug("clearing error %s", fu_dfu_status_to_string(priv->status));
plugins/dfu/fu-dfu-device.c:	if (priv->state == FU_DFU_STATE_APP_IDLE &&
plugins/dfu/fu-dfu-device.c:	if (priv->state == FU_DFU_STATE_DFU_MANIFEST &&
plugins/dfu/fu-dfu-device.c:	    !(priv->attributes & FU_DFU_DEVICE_ATTR_MANIFEST_TOL))
plugins/dfu/fu-dfu-device.c:					   priv->iface_number,
plugins/dfu/fu-dfu-device.c:					   priv->timeout_ms,
plugins/dfu/fu-dfu-device.c:		priv->dnload_timeout = DFU_DEVICE_DNLOAD_TIMEOUT_DEFAULT;
plugins/dfu/fu-dfu-device.c:		priv->dnload_timeout =
plugins/dfu/fu-dfu-device.c:		if (priv->dnload_timeout == 0 &&
plugins/dfu/fu-dfu-device.c:			priv->dnload_timeout = DFU_DEVICE_DNLOAD_TIMEOUT_DEFAULT;
plugins/dfu/fu-dfu-device.c:			g_debug("no dnload-timeout, using default of %ums", priv->dnload_timeout);
plugins/dfu/fu-dfu-device.c:		fu_dfu_status_to_string(priv->status),
plugins/dfu/fu-dfu-device.c:		fu_dfu_state_to_string(priv->state),
plugins/dfu/fu-dfu-device.c:		priv->dnload_timeout);
plugins/dfu/fu-dfu-device.c:					   priv->iface_number,
plugins/dfu/fu-dfu-device.c:					   priv->timeout_ms,
plugins/dfu/fu-dfu-device.c:	if (priv->state == FU_DFU_STATE_APP_IDLE &&
plugins/dfu/fu-dfu-device.c:	if ((priv->attributes & FU_DFU_DEVICE_ATTR_WILL_DETACH) == 0) {
plugins/dfu/fu-dfu-device.c:	priv->force_version = 0x0;
plugins/dfu/fu-dfu-device.c:	if (priv->state == FU_DFU_STATE_APP_IDLE &&
plugins/dfu/fu-dfu-device.c:					   priv->iface_number,
plugins/dfu/fu-dfu-device.c:					   priv->timeout_ms,
plugins/dfu/fu-dfu-device.c:	if (priv->state == FU_DFU_STATE_APP_IDLE &&
plugins/dfu/fu-dfu-device.c:					   priv->iface_number,
plugins/dfu/fu-dfu-device.c:					   priv->timeout_ms,
plugins/dfu/fu-dfu-device.c:	return priv->iface_number;
plugins/dfu/fu-dfu-device.c:	if (priv->state == FU_DFU_STATE_APP_IDLE &&
plugins/dfu/fu-dfu-device.c:		priv->status = FU_DFU_STATUS_OK;
plugins/dfu/fu-dfu-device.c:	if (priv->claimed_interface) {
plugins/dfu/fu-dfu-device.c:						    (gint)priv->iface_number,
plugins/dfu/fu-dfu-device.c:		priv->claimed_interface = FALSE;
plugins/dfu/fu-dfu-device.c:	if (!priv->done_upload_or_download &&
plugins/dfu/fu-dfu-device.c:	priv->force_version = 0x0;
plugins/dfu/fu-dfu-device.c:	if (priv->targets->len > 1) {
plugins/dfu/fu-dfu-device.c:	fu_dfu_firmware_set_vid(FU_DFU_FIRMWARE(firmware), priv->runtime_vid);
plugins/dfu/fu-dfu-device.c:	fu_dfu_firmware_set_pid(FU_DFU_FIRMWARE(firmware), priv->runtime_pid);
plugins/dfu/fu-dfu-device.c:	fu_progress_set_steps(progress, priv->targets->len);
plugins/dfu/fu-dfu-device.c:	for (guint i = 0; i < priv->targets->len; i++) {
plugins/dfu/fu-dfu-device.c:		target = g_ptr_array_index(priv->targets, i);
plugins/dfu/fu-dfu-device.c:	priv->done_upload_or_download = TRUE;
plugins/dfu/fu-dfu-device.c:	if (priv->runtime_vid != 0xffff) {
plugins/dfu/fu-dfu-device.c:						 priv->runtime_vid,
plugins/dfu/fu-dfu-device.c:				    priv->runtime_vid,
plugins/dfu/fu-dfu-device.c:	if (priv->runtime_pid != 0xffff) {
plugins/dfu/fu-dfu-device.c:						 priv->runtime_pid,
plugins/dfu/fu-dfu-device.c:				    priv->runtime_pid,
plugins/dfu/fu-dfu-device.c:	priv->done_upload_or_download = TRUE;
plugins/dfu/fu-dfu-device.c:	if (priv->state != FU_DFU_STATE_DFU_ERROR)
plugins/dfu/fu-dfu-device.c:	switch (priv->status) {
plugins/dfu/fu-dfu-device.c:			       fu_dfu_state_to_string(priv->state),
plugins/dfu/fu-dfu-device.c:			       fu_dfu_status_to_string(priv->status));
plugins/dfu/fu-dfu-device.c:								&priv->force_version,
plugins/dfu/fu-dfu-device.c:			priv->timeout_ms = tmp;
plugins/dfu/fu-dfu-device.c:			priv->force_transfer_size = tmp;
plugins/dfu/fu-dfu-device.c:	if (priv->attributes & FU_DFU_DEVICE_ATTR_CAN_DOWNLOAD)
plugins/dfu/fu-dfu-device.c:	if (priv->attributes & FU_DFU_DEVICE_ATTR_CAN_UPLOAD)
plugins/dfu/fu-dfu-device.c:	if (priv->attributes & FU_DFU_DEVICE_ATTR_MANIFEST_TOL)
plugins/dfu/fu-dfu-device.c:	if (priv->attributes & FU_DFU_DEVICE_ATTR_WILL_DETACH)
plugins/dfu/fu-dfu-device.c:	if (priv->attributes & FU_DFU_DEVICE_ATTR_CAN_ACCELERATE)
plugins/dfu/fu-dfu-device.c:	g_free(priv->chip_id);
plugins/dfu/fu-dfu-device.c:	g_ptr_array_unref(priv->targets);
plugins/dfu/fu-dfu-device.c:	priv->iface_number = 0xff;
plugins/dfu/fu-dfu-device.c:	priv->runtime_pid = 0xffff;
plugins/dfu/fu-dfu-device.c:	priv->runtime_vid = 0xffff;
plugins/dfu/fu-dfu-device.c:	priv->runtime_release = 0xffff;
plugins/dfu/fu-dfu-device.c:	priv->state = FU_DFU_STATE_APP_IDLE;
plugins/dfu/fu-dfu-device.c:	priv->status = FU_DFU_STATUS_OK;
plugins/dfu/fu-dfu-device.c:	priv->targets = g_ptr_array_new_with_free_func((GDestroyNotify)g_object_unref);
plugins/dfu/fu-dfu-device.c:	priv->timeout_ms = 1500;
plugins/dfu/fu-dfu-device.c:	priv->transfer_size = 64;
plugins/dfu/fu-dfu-target.c:	priv->sectors = g_ptr_array_new_with_free_func((GDestroyNotify)g_object_unref);
plugins/dfu/fu-dfu-target.c:	priv->old_percentage = G_MAXUINT;
plugins/dfu/fu-dfu-target.c:	priv->old_action = FWUPD_STATUS_IDLE;
plugins/dfu/fu-dfu-target.c:	g_free(priv->alt_name);
plugins/dfu/fu-dfu-target.c:	g_free(priv->alt_name_for_display);
plugins/dfu/fu-dfu-target.c:	g_ptr_array_unref(priv->sectors);
plugins/dfu/fu-dfu-target.c:	if (priv->device != NULL) {
plugins/dfu/fu-dfu-target.c:		g_object_remove_weak_pointer(G_OBJECT(priv->device), (gpointer *)&priv->device);
plugins/dfu/fu-dfu-target.c:	fu_common_string_append_kx(str, idt, "AltSetting", priv->alt_setting);
plugins/dfu/fu-dfu-target.c:	fu_common_string_append_kx(str, idt, "AltIdx", priv->alt_idx);
plugins/dfu/fu-dfu-target.c:	fu_common_string_append_kv(str, idt, "AltName", priv->alt_name);
plugins/dfu/fu-dfu-target.c:	if (priv->alt_name_for_display != NULL) {
plugins/dfu/fu-dfu-target.c:					   priv->alt_name_for_display);
plugins/dfu/fu-dfu-target.c:	for (guint i = 0; i < priv->sectors->len; i++) {
plugins/dfu/fu-dfu-target.c:		FuDfuSector *sector = g_ptr_array_index(priv->sectors, i);
plugins/dfu/fu-dfu-target.c:	for (guint i = 0; i < priv->sectors->len; i++) {
plugins/dfu/fu-dfu-target.c:		FuDfuSector *sector = g_ptr_array_index(priv->sectors, i);
plugins/dfu/fu-dfu-target.c:	if (fu_device_has_private_flag(FU_DEVICE(priv->device),
plugins/dfu/fu-dfu-target.c:		g_ptr_array_add(priv->sectors, sector);
plugins/dfu/fu-dfu-target.c:		g_ptr_array_add(priv->sectors, sector);
plugins/dfu/fu-dfu-target.c:	g_ptr_array_set_size(priv->sectors, 0);
plugins/dfu/fu-dfu-target.c:	g_free(priv->alt_name_for_display);
plugins/dfu/fu-dfu-target.c:	priv->alt_name_for_display = g_strdup(g_strchomp(zones[0] + 1));
plugins/dfu/fu-dfu-target.c:	return priv->sectors;
plugins/dfu/fu-dfu-target.c:	if (priv->sectors->len == 0)
plugins/dfu/fu-dfu-target.c:	return FU_DFU_SECTOR(g_ptr_array_index(priv->sectors, 0));
plugins/dfu/fu-dfu-target.c:	if (!fu_dfu_device_refresh(priv->device, error))
plugins/dfu/fu-dfu-target.c:	while (fu_dfu_device_get_state(priv->device) == FU_DFU_STATE_DFU_MANIFEST_SYNC ||
plugins/dfu/fu-dfu-target.c:	       fu_dfu_device_get_state(priv->device) == FU_DFU_STATE_DFU_MANIFEST) {
plugins/dfu/fu-dfu-target.c:		g_usleep((fu_dfu_device_get_download_timeout(priv->device) + 1000) * 1000);
plugins/dfu/fu-dfu-target.c:		if (!fu_dfu_device_refresh(priv->device, error))
plugins/dfu/fu-dfu-target.c:	if (fu_dfu_device_get_state(priv->device) == FU_DFU_STATE_DFU_ERROR) {
plugins/dfu/fu-dfu-target.c:		    fu_dfu_target_status_to_error_msg(fu_dfu_device_get_status(priv->device)));
plugins/dfu/fu-dfu-target.c:	if (!fu_dfu_device_refresh(priv->device, error))
plugins/dfu/fu-dfu-target.c:	while (fu_dfu_device_get_state(priv->device) == FU_DFU_STATE_DFU_DNBUSY) {
plugins/dfu/fu-dfu-target.c:		g_usleep(fu_dfu_device_get_download_timeout(priv->device) * 1000);
plugins/dfu/fu-dfu-target.c:		if (!fu_dfu_device_refresh(priv->device, error))
plugins/dfu/fu-dfu-target.c:	if (fu_dfu_device_get_state(priv->device) != FU_DFU_STATE_DFU_ERROR)
plugins/dfu/fu-dfu-target.c:	status = fu_dfu_device_get_status(priv->device);
plugins/dfu/fu-dfu-target.c:	if (fu_dfu_device_get_version(priv->device) == FU_DFU_FIRMARE_VERSION_DFUSE) {
plugins/dfu/fu-dfu-target.c:	GUsbDevice *usb_device = fu_usb_device_get_dev(FU_USB_DEVICE(priv->device));
plugins/dfu/fu-dfu-target.c:	if (!fu_dfu_device_ensure_interface(priv->device, error))
plugins/dfu/fu-dfu-target.c:	if (fu_device_has_flag(FU_DEVICE(priv->device), FWUPD_DEVICE_FLAG_IS_BOOTLOADER)) {
plugins/dfu/fu-dfu-target.c:						    (gint)fu_dfu_device_get_interface(priv->device),
plugins/dfu/fu-dfu-target.c:						    (gint)priv->alt_setting,
plugins/dfu/fu-dfu-target.c:				    priv->alt_setting,
plugins/dfu/fu-dfu-target.c:				    fu_dfu_device_get_interface(priv->device),
plugins/dfu/fu-dfu-target.c:	if (g_strcmp0(priv->alt_name, alt_name) == 0)
plugins/dfu/fu-dfu-target.c:	g_free(priv->alt_name);
plugins/dfu/fu-dfu-target.c:	priv->alt_name = g_strdup(alt_name);
plugins/dfu/fu-dfu-target.c:	g_set_object(&priv->device, device);
plugins/dfu/fu-dfu-target.c:	g_object_add_weak_pointer(G_OBJECT(priv->device), (gpointer *)&priv->device);
plugins/dfu/fu-dfu-target.c:	FuDevice *device = FU_DEVICE(priv->device);
plugins/dfu/fu-dfu-target.c:	if (priv->done_setup)
plugins/dfu/fu-dfu-target.c:	if (priv->alt_setting == 0x0 &&
plugins/dfu/fu-dfu-target.c:	    fu_device_has_private_flag(FU_DEVICE(priv->device), FU_DFU_DEVICE_FLAG_GD32)) {
plugins/dfu/fu-dfu-target.c:	if (priv->alt_idx != 0x00 && priv->alt_name == NULL) {
plugins/dfu/fu-dfu-target.c:		GUsbDevice *usb_device = fu_usb_device_get_dev(FU_USB_DEVICE(priv->device));
plugins/dfu/fu-dfu-target.c:		priv->alt_name =
plugins/dfu/fu-dfu-target.c:		    g_usb_device_get_string_descriptor(usb_device, priv->alt_idx, NULL);
plugins/dfu/fu-dfu-target.c:	if (priv->sectors->len == 0) {
plugins/dfu/fu-dfu-target.c:		if (!fu_dfu_target_parse_sectors(self, priv->alt_name, error))
plugins/dfu/fu-dfu-target.c:	if (priv->sectors->len == 0) {
plugins/dfu/fu-dfu-target.c:		g_debug("no UM0424 sector description in %s", priv->alt_name);
plugins/dfu/fu-dfu-target.c:		g_ptr_array_add(priv->sectors, sector);
plugins/dfu/fu-dfu-target.c:	priv->done_setup = TRUE;
plugins/dfu/fu-dfu-target.c:	GUsbDevice *usb_device = fu_usb_device_get_dev(FU_USB_DEVICE(priv->device));
plugins/dfu/fu-dfu-target.c:					   fu_dfu_device_get_interface(priv->device),
plugins/dfu/fu-dfu-target.c:					   fu_dfu_device_get_timeout(priv->device),
plugins/dfu/fu-dfu-target.c:		fu_dfu_device_error_fixup(priv->device, &error_local);
plugins/dfu/fu-dfu-target.c:	if (fu_dfu_device_get_version(priv->device) == FU_DFU_FIRMARE_VERSION_DFUSE) {
plugins/dfu/fu-dfu-target.c:		if (!fu_dfu_device_refresh(priv->device, error))
plugins/dfu/fu-dfu-target.c:	if (g_bytes_get_size(bytes) == 0 && fu_dfu_device_get_download_timeout(priv->device) > 0)
plugins/dfu/fu-dfu-target.c:	if (fu_dfu_device_get_download_timeout(priv->device) > 0) {
plugins/dfu/fu-dfu-target.c:		g_debug("sleeping for %ums…", fu_dfu_device_get_download_timeout(priv->device));
plugins/dfu/fu-dfu-target.c:		g_usleep(fu_dfu_device_get_download_timeout(priv->device) * 1000);
plugins/dfu/fu-dfu-target.c:	GUsbDevice *usb_device = fu_usb_device_get_dev(FU_USB_DEVICE(priv->device));
plugins/dfu/fu-dfu-target.c:		buf_sz = (gsize)fu_dfu_device_get_transfer_size(priv->device);
plugins/dfu/fu-dfu-target.c:					   fu_dfu_device_get_interface(priv->device),
plugins/dfu/fu-dfu-target.c:					   fu_dfu_device_get_timeout(priv->device),
plugins/dfu/fu-dfu-target.c:		fu_dfu_device_error_fixup(priv->device, &error_local);
plugins/dfu/fu-dfu-target.c:	priv->alt_idx = alt_idx;
plugins/dfu/fu-dfu-target.c:	priv->alt_setting = alt_setting;
plugins/dfu/fu-dfu-target.c:	return priv->device;
plugins/dfu/fu-dfu-target.c:	return fu_dfu_device_reset(priv->device, progress, error);
plugins/dfu/fu-dfu-target.c:	guint16 transfer_size = fu_dfu_device_get_transfer_size(priv->device);
plugins/dfu/fu-dfu-target.c:	for (guint i = 0; i < priv->sectors->len; i++) {
plugins/dfu/fu-dfu-target.c:		FuDfuSector *sector = g_ptr_array_index(priv->sectors, i);
plugins/dfu/fu-dfu-target.c:	if (!fu_dfu_device_can_upload(priv->device)) {
plugins/dfu/fu-dfu-target.c:	if (priv->sectors->len == 0) {
plugins/dfu/fu-dfu-target.c:	fu_firmware_set_id(image, priv->alt_name);
plugins/dfu/fu-dfu-target.c:	fu_firmware_set_idx(image, priv->alt_setting);
plugins/dfu/fu-dfu-target.c:	fu_progress_set_steps(progress, priv->sectors->len);
plugins/dfu/fu-dfu-target.c:	for (guint i = 0; i < priv->sectors->len; i++) {
plugins/dfu/fu-dfu-target.c:		sector = g_ptr_array_index(priv->sectors, i);
plugins/dfu/fu-dfu-target.c:	guint16 transfer_size = fu_dfu_device_get_transfer_size(priv->device);
plugins/dfu/fu-dfu-target.c:	    fu_dfu_device_has_attribute(priv->device, FU_DFU_DEVICE_ATTR_CAN_UPLOAD)) {
plugins/dfu/fu-dfu-target.c:	    fu_dfu_device_has_attribute(priv->device, FU_DFU_DEVICE_ATTR_CAN_UPLOAD)) {
plugins/dfu/fu-dfu-target.c:	if (!fu_dfu_device_can_download(priv->device)) {
plugins/dfu/fu-dfu-target.c:		    priv->sectors->len > 0) {
plugins/dfu/fu-dfu-target.c:			FuDfuSector *sector = g_ptr_array_index(priv->sectors, 0);
plugins/dfu/fu-dfu-target.c:	if (fu_device_has_private_flag(FU_DEVICE(priv->device), FU_DFU_DEVICE_FLAG_MANIFEST_POLL) &&
plugins/dfu/fu-dfu-target.c:	    fu_dfu_device_has_attribute(priv->device, FU_DFU_DEVICE_ATTR_MANIFEST_TOL))
plugins/dfu/fu-dfu-target.c:	return priv->alt_setting;
plugins/dfu/fu-dfu-target.c:	if (priv->alt_name == NULL) {
plugins/dfu/fu-dfu-target.c:	return priv->alt_name;
plugins/dfu/fu-dfu-target.c:	if (priv->alt_name_for_display == NULL) {
plugins/dfu/fu-dfu-target.c:	return priv->alt_name_for_display;
plugins/dfu/fu-dfu-sector.c:	priv->address = address;
plugins/dfu/fu-dfu-sector.c:	priv->size = size;
plugins/dfu/fu-dfu-sector.c:	priv->size_left = size_left;
plugins/dfu/fu-dfu-sector.c:	priv->zone = zone;
plugins/dfu/fu-dfu-sector.c:	priv->number = number;
plugins/dfu/fu-dfu-sector.c:	priv->cap = cap;
plugins/dfu/fu-dfu-sector.c:	return priv->address;
plugins/dfu/fu-dfu-sector.c:	return priv->size;
plugins/dfu/fu-dfu-sector.c:	return priv->size_left;
plugins/dfu/fu-dfu-sector.c:	return priv->zone;
plugins/dfu/fu-dfu-sector.c:	return priv->number;
plugins/dfu/fu-dfu-sector.c:	return (((guint32)priv->zone) << 16) | priv->number;
plugins/dfu/fu-dfu-sector.c:	return (priv->cap & cap) > 0;
plugins/dfu/fu-dfu-sector.c:	caps_str = fu_dfu_sector_cap_to_string(priv->cap);
plugins/dfu/fu-dfu-sector.c:			       priv->zone,
plugins/dfu/fu-dfu-sector.c:			       priv->number,
plugins/dfu/fu-dfu-sector.c:			       priv->address,
plugins/dfu/fu-dfu-sector.c:			       priv->size,
plugins/dfu/fu-dfu-sector.c:			       priv->cap,
plugins/dfu/fu-dfu-target-avr.c:	if (priv->device_id > 0x0)
plugins/dfu/fu-dfu-target-avr.c:	priv->device_id = GINT32_FROM_BE(device_id_be);
plugins/dfu/fu-dfu-target-avr.c:		chip_id_guid = g_strdup_printf("DFU_AVR\\CID_0x%08x", (guint)priv->device_id);
plugins/dfu/fu-dfu-target-avr.c:		chip_id_guid = g_strdup_printf("DFU_AVR\\CID_0x%06x", (guint)priv->device_id >> 8);
plugins/dfu/fu-dfu-target-avr.c:			    (guint)priv->device_id,
src/fu-util.c:	fu_progressbar_update(priv->progressbar,
src/fu-util.c:			      fwupd_client_get_status(priv->client),
src/fu-util.c:			      fwupd_client_get_percentage(priv->client));
src/fu-util.c:		fu_progressbar_set_title(priv->progressbar, tmp);
src/fu-util.c:		g_ptr_array_add(priv->post_requests, g_object_ref(request));
src/fu-util.c:		priv->completion_flags |= FWUPD_DEVICE_FLAG_NEEDS_SHUTDOWN;
src/fu-util.c:		priv->completion_flags |= FWUPD_DEVICE_FLAG_NEEDS_REBOOT;
src/fu-util.c:	if (priv->current_device == NULL ||
src/fu-util.c:	    g_strcmp0(fwupd_device_get_composite_id(priv->current_device),
src/fu-util.c:		g_set_object(&priv->current_device, device);
src/fu-util.c:	if (priv->current_operation == FU_UTIL_OPERATION_UPDATE) {
src/fu-util.c:		fu_progressbar_set_title(priv->progressbar, str);
src/fu-util.c:	} else if (priv->current_operation == FU_UTIL_OPERATION_DOWNGRADE) {
src/fu-util.c:		fu_progressbar_set_title(priv->progressbar, str);
src/fu-util.c:	} else if (priv->current_operation == FU_UTIL_OPERATION_INSTALL) {
src/fu-util.c:		fu_progressbar_set_title(priv->progressbar, str);
src/fu-util.c:	g_set_object(&priv->current_device, device);
src/fu-util.c:		if (priv->filter_include & flag) {
src/fu-util.c:		if (priv->filter_exclude & flag) {
src/fu-util.c:	if (priv->no_unreported_check) {
src/fu-util.c:	devices = fwupd_client_get_history(priv->client, NULL, &error_local);
src/fu-util.c:	remotes = fwupd_client_get_remotes(priv->client, NULL, error);
src/fu-util.c:	if (!priv->assume_yes && !all_automatic) {
src/fu-util.c:					if (!fwupd_client_modify_remote(priv->client,
src/fu-util.c:	if (!priv->assume_yes && !all_automatic) {
src/fu-util.c:				if (!fwupd_client_modify_remote(priv->client,
src/fu-util.c:	if (!priv->assume_yes) {
src/fu-util.c:		if (!priv->show_all && !fu_util_is_interesting_device(dev_tmp))
src/fu-util.c:	return g_strdup(fwupd_client_get_host_product(priv->client));
src/fu-util.c:		rels = fwupd_client_get_releases(priv->client,
src/fu-util.c:						 priv->cancellable,
src/fu-util.c:	devs = fwupd_client_get_devices(priv->client, NULL, error);
src/fu-util.c:	if (priv->as_json)
src/fu-util.c:	plugins = fwupd_client_get_plugins(priv->client, NULL, error);
src/fu-util.c:	if (priv->as_json)
src/fu-util.c:	blob = fwupd_client_download_bytes(priv->client,
src/fu-util.c:					   priv->download_flags,
src/fu-util.c:					   priv->cancellable,
src/fu-util.c:	for (guint i = 0; i < priv->post_requests->len; i++) {
src/fu-util.c:		FwupdRequest *request = g_ptr_array_index(priv->post_requests, i);
src/fu-util.c:		devices = fwupd_client_get_devices_by_guid(priv->client, guid, NULL, NULL);
src/fu-util.c:	priv->flags |= FWUPD_INSTALL_FLAG_ALLOW_OLDER;
src/fu-util.c:	priv->flags |= FWUPD_INSTALL_FLAG_ALLOW_REINSTALL;
src/fu-util.c:	if (!fwupd_client_install(priv->client,
src/fu-util.c:				  priv->flags,
src/fu-util.c:	g_signal_connect(priv->client,
src/fu-util.c:	blob = fwupd_client_download_bytes(priv->client,
src/fu-util.c:					   priv->download_flags,
src/fu-util.c:					   priv->cancellable,
src/fu-util.c:	priv->current_operation = FU_UTIL_OPERATION_INSTALL;
src/fu-util.c:	g_signal_connect(priv->client,
src/fu-util.c:	g_signal_connect(priv->client,
src/fu-util.c:	if (!fwupd_client_install(priv->client, id, filename, priv->flags, NULL, error))
src/fu-util.c:	if (priv->no_reboot_check) {
src/fu-util.c:	return fu_util_prompt_complete(priv->completion_flags, TRUE, error);
src/fu-util.c:	priv->show_all = TRUE;
src/fu-util.c:	array = fwupd_client_get_details(priv->client, values[0], NULL, error);
src/fu-util.c:	if (priv->as_json)
src/fu-util.c:	if (priv->sign) {
src/fu-util.c:		sig = fwupd_client_self_sign(priv->client,
src/fu-util.c:					     priv->cancellable,
src/fu-util.c:	remote = fwupd_client_get_remote_by_id(priv->client, remote_id, NULL, error);
src/fu-util.c:	if (!priv->assume_yes && !fwupd_remote_get_automatic_reports(remote)) {
src/fu-util.c:	if (!fu_util_send_report(priv->client,
src/fu-util.c:	devices = fwupd_client_get_history(priv->client, NULL, error);
src/fu-util.c:		if ((priv->flags & FWUPD_INSTALL_FLAG_FORCE) == 0) {
src/fu-util.c:		remote = fwupd_client_get_remote_by_id(priv->client, remote_id, NULL, error);
src/fu-util.c:			if (!fwupd_client_modify_device(priv->client,
src/fu-util.c:	devices = fwupd_client_get_history(priv->client, NULL, error);
src/fu-util.c:		rels = fwupd_client_get_releases(priv->client,
src/fu-util.c:		devices = fwupd_client_get_devices_by_guid(priv->client, id, NULL, error);
src/fu-util.c:	return fwupd_client_get_device_by_id(priv->client, id, NULL, error);
src/fu-util.c:	devices = fwupd_client_get_devices(priv->client, NULL, error);
src/fu-util.c:	return fwupd_client_clear_results(priv->client, fwupd_device_get_id(dev), NULL, error);
src/fu-util.c:	priv->filter_include |= FWUPD_DEVICE_FLAG_CAN_VERIFY;
src/fu-util.c:	if (!fwupd_client_verify_update(priv->client, fwupd_device_get_id(dev), NULL, error)) {
src/fu-util.c:	remote = fwupd_client_get_remote_by_id(priv->client, "lvfs", NULL, error);
src/fu-util.c:	if (!fwupd_client_modify_remote(priv->client,
src/fu-util.c:					priv->cancellable,
src/fu-util.c:	return fwupd_client_refresh_remote(priv->client, remote, priv->cancellable, error);
src/fu-util.c:	remotes = fwupd_client_get_remotes(priv->client, NULL, error);
src/fu-util.c:	if ((priv->flags & FWUPD_INSTALL_FLAG_FORCE) == 0) {
src/fu-util.c:	remotes = fwupd_client_get_remotes(priv->client, NULL, error);
src/fu-util.c:		if (!fwupd_client_refresh_remote(priv->client, remote, priv->cancellable, error))
src/fu-util.c:		if (priv->no_remote_check) {
src/fu-util.c:	devs = fwupd_client_get_devices(priv->client, NULL, error);
src/fu-util.c:	if (!fwupd_client_update_metadata(priv->client,
src/fu-util.c:	rel = fwupd_client_get_results(priv->client, fwupd_device_get_id(dev), NULL, error);
src/fu-util.c:	if (priv->as_json)
src/fu-util.c:	priv->filter_include |= FWUPD_DEVICE_FLAG_SUPPORTED;
src/fu-util.c:	rels = fwupd_client_get_releases(priv->client, fwupd_device_get_id(dev), NULL, error);
src/fu-util.c:	priv->filter_include |= FWUPD_DEVICE_FLAG_CAN_VERIFY;
src/fu-util.c:	if (!fwupd_client_verify(priv->client, fwupd_device_get_id(dev), NULL, error)) {
src/fu-util.c:	priv->filter_include |= FWUPD_DEVICE_FLAG_LOCKED;
src/fu-util.c:		priv->completion_flags |= FWUPD_DEVICE_FLAG_NEEDS_SHUTDOWN;
src/fu-util.c:		priv->completion_flags |= FWUPD_DEVICE_FLAG_NEEDS_REBOOT;
src/fu-util.c:	if (!fwupd_client_unlock(priv->client, fwupd_device_get_id(dev), NULL, error))
src/fu-util.c:	return fu_util_prompt_complete(priv->completion_flags, TRUE, error);
src/fu-util.c:	if (priv->no_metadata_check) {
src/fu-util.c:	if (!priv->assume_yes) {
src/fu-util.c:		rels = fwupd_client_get_upgrades(priv->client,
src/fu-util.c:		devices = fwupd_client_get_devices(priv->client, NULL, error);
src/fu-util.c:	if (priv->as_json)
src/fu-util.c:		rels = fwupd_client_get_upgrades(priv->client,
src/fu-util.c:	remotes = fwupd_client_get_remotes(priv->client, NULL, error);
src/fu-util.c:	if (priv->as_json)
src/fu-util.c:	devices = fwupd_client_get_devices(priv->client, NULL, error);
src/fu-util.c:		rels = fwupd_client_get_releases(priv->client,
src/fu-util.c:	if (!priv->no_safety_check && !priv->assume_yes) {
src/fu-util.c:	return fwupd_client_install_release2(priv->client,
src/fu-util.c:					     priv->flags,
src/fu-util.c:					     priv->download_flags,
src/fu-util.c:					     priv->cancellable,
src/fu-util.c:	remote = fwupd_client_get_remote_by_id(priv->client, remote_id, NULL, error);
src/fu-util.c:	devices = fwupd_client_get_devices(priv->client, NULL, error);
src/fu-util.c:	priv->current_operation = FU_UTIL_OPERATION_UPDATE;
src/fu-util.c:	g_signal_connect(priv->client,
src/fu-util.c:	g_signal_connect(priv->client,
src/fu-util.c:		rels = fwupd_client_get_upgrades(priv->client,
src/fu-util.c:	if (priv->no_reboot_check) {
src/fu-util.c:	return fu_util_prompt_complete(priv->completion_flags, TRUE, error);
src/fu-util.c:	priv->current_operation = FU_UTIL_OPERATION_UPDATE;
src/fu-util.c:	g_signal_connect(priv->client,
src/fu-util.c:	g_signal_connect(priv->client,
src/fu-util.c:	rels = fwupd_client_get_upgrades(priv->client, fwupd_device_get_id(dev), NULL, error);
src/fu-util.c:	if (priv->no_reboot_check) {
src/fu-util.c:	return fu_util_prompt_complete(priv->completion_flags, TRUE, error);
src/fu-util.c:	if (priv->flags & FWUPD_INSTALL_FLAG_ALLOW_OLDER) {
src/fu-util.c:	if (priv->flags & FWUPD_INSTALL_FLAG_ALLOW_REINSTALL) {
src/fu-util.c:	remote = fwupd_client_get_remote_by_id(priv->client, values[0], priv->cancellable, error);
src/fu-util.c:	if (!fwupd_client_modify_remote(priv->client,
src/fu-util.c:					priv->cancellable,
src/fu-util.c:	remote = fwupd_client_get_remote_by_id(priv->client, values[0], priv->cancellable, error);
src/fu-util.c:	if (!fwupd_client_modify_remote(priv->client,
src/fu-util.c:					priv->cancellable,
src/fu-util.c:	if (priv->no_remote_check || fwupd_remote_get_kind(remote) != FWUPD_REMOTE_KIND_DOWNLOAD) {
src/fu-util.c:	if (!priv->assume_yes) {
src/fu-util.c:	if (!fwupd_client_refresh_remote(priv->client, remote, priv->cancellable, error))
src/fu-util.c:	remote = fwupd_client_get_remote_by_id(priv->client, values[0], priv->cancellable, error);
src/fu-util.c:	if (!fwupd_client_modify_remote(priv->client,
src/fu-util.c:					priv->cancellable,
src/fu-util.c:	if (priv->flags & FWUPD_INSTALL_FLAG_ALLOW_REINSTALL) {
src/fu-util.c:	priv->filter_include |= FWUPD_DEVICE_FLAG_SUPPORTED;
src/fu-util.c:	rels = fwupd_client_get_downgrades(priv->client, fwupd_device_get_id(dev), NULL, error);
src/fu-util.c:	priv->current_operation = FU_UTIL_OPERATION_DOWNGRADE;
src/fu-util.c:	g_signal_connect(priv->client,
src/fu-util.c:	g_signal_connect(priv->client,
src/fu-util.c:	priv->flags |= FWUPD_INSTALL_FLAG_ALLOW_OLDER;
src/fu-util.c:	if (priv->no_reboot_check) {
src/fu-util.c:	return fu_util_prompt_complete(priv->completion_flags, TRUE, error);
src/fu-util.c:	priv->filter_include |= FWUPD_DEVICE_FLAG_SUPPORTED;
src/fu-util.c:	rels = fwupd_client_get_releases(priv->client, fwupd_device_get_id(dev), NULL, error);
src/fu-util.c:	priv->current_operation = FU_UTIL_OPERATION_INSTALL;
src/fu-util.c:	g_signal_connect(priv->client,
src/fu-util.c:	g_signal_connect(priv->client,
src/fu-util.c:	priv->flags |= FWUPD_INSTALL_FLAG_ALLOW_REINSTALL;
src/fu-util.c:	if (priv->no_reboot_check) {
src/fu-util.c:	return fu_util_prompt_complete(priv->completion_flags, TRUE, error);
src/fu-util.c:	priv->filter_include |= FWUPD_DEVICE_FLAG_HAS_MULTIPLE_BRANCHES;
src/fu-util.c:	priv->filter_include |= FWUPD_DEVICE_FLAG_UPDATABLE;
src/fu-util.c:	rels = fwupd_client_get_releases(priv->client, fwupd_device_get_id(dev), NULL, error);
src/fu-util.c:	if (!fu_util_switch_branch_warning(dev, rel, priv->assume_yes, error))
src/fu-util.c:	priv->current_operation = FU_UTIL_OPERATION_INSTALL;
src/fu-util.c:	g_signal_connect(priv->client,
src/fu-util.c:	g_signal_connect(priv->client,
src/fu-util.c:	priv->flags |= FWUPD_INSTALL_FLAG_ALLOW_REINSTALL;
src/fu-util.c:	priv->flags |= FWUPD_INSTALL_FLAG_ALLOW_BRANCH_SWITCH;
src/fu-util.c:	if (priv->no_reboot_check) {
src/fu-util.c:	return fu_util_prompt_complete(priv->completion_flags, TRUE, error);
src/fu-util.c:		devices = fwupd_client_get_devices(priv->client, NULL, error);
src/fu-util.c:		if (!fwupd_client_activate(priv->client, NULL, fwupd_device_get_id(device), error))
src/fu-util.c:	return fwupd_client_set_approved_firmware(priv->client,
src/fu-util.c:						  priv->cancellable,
src/fu-util.c:	checksums = fwupd_client_get_approved_firmware(priv->client, priv->cancellable, error);
src/fu-util.c:	if (priv->as_json)
src/fu-util.c:	if (!fwupd_client_modify_config(priv->client,
src/fu-util.c:					priv->cancellable,
src/fu-util.c:	if (!priv->assume_yes) {
src/fu-util.c:	remotes = fwupd_client_get_remotes(priv->client, NULL, error);
src/fu-util.c:	if (!priv->assume_yes && !fwupd_remote_get_automatic_security_reports(remote)) {
src/fu-util.c:				if (!fwupd_client_modify_remote(priv->client,
src/fu-util.c:	metadata = fwupd_client_get_report_metadata(priv->client, priv->cancellable, error);
src/fu-util.c:	json_builder_add_string_value(builder, fwupd_client_get_host_machine_id(priv->client));
src/fu-util.c:	json_builder_add_string_value(builder, fwupd_client_get_host_security_id(priv->client));
src/fu-util.c:	if (priv->sign) {
src/fu-util.c:		sig = fwupd_client_self_sign(priv->client,
src/fu-util.c:					     priv->cancellable,
src/fu-util.c:	if (!priv->assume_yes && !fwupd_remote_get_automatic_security_reports(remote)) {
src/fu-util.c:	upload_response = fwupd_client_upload_bytes(priv->client,
src/fu-util.c:						    priv->cancellable,
src/fu-util.c:			if (!fwupd_client_modify_remote(priv->client,
src/fu-util.c:	if ((priv->flags & FWUPD_INSTALL_FLAG_FORCE) == 0) {
src/fu-util.c:	attrs = fwupd_client_get_host_security_attrs(priv->client, priv->cancellable, error);
src/fu-util.c:	if (priv->as_json)
src/fu-util.c:		fwupd_client_get_host_security_id(priv->client));
src/fu-util.c:	if (priv->show_all) {
src/fu-util.c:	if (priv->no_unreported_check)
src/fu-util.c:	g_cancellable_cancel(priv->cancellable);
src/fu-util.c:	g_source_attach(g_steal_pointer(&source), priv->main_ctx);
src/fu-util.c:	if (priv->client != NULL)
src/fu-util.c:		g_object_unref(priv->client);
src/fu-util.c:	if (priv->current_device != NULL)
src/fu-util.c:		g_object_unref(priv->current_device);
src/fu-util.c:	g_ptr_array_unref(priv->post_requests);
src/fu-util.c:	g_main_context_unref(priv->main_ctx);
src/fu-util.c:	g_object_unref(priv->cancellable);
src/fu-util.c:	g_object_unref(priv->progressbar);
src/fu-util.c:	g_option_context_free(priv->context);
src/fu-util.c:	const gchar *daemon = fwupd_client_get_daemon_version(priv->client);
src/fu-util.c:	devices = fwupd_client_get_history(priv->client, NULL, error);
src/fu-util.c:	csums = fwupd_client_get_blocked_firmware(priv->client, priv->cancellable, error);
src/fu-util.c:	return fwupd_client_set_blocked_firmware(priv->client, csums_new, priv->cancellable, error);
src/fu-util.c:	csums = fwupd_client_get_blocked_firmware(priv->client, priv->cancellable, error);
src/fu-util.c:	return fwupd_client_set_blocked_firmware(priv->client, csums_new, priv->cancellable, error);
src/fu-util.c:	csums = fwupd_client_get_blocked_firmware(priv->client, priv->cancellable, error);
src/fu-util.c:	if (priv->as_json)
src/fu-util.c:	plugins = fwupd_client_get_plugins(priv->client, NULL, NULL);
src/fu-util.c:					 &priv->assume_yes,
src/fu-util.c:					 &priv->sign,
src/fu-util.c:					 &priv->no_unreported_check,
src/fu-util.c:					 &priv->no_metadata_check,
src/fu-util.c:					 &priv->no_remote_check,
src/fu-util.c:					 &priv->no_reboot_check,
src/fu-util.c:					 &priv->no_safety_check,
src/fu-util.c:					 &priv->show_all,
src/fu-util.c:					 &priv->show_all,
src/fu-util.c:					 &priv->disable_ssl_strict,
src/fu-util.c:					 &priv->as_json,
src/fu-util.c:		priv->as_json = TRUE;
src/fu-util.c:	priv->main_ctx = g_main_context_new();
src/fu-util.c:	priv->progressbar = fu_progressbar_new();
src/fu-util.c:	priv->post_requests = g_ptr_array_new_with_free_func((GDestroyNotify)g_object_unref);
src/fu-util.c:	fu_progressbar_set_main_context(priv->progressbar, priv->main_ctx);
src/fu-util.c:	priv->cancellable = g_cancellable_new();
src/fu-util.c:	priv->context = g_option_context_new(NULL);
src/fu-util.c:	g_option_context_set_summary(priv->context, cmd_descriptions);
src/fu-util.c:	    priv->context,
src/fu-util.c:	g_option_context_add_main_entries(priv->context, options, NULL);
src/fu-util.c:	ret = g_option_context_parse(priv->context, &argc, &argv, &error);
src/fu-util.c:	if (priv->disable_ssl_strict) {
src/fu-util.c:		priv->no_unreported_check = TRUE;
src/fu-util.c:		priv->no_metadata_check = TRUE;
src/fu-util.c:		priv->no_reboot_check = TRUE;
src/fu-util.c:		priv->no_safety_check = TRUE;
src/fu-util.c:		priv->no_remote_check = TRUE;
src/fu-util.c:		fu_progressbar_set_interactive(priv->progressbar, FALSE);
src/fu-util.c:						&priv->filter_include,
src/fu-util.c:						&priv->filter_exclude,
src/fu-util.c:		priv->flags |= FWUPD_INSTALL_FLAG_OFFLINE;
src/fu-util.c:		priv->flags |= FWUPD_INSTALL_FLAG_ALLOW_REINSTALL;
src/fu-util.c:		priv->flags |= FWUPD_INSTALL_FLAG_ALLOW_OLDER;
src/fu-util.c:		priv->flags |= FWUPD_INSTALL_FLAG_ALLOW_BRANCH_SWITCH;
src/fu-util.c:		priv->flags |= FWUPD_INSTALL_FLAG_FORCE;
src/fu-util.c:		priv->flags |= FWUPD_INSTALL_FLAG_NO_HISTORY;
src/fu-util.c:		priv->download_flags |= FWUPD_CLIENT_DOWNLOAD_FLAG_ONLY_IPFS;
src/fu-util.c:	priv->client = fwupd_client_new();
src/fu-util.c:	fwupd_client_set_main_context(priv->client, priv->main_ctx);
src/fu-util.c:	g_signal_connect(priv->client,
src/fu-util.c:	g_signal_connect(priv->client,
src/fu-util.c:		if (!fwupd_client_connect(priv->client, priv->cancellable, &error)) {
src/fu-util.c:		g_print("daemon version:\t%s\n", fwupd_client_get_daemon_version(priv->client));
src/fu-util.c:	if (!fwupd_client_connect(priv->client, priv->cancellable, &error)) {
src/fu-util.c:	if (fwupd_client_get_tainted(priv->client)) {
src/fu-util.c:	fwupd_client_set_user_agent_for_package(priv->client, "fwupdmgr", PACKAGE_VERSION);
src/fu-util.c:	if ((priv->flags & FWUPD_INSTALL_FLAG_FORCE) == 0 &&
src/fu-util.c:	if ((priv->flags & FWUPD_INSTALL_FLAG_FORCE) == 0 &&
src/fu-util.c:	    !fwupd_client_get_daemon_interactive(priv->client) &&
src/fu-util.c:			priv->client,
src/fu-util.c:			priv->cancellable,
src/fu-tool.c:	if (!priv->enable_json_state)
src/fu-tool.c:	devices = fu_engine_get_devices(priv->engine, error);
src/fu-tool.c:	plugins = fu_engine_get_plugins(priv->engine);
src/fu-tool.c:	priv->lock_fd = g_open(lockfn, O_RDWR | O_CREAT, S_IRWXU);
src/fu-tool.c:	if (priv->lock_fd < 0) {
src/fu-tool.c:	if (fcntl(priv->lock_fd, F_OFD_SETLK, &lockp) < 0) {
src/fu-tool.c:	if (fcntl(priv->lock_fd, F_SETLK, &lockp) < 0) {
src/fu-tool.c:	if (!fu_engine_load(priv->engine, flags, error))
src/fu-tool.c:	if (fu_engine_get_tainted(priv->engine)) {
src/fu-tool.c:	g_main_loop_quit(priv->loop);
src/fu-tool.c:	g_cancellable_cancel(priv->cancellable);
src/fu-tool.c:	g_source_attach(g_steal_pointer(&source), priv->main_ctx);
src/fu-tool.c:	if (priv->current_device != NULL)
src/fu-tool.c:		g_object_unref(priv->current_device);
src/fu-tool.c:	if (priv->engine != NULL)
src/fu-tool.c:		g_object_unref(priv->engine);
src/fu-tool.c:	if (priv->request != NULL)
src/fu-tool.c:		g_object_unref(priv->request);
src/fu-tool.c:	if (priv->main_ctx != NULL)
src/fu-tool.c:		g_main_context_unref(priv->main_ctx);
src/fu-tool.c:	if (priv->loop != NULL)
src/fu-tool.c:		g_main_loop_unref(priv->loop);
src/fu-tool.c:	if (priv->cancellable != NULL)
src/fu-tool.c:		g_object_unref(priv->cancellable);
src/fu-tool.c:	if (priv->progressbar != NULL)
src/fu-tool.c:		g_object_unref(priv->progressbar);
src/fu-tool.c:	if (priv->progress != NULL)
src/fu-tool.c:		g_object_unref(priv->progress);
src/fu-tool.c:	if (priv->context != NULL)
src/fu-tool.c:		g_option_context_free(priv->context);
src/fu-tool.c:	if (priv->lock_fd != 0)
src/fu-tool.c:		g_close(priv->lock_fd, NULL);
src/fu-tool.c:	g_free(priv->current_message);
src/fu-tool.c:	fu_progressbar_update(priv->progressbar, status, 0);
src/fu-tool.c:	fu_progressbar_update(priv->progressbar, FWUPD_STATUS_UNKNOWN, percentage);
src/fu-tool.c:	fu_progressbar_update(priv->progressbar, FWUPD_STATUS_UNKNOWN, percentage);
src/fu-tool.c:	fu_progressbar_update(priv->progressbar, status, 0);
src/fu-tool.c:	g_main_loop_run(priv->loop);
src/fu-tool.c:	plugins = fu_engine_get_plugins(priv->engine);
src/fu-tool.c:	if (priv->filter_include != FWUPD_DEVICE_FLAG_NONE) {
src/fu-tool.c:		if (!fwupd_device_has_flag(dev, priv->filter_include))
src/fu-tool.c:	if (priv->filter_exclude != FWUPD_DEVICE_FLAG_NONE) {
src/fu-tool.c:		if (fwupd_device_has_flag(dev, priv->filter_exclude))
src/fu-tool.c:	return g_strdup(fu_engine_get_host_product(priv->engine));
src/fu-tool.c:		devices = fu_engine_get_devices(priv->engine, error);
src/fu-tool.c:		devices = fu_engine_get_devices_by_guid(priv->engine, id, error);
src/fu-tool.c:	return fu_engine_get_device(priv->engine, id, error);
src/fu-tool.c:		devices = fu_engine_get_devices(priv->engine, error);
src/fu-tool.c:		rels = fu_engine_get_upgrades(priv->engine,
src/fu-tool.c:					      priv->request,
src/fu-tool.c:	priv->show_all = TRUE;
src/fu-tool.c:	array = fu_engine_get_details(priv->engine, priv->request, fd, error);
src/fu-tool.c:		if (!priv->show_all && !fu_util_is_interesting_device(FWUPD_DEVICE(dev_tmp)))
src/fu-tool.c:	devs = fu_engine_get_devices(priv->engine, error);
src/fu-tool.c:		priv->completion_flags |= FWUPD_DEVICE_FLAG_NEEDS_SHUTDOWN;
src/fu-tool.c:		priv->completion_flags |= FWUPD_DEVICE_FLAG_NEEDS_REBOOT;
src/fu-tool.c:	if (priv->current_device == NULL ||
src/fu-tool.c:	    g_strcmp0(fwupd_device_get_composite_id(priv->current_device),
src/fu-tool.c:		g_set_object(&priv->current_device, device);
src/fu-tool.c:	if (priv->current_operation == FU_UTIL_OPERATION_UPDATE) {
src/fu-tool.c:		fu_progressbar_set_title(priv->progressbar, str);
src/fu-tool.c:	} else if (priv->current_operation == FU_UTIL_OPERATION_INSTALL) {
src/fu-tool.c:		fu_progressbar_set_title(priv->progressbar, str);
src/fu-tool.c:	} else if (priv->current_operation == FU_UTIL_OPERATION_READ) {
src/fu-tool.c:		fu_progressbar_set_title(priv->progressbar, str);
src/fu-tool.c:	g_set_object(&priv->current_device, device);
src/fu-tool.c:	if (priv->current_message == NULL) {
src/fu-tool.c:		const gchar *tmp = fwupd_device_get_update_message(priv->current_device);
src/fu-tool.c:			priv->current_message = g_strdup(tmp);
src/fu-tool.c:	if (priv->current_message == NULL)
src/fu-tool.c:	g_print("%s\n", priv->current_message);
src/fu-tool.c:	g_clear_pointer(&priv->current_message, g_free);
src/fu-tool.c:	priv->current_operation = FU_UTIL_OPERATION_INSTALL;
src/fu-tool.c:	g_signal_connect(priv->engine,
src/fu-tool.c:	if (priv->prepare_blob) {
src/fu-tool.c:		if (!fu_engine_composite_prepare(priv->engine, devices, error)) {
src/fu-tool.c:	priv->flags |= FWUPD_INSTALL_FLAG_NO_HISTORY;
src/fu-tool.c:	if (!fu_engine_install_blob(priv->engine,
src/fu-tool.c:				    priv->progress,
src/fu-tool.c:				    priv->flags,
src/fu-tool.c:				    fu_engine_request_get_feature_flags(priv->request),
src/fu-tool.c:	if (priv->cleanup_blob) {
src/fu-tool.c:			if (!fu_engine_composite_cleanup(priv->engine, devices_new, error)) {
src/fu-tool.c:	return fu_util_prompt_complete(priv->completion_flags, TRUE, error);
src/fu-tool.c:	if ((priv->flags & FWUPD_INSTALL_FLAG_FORCE) == 0 &&
src/fu-tool.c:	priv->current_operation = FU_UTIL_OPERATION_READ;
src/fu-tool.c:	g_signal_connect(priv->engine,
src/fu-tool.c:	blob_fw = fu_engine_firmware_dump(priv->engine, device, priv->progress, priv->flags, error);
src/fu-tool.c:		devices_possible = fu_engine_get_devices(priv->engine, error);
src/fu-tool.c:	silo = fu_engine_get_silo_from_blob(priv->engine, blob_cab, error);
src/fu-tool.c:			if (!fu_engine_check_requirements(priv->engine,
src/fu-tool.c:							  priv->request,
src/fu-tool.c:							  priv->flags | FWUPD_INSTALL_FLAG_FORCE,
src/fu-tool.c:			fu_engine_md_refresh_device_from_component(priv->engine, device, component);
src/fu-tool.c:			if (!fu_engine_check_requirements(priv->engine,
src/fu-tool.c:							  priv->request,
src/fu-tool.c:							  priv->flags,
src/fu-tool.c:	priv->current_operation = FU_UTIL_OPERATION_INSTALL;
src/fu-tool.c:	g_signal_connect(priv->engine,
src/fu-tool.c:	if (!fu_engine_install_tasks(priv->engine,
src/fu-tool.c:				     priv->request,
src/fu-tool.c:				     priv->flags,
src/fu-tool.c:	if (priv->no_reboot_check) {
src/fu-tool.c:	return fu_util_prompt_complete(priv->completion_flags, TRUE, error);
src/fu-tool.c:	remote = fu_engine_get_remote_by_id(priv->engine, remote_id, error);
src/fu-tool.c:	devices = fu_engine_get_devices(priv->engine, error);
src/fu-tool.c:		rels = fu_engine_get_upgrades(priv->engine, priv->request, device_id, &error_local);
src/fu-tool.c:		if (!priv->no_safety_check) {
src/fu-tool.c:	rels = fu_engine_get_upgrades(priv->engine, priv->request, fu_device_get_id(dev), error);
src/fu-tool.c:	if (priv->flags & FWUPD_INSTALL_FLAG_ALLOW_OLDER) {
src/fu-tool.c:	if (priv->flags & FWUPD_INSTALL_FLAG_ALLOW_REINSTALL) {
src/fu-tool.c:	priv->current_operation = FU_UTIL_OPERATION_UPDATE;
src/fu-tool.c:	g_signal_connect(priv->engine,
src/fu-tool.c:	if (priv->no_reboot_check) {
src/fu-tool.c:	return fu_util_prompt_complete(priv->completion_flags, TRUE, error);
src/fu-tool.c:	rels = fu_engine_get_releases_for_device(priv->engine, priv->request, dev, error);
src/fu-tool.c:	priv->current_operation = FU_UTIL_OPERATION_INSTALL;
src/fu-tool.c:	g_signal_connect(priv->engine,
src/fu-tool.c:	priv->flags |= FWUPD_INSTALL_FLAG_ALLOW_REINSTALL;
src/fu-tool.c:	if (priv->no_reboot_check) {
src/fu-tool.c:	return fu_util_prompt_complete(priv->completion_flags, TRUE, error);
src/fu-tool.c:	return fu_device_detach_full(device, priv->progress, error);
src/fu-tool.c:	return fu_device_attach_full(device, priv->progress, error);
src/fu-tool.c:			fu_engine_add_plugin_filter(priv->engine, fu_device_get_plugin(dev));
src/fu-tool.c:		devices = fu_engine_get_devices(priv->engine, error);
src/fu-tool.c:		if (!fu_engine_activate(priv->engine, fu_device_get_id(device), error))
src/fu-tool.c:	sig = fu_engine_self_sign(priv->engine,
src/fu-tool.c:	fwupd_client_set_main_context(client, priv->main_ctx);
src/fu-tool.c:	if (!fwupd_client_connect(client, priv->cancellable, error))
src/fu-tool.c:	g_signal_connect(priv->cancellable, "cancelled", G_CALLBACK(fu_util_cancelled_cb), priv);
src/fu-tool.c:	g_main_loop_run(priv->loop);
src/fu-tool.c:	if (!fu_engine_load(priv->engine, FU_ENGINE_LOAD_FLAG_READONLY, error))
src/fu-tool.c:	firmware_types = fu_context_get_firmware_gtype_ids(fu_engine_get_context(priv->engine));
src/fu-tool.c:	firmware_types = fu_context_get_firmware_gtype_ids(fu_engine_get_context(priv->engine));
src/fu-tool.c:	if (!fu_engine_load(priv->engine, FU_ENGINE_LOAD_FLAG_READONLY, error))
src/fu-tool.c:	    fu_context_get_firmware_gtype_by_id(fu_engine_get_context(priv->engine), firmware_type);
src/fu-tool.c:	if (!fu_firmware_parse(firmware, blob, priv->flags, error))
src/fu-tool.c:	if (!fu_engine_load(priv->engine, FU_ENGINE_LOAD_FLAG_READONLY, error))
src/fu-tool.c:	    fu_context_get_firmware_gtype_by_id(fu_engine_get_context(priv->engine), firmware_type);
src/fu-tool.c:	if (!fu_firmware_parse(firmware, blob, priv->flags, error))
src/fu-tool.c:	if (priv->show_all)
src/fu-tool.c:	if (!fu_engine_load(priv->engine, FU_ENGINE_LOAD_FLAG_READONLY, error))
src/fu-tool.c:	    fu_context_get_firmware_gtype_by_id(fu_engine_get_context(priv->engine), firmware_type);
src/fu-tool.c:	if (!fu_firmware_parse(firmware, blob, priv->flags, error))
src/fu-tool.c:	if (!fu_engine_load(priv->engine, FU_ENGINE_LOAD_FLAG_READONLY, error))
src/fu-tool.c:		    fu_context_get_firmware_gtype_by_id(fu_engine_get_context(priv->engine), tmp);
src/fu-tool.c:	if (!fu_firmware_parse(firmware_dst, blob_dst, priv->flags, error))
src/fu-tool.c:	FuContext *ctx = fu_engine_get_context(priv->engine);
src/fu-tool.c:	if (!fu_engine_load(priv->engine, FU_ENGINE_LOAD_FLAG_READONLY, error))
src/fu-tool.c:	gtype_src = fu_context_get_firmware_gtype_by_id(fu_engine_get_context(priv->engine),
src/fu-tool.c:	if (!fu_firmware_parse(firmware_src, blob_src, priv->flags, error))
src/fu-tool.c:	if (!fu_engine_verify_update(priv->engine, fu_device_get_id(dev), error))
src/fu-tool.c:	devices = fu_engine_get_history(priv->engine, error);
src/fu-tool.c:		rels = fu_engine_get_releases(priv->engine,
src/fu-tool.c:					      priv->request,
src/fu-tool.c:	return fu_engine_update_metadata_bytes(priv->engine,
src/fu-tool.c:	remotes = fu_engine_get_remotes(priv->engine, error);
src/fu-tool.c:	remotes = fu_engine_get_remotes(priv->engine, error);
src/fu-tool.c:	if ((priv->flags & FWUPD_INSTALL_FLAG_FORCE) == 0) {
src/fu-tool.c:		fu_engine_get_host_security_id(priv->engine));
src/fu-tool.c:	if (priv->show_all) {
src/fu-tool.c:	attrs = fu_engine_get_host_security_attrs(priv->engine);
src/fu-tool.c:	if (priv->as_json) {
src/fu-tool.c:	priv->filter_include |= FWUPD_DEVICE_FLAG_HAS_MULTIPLE_BRANCHES;
src/fu-tool.c:	priv->filter_include |= FWUPD_DEVICE_FLAG_UPDATABLE;
src/fu-tool.c:	rels = fu_engine_get_releases(priv->engine, priv->request, fu_device_get_id(dev), error);
src/fu-tool.c:	priv->current_operation = FU_UTIL_OPERATION_INSTALL;
src/fu-tool.c:	g_signal_connect(priv->engine,
src/fu-tool.c:	priv->flags |= FWUPD_INSTALL_FLAG_ALLOW_REINSTALL;
src/fu-tool.c:	priv->flags |= FWUPD_INSTALL_FLAG_ALLOW_BRANCH_SWITCH;
src/fu-tool.c:	if (priv->no_reboot_check) {
src/fu-tool.c:	return fu_util_prompt_complete(priv->completion_flags, TRUE, error);
src/fu-tool.c:	     &priv->no_reboot_check,
src/fu-tool.c:	     &priv->no_safety_check,
src/fu-tool.c:	     &priv->show_all,
src/fu-tool.c:	     &priv->show_all,
src/fu-tool.c:	     &priv->prepare_blob,
src/fu-tool.c:	     &priv->cleanup_blob,
src/fu-tool.c:	     &priv->enable_json_state,
src/fu-tool.c:	     &priv->disable_ssl_strict,
src/fu-tool.c:	     &priv->as_json,
src/fu-tool.c:	priv->main_ctx = g_main_context_new();
src/fu-tool.c:	priv->loop = g_main_loop_new(priv->main_ctx, FALSE);
src/fu-tool.c:	priv->progressbar = fu_progressbar_new();
src/fu-tool.c:	fu_progressbar_set_main_context(priv->progressbar, priv->main_ctx);
src/fu-tool.c:	priv->request = fu_engine_request_new();
src/fu-tool.c:	priv->progress = fu_progress_new(G_STRLOC);
src/fu-tool.c:	fu_progress_set_profile(priv->progress, g_getenv("FWUPD_VERBOSE") != NULL);
src/fu-tool.c:	g_signal_connect(priv->progress,
src/fu-tool.c:	g_signal_connect(priv->progress,
src/fu-tool.c:	priv->cancellable = g_cancellable_new();
src/fu-tool.c:	g_signal_connect(priv->cancellable, "cancelled", G_CALLBACK(fu_util_cancelled_cb), priv);
src/fu-tool.c:		priv->no_reboot_check = TRUE;
src/fu-tool.c:		priv->no_safety_check = TRUE;
src/fu-tool.c:		fu_progressbar_set_interactive(priv->progressbar, FALSE);
src/fu-tool.c:		fu_engine_request_set_feature_flags(priv->request,
src/fu-tool.c:	priv->context = g_option_context_new(NULL);
src/fu-tool.c:	g_option_context_set_summary(priv->context, cmd_descriptions);
src/fu-tool.c:	    priv->context,
src/fu-tool.c:	g_option_context_add_main_entries(priv->context, options, NULL);
src/fu-tool.c:	g_option_context_add_group(priv->context, fu_debug_get_option_group());
src/fu-tool.c:	ret = g_option_context_parse(priv->context, &argc, &argv, &error);
src/fu-tool.c:	if (priv->disable_ssl_strict) {
src/fu-tool.c:						&priv->filter_include,
src/fu-tool.c:						&priv->filter_exclude,
src/fu-tool.c:		priv->flags |= FWUPD_INSTALL_FLAG_ALLOW_REINSTALL;
src/fu-tool.c:		priv->flags |= FWUPD_INSTALL_FLAG_ALLOW_OLDER;
src/fu-tool.c:		priv->flags |= FWUPD_INSTALL_FLAG_ALLOW_BRANCH_SWITCH;
src/fu-tool.c:		priv->flags |= FWUPD_INSTALL_FLAG_FORCE;
src/fu-tool.c:		priv->flags |= FWUPD_INSTALL_FLAG_IGNORE_CHECKSUM;
src/fu-tool.c:		priv->flags |= FWUPD_INSTALL_FLAG_IGNORE_VID_PID;
src/fu-tool.c:	priv->engine = fu_engine_new(FU_APP_FLAGS_NO_IDLE_SOURCES);
src/fu-tool.c:	g_signal_connect(priv->engine,
src/fu-tool.c:	g_signal_connect(priv->engine,
src/fu-tool.c:	g_signal_connect(priv->engine,
src/fu-tool.c:	g_signal_connect(priv->engine,
src/fu-tool.c:		fu_engine_add_plugin_filter(priv->engine, plugin_glob[i]);
src/fu-main.c:	if (!priv->update_in_progress) {
src/fu-main.c:		g_main_loop_quit(priv->loop);
src/fu-main.c:	priv->pending_sigterm = TRUE;
src/fu-main.c:	if (priv->connection == NULL)
src/fu-main.c:	g_dbus_connection_emit_signal(priv->connection,
src/fu-main.c:	if (priv->connection == NULL)
src/fu-main.c:	g_dbus_connection_emit_signal(priv->connection,
src/fu-main.c:	if (priv->connection == NULL)
src/fu-main.c:	g_dbus_connection_emit_signal(priv->connection,
src/fu-main.c:	if (priv->connection == NULL)
src/fu-main.c:	g_dbus_connection_emit_signal(priv->connection,
src/fu-main.c:	if (priv->connection == NULL)
src/fu-main.c:	g_dbus_connection_emit_signal(priv->connection,
src/fu-main.c:	if (priv->connection == NULL) {
src/fu-main.c:	    priv->connection,
src/fu-main.c:		g_main_loop_quit(priv->loop);
src/fu-main.c:	feature_flags = g_hash_table_lookup(priv->sender_features, sender);
src/fu-main.c:	value = g_dbus_proxy_call_sync(priv->proxy_uid,
src/fu-main.c:	if (!fu_engine_unlock(helper->priv->engine, helper->device_id, &error)) {
src/fu-main.c:		fu_engine_add_approved_firmware(helper->priv->engine, csum);
src/fu-main.c:	if (!fu_engine_set_blocked_firmware(helper->priv->engine, helper->checksums, &error)) {
src/fu-main.c:	sig = fu_engine_self_sign(helper->priv->engine, helper->value, helper->flags, &error);
src/fu-main.c:	if (!fu_engine_modify_config(helper->priv->engine, helper->key, helper->value, &error)) {
src/fu-main.c:	if (!fu_engine_activate(helper->priv->engine, helper->device_id, &error)) {
src/fu-main.c:	if (!fu_engine_verify_update(helper->priv->engine, helper->device_id, &error)) {
src/fu-main.c:	if (!fu_engine_modify_remote(helper->priv->engine,
src/fu-main.c:		    priv->authority,
src/fu-main.c:	priv->update_in_progress = TRUE;
src/fu-main.c:	ret = fu_engine_install_tasks(helper->priv->engine,
src/fu-main.c:	priv->update_in_progress = FALSE;
src/fu-main.c:	if (priv->pending_sigterm)
src/fu-main.c:		g_main_loop_quit(priv->loop);
src/fu-main.c:		devices_possible = fu_engine_get_devices(priv->engine, error);
src/fu-main.c:		device = fu_engine_get_device(priv->engine, helper->device_id, error);
src/fu-main.c:		    fu_engine_get_devices_by_composite_id(priv->engine,
src/fu-main.c:	helper->silo = fu_engine_get_silo_from_blob(priv->engine, helper->blob_cab, error);
src/fu-main.c:			if (!fu_engine_check_requirements(priv->engine,
src/fu-main.c:			fu_engine_md_refresh_device_from_component(priv->engine, device, component);
src/fu-main.c:			if (!fu_engine_check_requirements(priv->engine,
src/fu-main.c:	fu_engine_idle_reset(priv->engine);
src/fu-main.c:		devices = fu_engine_get_devices(priv->engine, &error);
src/fu-main.c:		val = fu_main_plugin_array_to_variant(fu_engine_get_plugins(priv->engine));
src/fu-main.c:		releases = fu_engine_get_releases(priv->engine, request, device_id, &error);
src/fu-main.c:		GPtrArray *checksums = fu_engine_get_approved_firmware(priv->engine);
src/fu-main.c:		GPtrArray *checksums = fu_engine_get_blocked_firmware(priv->engine);
src/fu-main.c:		metadata = fu_engine_get_report_metadata(priv->engine, &error);
src/fu-main.c:		    priv->authority,
src/fu-main.c:		    priv->authority,
src/fu-main.c:		    priv->authority,
src/fu-main.c:		releases = fu_engine_get_downgrades(priv->engine, request, device_id, &error);
src/fu-main.c:		releases = fu_engine_get_upgrades(priv->engine, request, device_id, &error);
src/fu-main.c:		remotes = fu_engine_get_remotes(priv->engine, &error);
src/fu-main.c:		devices = fu_engine_get_history(priv->engine, &error);
src/fu-main.c:		if (priv->machine_kind != FU_MAIN_MACHINE_KIND_PHYSICAL) {
src/fu-main.c:		attrs = fu_engine_get_host_security_attrs(priv->engine);
src/fu-main.c:		if (!fu_engine_clear_results(priv->engine, device_id, &error)) {
src/fu-main.c:		if (!fu_engine_modify_device(priv->engine, device_id, key, value, &error)) {
src/fu-main.c:		result = fu_engine_get_results(priv->engine, device_id, &error);
src/fu-main.c:		if (!fu_engine_update_metadata(priv->engine, remote_id, fd_data, fd_sig, &error)) {
src/fu-main.c:		    priv->authority,
src/fu-main.c:		    priv->authority,
src/fu-main.c:		    priv->authority,
src/fu-main.c:		    priv->authority,
src/fu-main.c:		    priv->authority,
src/fu-main.c:		if (!fu_engine_verify(priv->engine, device_id, &error)) {
src/fu-main.c:		g_hash_table_insert(priv->sender_features,
src/fu-main.c:		archive_size_max = fu_engine_get_archive_size_max(priv->engine);
src/fu-main.c:		results = fu_engine_get_details(priv->engine, request, fd, &error);
src/fu-main.c:	fu_engine_idle_reset(priv->engine);
src/fu-main.c:		return g_variant_new_boolean(fu_engine_get_tainted(priv->engine));
src/fu-main.c:		return g_variant_new_uint32(fu_engine_get_status(priv->engine));
src/fu-main.c:		return g_variant_new_string(fu_engine_get_host_product(priv->engine));
src/fu-main.c:		return g_variant_new_string(fu_engine_get_host_machine_id(priv->engine));
src/fu-main.c:		return g_variant_new_string(fu_engine_get_host_security_id(priv->engine));
src/fu-main.c:	priv->connection = g_object_ref(connection);
src/fu-main.c:					      priv->introspection_daemon->interfaces[0],
src/fu-main.c:	priv->proxy_uid = g_dbus_proxy_new_sync(priv->connection,
src/fu-main.c:	if (priv->proxy_uid == NULL) {
src/fu-main.c:	if (priv->update_in_progress) {
src/fu-main.c:	g_main_loop_quit(priv->loop);
src/fu-main.c:	if (priv->update_in_progress) {
src/fu-main.c:	g_main_loop_quit(priv->loop);
src/fu-main.c:	if (priv->update_in_progress) {
src/fu-main.c:		priv->pending_sigterm = TRUE;
src/fu-main.c:	g_main_loop_quit(priv->loop);
src/fu-main.c:	g_hash_table_unref(priv->sender_features);
src/fu-main.c:	if (priv->loop != NULL)
src/fu-main.c:		g_main_loop_unref(priv->loop);
src/fu-main.c:	if (priv->owner_id > 0)
src/fu-main.c:		g_bus_unown_name(priv->owner_id);
src/fu-main.c:	if (priv->proxy_uid != NULL)
src/fu-main.c:		g_object_unref(priv->proxy_uid);
src/fu-main.c:	if (priv->engine != NULL)
src/fu-main.c:		g_object_unref(priv->engine);
src/fu-main.c:	if (priv->connection != NULL)
src/fu-main.c:		g_object_unref(priv->connection);
src/fu-main.c:	if (priv->authority != NULL)
src/fu-main.c:		g_object_unref(priv->authority);
src/fu-main.c:	if (priv->argv0_monitor != NULL) {
src/fu-main.c:		g_file_monitor_cancel(priv->argv0_monitor);
src/fu-main.c:		g_object_unref(priv->argv0_monitor);
src/fu-main.c:	if (priv->introspection_daemon != NULL)
src/fu-main.c:		g_dbus_node_info_unref(priv->introspection_daemon);
src/fu-main.c:	if (priv->memory_monitor != NULL)
src/fu-main.c:		g_object_unref(priv->memory_monitor);
src/fu-main.c:	priv->sender_features = g_hash_table_new_full(g_str_hash, g_str_equal, g_free, g_free);
src/fu-main.c:	priv->loop = g_main_loop_new(NULL, FALSE);
src/fu-main.c:	priv->engine = fu_engine_new(FU_APP_FLAGS_NONE);
src/fu-main.c:	g_signal_connect(priv->engine, "changed", G_CALLBACK(fu_main_engine_changed_cb), priv);
src/fu-main.c:	g_signal_connect(priv->engine,
src/fu-main.c:	g_signal_connect(priv->engine,
src/fu-main.c:	g_signal_connect(priv->engine,
src/fu-main.c:	g_signal_connect(priv->engine,
src/fu-main.c:	g_signal_connect(priv->engine,
src/fu-main.c:	g_signal_connect(priv->engine,
src/fu-main.c:	if (!fu_engine_load(priv->engine,
src/fu-main.c:	priv->argv0_monitor = g_file_monitor_file(argv0_file, G_FILE_MONITOR_NONE, NULL, &error);
src/fu-main.c:	g_signal_connect(priv->argv0_monitor, "changed", G_CALLBACK(fu_main_argv_changed_cb), priv);
src/fu-main.c:	priv->memory_monitor = g_memory_monitor_dup_default();
src/fu-main.c:	g_signal_connect(G_OBJECT(priv->memory_monitor),
src/fu-main.c:	priv->introspection_daemon =
src/fu-main.c:	if (priv->introspection_daemon == NULL) {
src/fu-main.c:	priv->authority = polkit_authority_get_sync(NULL, &error);
src/fu-main.c:	if (priv->authority == NULL) {
src/fu-main.c:		priv->machine_kind = FU_MAIN_MACHINE_KIND_VIRTUAL;
src/fu-main.c:		priv->machine_kind = FU_MAIN_MACHINE_KIND_CONTAINER;
src/fu-main.c:	priv->owner_id = g_bus_own_name(G_BUS_TYPE_SYSTEM,
src/fu-main.c:		g_idle_add(fu_main_timed_exit_cb, priv->loop);
src/fu-main.c:		g_timeout_add_seconds(5, fu_main_timed_exit_cb, priv->loop);
src/fu-main.c:	g_main_loop_run(priv->loop);
src/fu-offline.c:	const gchar *argv[] = {priv->splash_cmd, "system-update", "--progress", str, NULL};
src/fu-offline.c:	if (priv->splash_flags == FU_OFFLINE_FLAG_NONE) {
src/fu-offline.c:	if ((priv->splash_flags & FU_OFFLINE_FLAG_USE_PROGRESS) == 0) {
src/fu-offline.c:	const gchar *argv[] = {priv->splash_cmd, "change-mode", "--system-upgrade", NULL};
src/fu-offline.c:	if (priv->splash_cmd == NULL) {
src/fu-offline.c:		priv->splash_flags = FU_OFFLINE_FLAG_ENABLE;
src/fu-offline.c:	priv->splash_flags = FU_OFFLINE_FLAG_ENABLE | FU_OFFLINE_FLAG_USE_PROGRESS;
src/fu-offline.c:	const gchar *argv[] = {priv->splash_cmd, "change-mode", "--reboot", NULL};
src/fu-offline.c:	if (priv->splash_flags == FU_OFFLINE_FLAG_NONE) {
src/fu-offline.c:	if (g_timer_elapsed(priv->splash_timer, NULL) < 1.f ||
src/fu-offline.c:	g_timer_reset(priv->splash_timer);
src/fu-offline.c:	if (priv->splash_timer != NULL)
src/fu-offline.c:		g_timer_destroy(priv->splash_timer);
src/fu-offline.c:	g_free(priv->splash_cmd);
src/fu-offline.c:	priv->splash_cmd = g_find_program_in_path("plymouth");
src/fu-offline.c:	priv->splash_timer = g_timer_new();
libfwupd/fwupd-request.c:	return priv->id;
libfwupd/fwupd-request.c:	if (g_strcmp0(priv->id, id) == 0)
libfwupd/fwupd-request.c:	g_free(priv->id);
libfwupd/fwupd-request.c:	priv->id = g_strdup(id);
libfwupd/fwupd-request.c:	return priv->device_id;
libfwupd/fwupd-request.c:	if (g_strcmp0(priv->device_id, device_id) == 0)
libfwupd/fwupd-request.c:	g_free(priv->device_id);
libfwupd/fwupd-request.c:	priv->device_id = g_strdup(device_id);
libfwupd/fwupd-request.c:	return priv->created;
libfwupd/fwupd-request.c:	priv->created = created;
libfwupd/fwupd-request.c:	if (priv->id != NULL) {
libfwupd/fwupd-request.c:				      g_variant_new_string(priv->id));
libfwupd/fwupd-request.c:	if (priv->created > 0) {
libfwupd/fwupd-request.c:				      g_variant_new_uint64(priv->created));
libfwupd/fwupd-request.c:	if (priv->device_id != NULL) {
libfwupd/fwupd-request.c:				      g_variant_new_string(priv->device_id));
libfwupd/fwupd-request.c:	if (priv->message != NULL) {
libfwupd/fwupd-request.c:				      g_variant_new_string(priv->message));
libfwupd/fwupd-request.c:	if (priv->image != NULL) {
libfwupd/fwupd-request.c:				      g_variant_new_string(priv->image));
libfwupd/fwupd-request.c:	if (priv->kind != FWUPD_REQUEST_KIND_UNKNOWN) {
libfwupd/fwupd-request.c:				      g_variant_new_uint32(priv->kind));
libfwupd/fwupd-request.c:	return priv->message;
libfwupd/fwupd-request.c:	if (g_strcmp0(priv->message, message) == 0)
libfwupd/fwupd-request.c:	g_free(priv->message);
libfwupd/fwupd-request.c:	priv->message = g_strdup(message);
libfwupd/fwupd-request.c:	return priv->image;
libfwupd/fwupd-request.c:	if (g_strcmp0(priv->image, image) == 0)
libfwupd/fwupd-request.c:	g_free(priv->image);
libfwupd/fwupd-request.c:	priv->image = g_strdup(image);
libfwupd/fwupd-request.c:	return priv->kind;
libfwupd/fwupd-request.c:	if (priv->kind == kind)
libfwupd/fwupd-request.c:	priv->kind = kind;
libfwupd/fwupd-request.c:	fwupd_pad_kv_str(str, FWUPD_RESULT_KEY_APPSTREAM_ID, priv->id);
libfwupd/fwupd-request.c:	if (priv->kind != FWUPD_REQUEST_KIND_UNKNOWN) {
libfwupd/fwupd-request.c:				 fwupd_request_kind_to_string(priv->kind));
libfwupd/fwupd-request.c:	fwupd_pad_kv_str(str, FWUPD_RESULT_KEY_DEVICE_ID, priv->device_id);
libfwupd/fwupd-request.c:	fwupd_pad_kv_unx(str, FWUPD_RESULT_KEY_CREATED, priv->created);
libfwupd/fwupd-request.c:	fwupd_pad_kv_str(str, FWUPD_RESULT_KEY_UPDATE_MESSAGE, priv->message);
libfwupd/fwupd-request.c:	fwupd_pad_kv_str(str, FWUPD_RESULT_KEY_UPDATE_IMAGE, priv->image);
libfwupd/fwupd-request.c:		g_value_set_string(value, priv->id);
libfwupd/fwupd-request.c:		g_value_set_string(value, priv->message);
libfwupd/fwupd-request.c:		g_value_set_string(value, priv->image);
libfwupd/fwupd-request.c:		g_value_set_uint(value, priv->kind);
libfwupd/fwupd-request.c:	g_free(priv->id);
libfwupd/fwupd-request.c:	g_free(priv->device_id);
libfwupd/fwupd-request.c:	g_free(priv->message);
libfwupd/fwupd-request.c:	g_free(priv->image);
libfwupd/fwupd-request.c:	priv->created = g_get_real_time() / G_USEC_PER_SEC;
libfwupd/fwupd-remote.c:	fwupd_common_json_add_string(builder, "Id", priv->id);
libfwupd/fwupd-remote.c:	if (priv->kind != FWUPD_REMOTE_KIND_UNKNOWN) {
libfwupd/fwupd-remote.c:					     fwupd_remote_kind_to_string(priv->kind));
libfwupd/fwupd-remote.c:	if (priv->keyring_kind != FWUPD_KEYRING_KIND_UNKNOWN) {
libfwupd/fwupd-remote.c:					     fwupd_keyring_kind_to_string(priv->keyring_kind));
libfwupd/fwupd-remote.c:	fwupd_common_json_add_string(builder, "FirmwareBaseUri", priv->firmware_base_uri);
libfwupd/fwupd-remote.c:	fwupd_common_json_add_string(builder, "ReportUri", priv->report_uri);
libfwupd/fwupd-remote.c:	fwupd_common_json_add_string(builder, "SecurityReportUri", priv->security_report_uri);
libfwupd/fwupd-remote.c:	fwupd_common_json_add_string(builder, "MetadataUri", priv->metadata_uri);
libfwupd/fwupd-remote.c:	fwupd_common_json_add_string(builder, "MetadataUriSig", priv->metadata_uri_sig);
libfwupd/fwupd-remote.c:	fwupd_common_json_add_string(builder, "Username", priv->username);
libfwupd/fwupd-remote.c:	fwupd_common_json_add_string(builder, "Password", priv->password);
libfwupd/fwupd-remote.c:	fwupd_common_json_add_string(builder, "Title", priv->title);
libfwupd/fwupd-remote.c:	fwupd_common_json_add_string(builder, "Agreement", priv->agreement);
libfwupd/fwupd-remote.c:	fwupd_common_json_add_string(builder, "Checksum", priv->checksum);
libfwupd/fwupd-remote.c:	fwupd_common_json_add_string(builder, "FilenameCache", priv->filename_cache);
libfwupd/fwupd-remote.c:	fwupd_common_json_add_string(builder, "FilenameCacheSig", priv->filename_cache_sig);
libfwupd/fwupd-remote.c:	fwupd_common_json_add_string(builder, "FilenameSource", priv->filename_source);
libfwupd/fwupd-remote.c:	fwupd_common_json_add_boolean(builder, "Enabled", priv->enabled);
libfwupd/fwupd-remote.c:	fwupd_common_json_add_boolean(builder, "ApprovalRequired", priv->approval_required);
libfwupd/fwupd-remote.c:	fwupd_common_json_add_boolean(builder, "AutomaticReports", priv->automatic_reports);
libfwupd/fwupd-remote.c:				      priv->automatic_security_reports);
libfwupd/fwupd-remote.c:	fwupd_common_json_add_int(builder, "Priority", priv->priority);
libfwupd/fwupd-remote.c:	fwupd_common_json_add_int(builder, "Mtime", priv->mtime);
libfwupd/fwupd-remote.c:	fwupd_common_json_add_string(builder, "RemotesDir", priv->remotes_dir);
libfwupd/fwupd-remote.c:	fwupd_common_json_add_stringv(builder, "OrderAfter", priv->order_after);
libfwupd/fwupd-remote.c:	fwupd_common_json_add_stringv(builder, "OrderBefore", priv->order_before);
libfwupd/fwupd-remote.c:	if (g_strcmp0(priv->username, username) == 0)
libfwupd/fwupd-remote.c:	g_free(priv->username);
libfwupd/fwupd-remote.c:	priv->username = g_strdup(username);
libfwupd/fwupd-remote.c:	if (g_strcmp0(priv->title, title) == 0)
libfwupd/fwupd-remote.c:	g_free(priv->title);
libfwupd/fwupd-remote.c:	priv->title = g_strdup(title);
libfwupd/fwupd-remote.c:	if (g_strcmp0(priv->agreement, agreement) == 0)
libfwupd/fwupd-remote.c:	g_free(priv->agreement);
libfwupd/fwupd-remote.c:	priv->agreement = g_strdup(agreement);
libfwupd/fwupd-remote.c:	if (g_strcmp0(priv->checksum, checksum) == 0)
libfwupd/fwupd-remote.c:	g_free(priv->checksum);
libfwupd/fwupd-remote.c:	priv->checksum = g_strdup(checksum);
libfwupd/fwupd-remote.c:	if (g_strcmp0(priv->password, password) == 0)
libfwupd/fwupd-remote.c:	g_free(priv->password);
libfwupd/fwupd-remote.c:	priv->password = g_strdup(password);
libfwupd/fwupd-remote.c:	priv->kind = kind;
libfwupd/fwupd-remote.c:	priv->keyring_kind = keyring_kind;
libfwupd/fwupd-remote.c:	if (g_strcmp0(priv->id, id) == 0)
libfwupd/fwupd-remote.c:	g_free(priv->id);
libfwupd/fwupd-remote.c:	priv->id = g_strdup(id);
libfwupd/fwupd-remote.c:	g_strdelimit(priv->id, ".", '\0');
libfwupd/fwupd-remote.c:	if (priv->filename_source == filename_source)
libfwupd/fwupd-remote.c:	g_free(priv->filename_source);
libfwupd/fwupd-remote.c:	priv->filename_source = g_strdup(filename_source);
libfwupd/fwupd-remote.c:	if (priv->firmware_base_uri != NULL) {
libfwupd/fwupd-remote.c:		path_new = g_build_filename(priv->firmware_base_uri, basename, NULL);
libfwupd/fwupd-remote.c:		if (curl_url_set(uri, CURLUPART_URL, priv->metadata_uri, 0) != CURLUE_OK) {
libfwupd/fwupd-remote.c:				    priv->metadata_uri);
libfwupd/fwupd-remote.c:	if (priv->username != NULL)
libfwupd/fwupd-remote.c:		curl_url_set(uri, CURLUPART_USER, priv->username, 0);
libfwupd/fwupd-remote.c:	if (priv->password != NULL)
libfwupd/fwupd-remote.c:		curl_url_set(uri, CURLUPART_PASSWORD, priv->password, 0);
libfwupd/fwupd-remote.c:	if (priv->firmware_base_uri != NULL) {
libfwupd/fwupd-remote.c:		return g_build_filename(priv->firmware_base_uri, basename, NULL);
libfwupd/fwupd-remote.c:		g_autofree gchar *basename = g_path_get_dirname(priv->metadata_uri);
libfwupd/fwupd-remote.c:	priv->metadata_uri = g_strdup(metadata_uri);
libfwupd/fwupd-remote.c:	suffix = fwupd_remote_get_suffix_for_keyring_kind(priv->keyring_kind);
libfwupd/fwupd-remote.c:		priv->metadata_uri_sig = g_strconcat(metadata_uri, suffix, NULL);
libfwupd/fwupd-remote.c:	if (g_strcmp0(priv->firmware_base_uri, firmware_base_uri) == 0)
libfwupd/fwupd-remote.c:	g_free(priv->firmware_base_uri);
libfwupd/fwupd-remote.c:	priv->firmware_base_uri = g_strdup(firmware_base_uri);
libfwupd/fwupd-remote.c:	if (g_strcmp0(priv->report_uri, report_uri_safe) == 0)
libfwupd/fwupd-remote.c:	g_free(priv->report_uri);
libfwupd/fwupd-remote.c:	priv->report_uri = g_steal_pointer(&report_uri_safe);
libfwupd/fwupd-remote.c:	if (g_strcmp0(priv->security_report_uri, security_report_uri_safe) == 0)
libfwupd/fwupd-remote.c:	g_free(priv->security_report_uri);
libfwupd/fwupd-remote.c:	priv->security_report_uri = g_steal_pointer(&security_report_uri_safe);
libfwupd/fwupd-remote.c:	if (g_strcmp0(priv->filename_cache, filename) == 0)
libfwupd/fwupd-remote.c:	g_free(priv->filename_cache);
libfwupd/fwupd-remote.c:	priv->filename_cache = g_strdup(filename);
libfwupd/fwupd-remote.c:	suffix = fwupd_remote_get_suffix_for_keyring_kind(priv->keyring_kind);
libfwupd/fwupd-remote.c:		g_free(priv->filename_cache_sig);
libfwupd/fwupd-remote.c:		priv->filename_cache_sig = g_strconcat(filename, suffix, NULL);
libfwupd/fwupd-remote.c:	g_clear_pointer(&priv->order_before, g_strfreev);
libfwupd/fwupd-remote.c:		priv->order_before = g_strsplit_set(order_before, ",:;", -1);
libfwupd/fwupd-remote.c:	g_clear_pointer(&priv->order_after, g_strfreev);
libfwupd/fwupd-remote.c:		priv->order_after = g_strsplit_set(order_after, ",:;", -1);
libfwupd/fwupd-remote.c:	if (priv->kind == FWUPD_REMOTE_KIND_UNKNOWN) {
libfwupd/fwupd-remote.c:	if (priv->kind == FWUPD_REMOTE_KIND_DOWNLOAD) {
libfwupd/fwupd-remote.c:		if (priv->remotes_dir == NULL) {
libfwupd/fwupd-remote.c:		    g_build_filename(priv->remotes_dir, priv->id, "metadata.xml.gz", NULL);
libfwupd/fwupd-remote.c:	if (priv->kind == FWUPD_REMOTE_KIND_DIRECTORY) {
libfwupd/fwupd-remote.c:		if (priv->keyring_kind != FWUPD_KEYRING_KIND_NONE) {
libfwupd/fwupd-remote.c:				    fwupd_keyring_kind_to_string(priv->keyring_kind));
libfwupd/fwupd-remote.c:		if (priv->firmware_base_uri != NULL) {
libfwupd/fwupd-remote.c:	if (priv->filename_cache_sig != NULL &&
libfwupd/fwupd-remote.c:	    g_file_test(priv->filename_cache_sig, G_FILE_TEST_EXISTS)) {
libfwupd/fwupd-remote.c:		if (!g_file_get_contents(priv->filename_cache_sig, &buf, &sz, error)) {
libfwupd/fwupd-remote.c:		priv->keyring_kind = fwupd_keyring_kind_from_string(tmp);
libfwupd/fwupd-remote.c:		if (priv->keyring_kind == FWUPD_KEYRING_KIND_UNKNOWN) {
libfwupd/fwupd-remote.c:				priv->kind = FWUPD_REMOTE_KIND_DIRECTORY;
libfwupd/fwupd-remote.c:				priv->kind = FWUPD_REMOTE_KIND_LOCAL;
libfwupd/fwupd-remote.c:			priv->kind = FWUPD_REMOTE_KIND_DOWNLOAD;
libfwupd/fwupd-remote.c:		priv->enabled = g_key_file_get_boolean(kf, group, "Enabled", NULL);
libfwupd/fwupd-remote.c:		priv->approval_required =
libfwupd/fwupd-remote.c:		priv->automatic_reports =
libfwupd/fwupd-remote.c:		priv->automatic_security_reports =
libfwupd/fwupd-remote.c:	return priv->order_after;
libfwupd/fwupd-remote.c:	return priv->order_before;
libfwupd/fwupd-remote.c:	return priv->filename_cache;
libfwupd/fwupd-remote.c:	return priv->filename_cache_sig;
libfwupd/fwupd-remote.c:	return priv->filename_source;
libfwupd/fwupd-remote.c:	return priv->priority;
libfwupd/fwupd-remote.c:	return priv->kind;
libfwupd/fwupd-remote.c:	return priv->keyring_kind;
libfwupd/fwupd-remote.c:	if (priv->mtime > now)
libfwupd/fwupd-remote.c:	return now - priv->mtime;
libfwupd/fwupd-remote.c:	if (g_strcmp0(priv->remotes_dir, directory) == 0)
libfwupd/fwupd-remote.c:	g_free(priv->remotes_dir);
libfwupd/fwupd-remote.c:	priv->remotes_dir = g_strdup(directory);
libfwupd/fwupd-remote.c:	priv->priority = priority;
libfwupd/fwupd-remote.c:	priv->mtime = mtime;
libfwupd/fwupd-remote.c:	return priv->username;
libfwupd/fwupd-remote.c:	return priv->password;
libfwupd/fwupd-remote.c:	return priv->title;
libfwupd/fwupd-remote.c:	return priv->agreement;
libfwupd/fwupd-remote.c:	return priv->remotes_dir;
libfwupd/fwupd-remote.c:	return priv->checksum;
libfwupd/fwupd-remote.c:	return priv->report_uri;
libfwupd/fwupd-remote.c:	return priv->security_report_uri;
libfwupd/fwupd-remote.c:	return priv->metadata_uri;
libfwupd/fwupd-remote.c:	basename = g_path_get_basename(priv->metadata_uri);
libfwupd/fwupd-remote.c:	baseuri = g_path_get_dirname(priv->metadata_uri);
libfwupd/fwupd-remote.c:	if (g_strcmp0(metadata_uri, priv->metadata_uri) != 0) {
libfwupd/fwupd-remote.c:		g_debug("changing metadata URI from %s to %s", priv->metadata_uri, metadata_uri);
libfwupd/fwupd-remote.c:		g_free(priv->metadata_uri);
libfwupd/fwupd-remote.c:		priv->metadata_uri = g_steal_pointer(&metadata_uri);
libfwupd/fwupd-remote.c:	if (priv->keyring_kind != FWUPD_KEYRING_KIND_JCAT) {
libfwupd/fwupd-remote.c:	return priv->metadata_uri_sig;
libfwupd/fwupd-remote.c:	return priv->firmware_base_uri;
libfwupd/fwupd-remote.c:	return priv->enabled;
libfwupd/fwupd-remote.c:	return priv->automatic_reports;
libfwupd/fwupd-remote.c:	return priv->automatic_security_reports;
libfwupd/fwupd-remote.c:	return priv->approval_required;
libfwupd/fwupd-remote.c:	return priv->id;
libfwupd/fwupd-remote.c:			priv->enabled = g_variant_get_boolean(value);
libfwupd/fwupd-remote.c:			priv->approval_required = g_variant_get_boolean(value);
libfwupd/fwupd-remote.c:			priv->priority = g_variant_get_int32(value);
libfwupd/fwupd-remote.c:			priv->mtime = g_variant_get_uint64(value);
libfwupd/fwupd-remote.c:			priv->automatic_reports = g_variant_get_boolean(value);
libfwupd/fwupd-remote.c:			priv->automatic_security_reports = g_variant_get_boolean(value);
libfwupd/fwupd-remote.c:	if (priv->id != NULL) {
libfwupd/fwupd-remote.c:				      g_variant_new_string(priv->id));
libfwupd/fwupd-remote.c:	if (priv->username != NULL) {
libfwupd/fwupd-remote.c:				      g_variant_new_string(priv->username));
libfwupd/fwupd-remote.c:	if (priv->password != NULL) {
libfwupd/fwupd-remote.c:				      g_variant_new_string(priv->password));
libfwupd/fwupd-remote.c:	if (priv->title != NULL) {
libfwupd/fwupd-remote.c:		g_variant_builder_add(&builder, "{sv}", "Title", g_variant_new_string(priv->title));
libfwupd/fwupd-remote.c:	if (priv->agreement != NULL) {
libfwupd/fwupd-remote.c:				      g_variant_new_string(priv->agreement));
libfwupd/fwupd-remote.c:	if (priv->checksum != NULL) {
libfwupd/fwupd-remote.c:				      g_variant_new_string(priv->checksum));
libfwupd/fwupd-remote.c:	if (priv->metadata_uri != NULL) {
libfwupd/fwupd-remote.c:				      g_variant_new_string(priv->metadata_uri));
libfwupd/fwupd-remote.c:	if (priv->report_uri != NULL) {
libfwupd/fwupd-remote.c:				      g_variant_new_string(priv->report_uri));
libfwupd/fwupd-remote.c:	if (priv->security_report_uri != NULL) {
libfwupd/fwupd-remote.c:				      g_variant_new_string(priv->security_report_uri));
libfwupd/fwupd-remote.c:	if (priv->firmware_base_uri != NULL) {
libfwupd/fwupd-remote.c:				      g_variant_new_string(priv->firmware_base_uri));
libfwupd/fwupd-remote.c:	if (priv->priority != 0) {
libfwupd/fwupd-remote.c:				      g_variant_new_int32(priv->priority));
libfwupd/fwupd-remote.c:	if (priv->kind != FWUPD_REMOTE_KIND_UNKNOWN) {
libfwupd/fwupd-remote.c:		g_variant_builder_add(&builder, "{sv}", "Type", g_variant_new_uint32(priv->kind));
libfwupd/fwupd-remote.c:	if (priv->keyring_kind != FWUPD_KEYRING_KIND_UNKNOWN) {
libfwupd/fwupd-remote.c:				      g_variant_new_uint32(priv->keyring_kind));
libfwupd/fwupd-remote.c:	if (priv->mtime != 0) {
libfwupd/fwupd-remote.c:				      g_variant_new_uint64(priv->mtime));
libfwupd/fwupd-remote.c:	if (priv->filename_cache != NULL) {
libfwupd/fwupd-remote.c:				      g_variant_new_string(priv->filename_cache));
libfwupd/fwupd-remote.c:	if (priv->filename_source != NULL) {
libfwupd/fwupd-remote.c:				      g_variant_new_string(priv->filename_source));
libfwupd/fwupd-remote.c:	if (priv->remotes_dir != NULL) {
libfwupd/fwupd-remote.c:				      g_variant_new_string(priv->remotes_dir));
libfwupd/fwupd-remote.c:	g_variant_builder_add(&builder, "{sv}", "Enabled", g_variant_new_boolean(priv->enabled));
libfwupd/fwupd-remote.c:			      g_variant_new_boolean(priv->approval_required));
libfwupd/fwupd-remote.c:			      g_variant_new_boolean(priv->automatic_reports));
libfwupd/fwupd-remote.c:			      g_variant_new_boolean(priv->automatic_security_reports));
libfwupd/fwupd-remote.c:		g_value_set_boolean(value, priv->enabled);
libfwupd/fwupd-remote.c:		g_value_set_boolean(value, priv->approval_required);
libfwupd/fwupd-remote.c:		g_value_set_string(value, priv->id);
libfwupd/fwupd-remote.c:		g_value_set_boolean(value, priv->automatic_reports);
libfwupd/fwupd-remote.c:		g_value_set_boolean(value, priv->automatic_security_reports);
libfwupd/fwupd-remote.c:		priv->enabled = g_value_get_boolean(value);
libfwupd/fwupd-remote.c:		priv->approval_required = g_value_get_boolean(value);
libfwupd/fwupd-remote.c:		priv->automatic_reports = g_value_get_boolean(value);
libfwupd/fwupd-remote.c:		priv->automatic_security_reports = g_value_get_boolean(value);
libfwupd/fwupd-remote.c:	priv->keyring_kind = FWUPD_KEYRING_KIND_JCAT;
libfwupd/fwupd-remote.c:	g_free(priv->id);
libfwupd/fwupd-remote.c:	g_free(priv->metadata_uri);
libfwupd/fwupd-remote.c:	g_free(priv->metadata_uri_sig);
libfwupd/fwupd-remote.c:	g_free(priv->firmware_base_uri);
libfwupd/fwupd-remote.c:	g_free(priv->report_uri);
libfwupd/fwupd-remote.c:	g_free(priv->security_report_uri);
libfwupd/fwupd-remote.c:	g_free(priv->username);
libfwupd/fwupd-remote.c:	g_free(priv->password);
libfwupd/fwupd-remote.c:	g_free(priv->title);
libfwupd/fwupd-remote.c:	g_free(priv->agreement);
libfwupd/fwupd-remote.c:	g_free(priv->remotes_dir);
libfwupd/fwupd-remote.c:	g_free(priv->checksum);
libfwupd/fwupd-remote.c:	g_free(priv->filename_cache);
libfwupd/fwupd-remote.c:	g_free(priv->filename_cache_sig);
libfwupd/fwupd-remote.c:	g_free(priv->filename_source);
libfwupd/fwupd-remote.c:	g_strfreev(priv->order_after);
libfwupd/fwupd-remote.c:	g_strfreev(priv->order_before);
libfwupd/fwupd-security-attr.c:	return priv->obsoletes;
libfwupd/fwupd-security-attr.c:	g_ptr_array_add(priv->obsoletes, g_strdup(appstream_id));
libfwupd/fwupd-security-attr.c:	for (guint i = 0; i < priv->obsoletes->len; i++) {
libfwupd/fwupd-security-attr.c:		const gchar *obsolete_tmp = g_ptr_array_index(priv->obsoletes, i);
libfwupd/fwupd-security-attr.c:	return priv->guids;
libfwupd/fwupd-security-attr.c:	g_ptr_array_add(priv->guids, g_strdup(guid));
libfwupd/fwupd-security-attr.c:	for (guint i = 0; i < priv->guids->len; i++) {
libfwupd/fwupd-security-attr.c:		const gchar *guid_tmp = g_ptr_array_index(priv->guids, i);
libfwupd/fwupd-security-attr.c:	return priv->appstream_id;
libfwupd/fwupd-security-attr.c:	if (g_strcmp0(priv->appstream_id, appstream_id) == 0)
libfwupd/fwupd-security-attr.c:	g_free(priv->appstream_id);
libfwupd/fwupd-security-attr.c:	priv->appstream_id = g_strdup(appstream_id);
libfwupd/fwupd-security-attr.c:	return priv->url;
libfwupd/fwupd-security-attr.c:	if (g_strcmp0(priv->name, name) == 0)
libfwupd/fwupd-security-attr.c:	g_free(priv->name);
libfwupd/fwupd-security-attr.c:	priv->name = g_strdup(name);
libfwupd/fwupd-security-attr.c:	if (g_strcmp0(priv->plugin, plugin) == 0)
libfwupd/fwupd-security-attr.c:	g_free(priv->plugin);
libfwupd/fwupd-security-attr.c:	priv->plugin = g_strdup(plugin);
libfwupd/fwupd-security-attr.c:	if (g_strcmp0(priv->url, url) == 0)
libfwupd/fwupd-security-attr.c:	g_free(priv->url);
libfwupd/fwupd-security-attr.c:	priv->url = g_strdup(url);
libfwupd/fwupd-security-attr.c:	return priv->name;
libfwupd/fwupd-security-attr.c:	return priv->plugin;
libfwupd/fwupd-security-attr.c:	return priv->flags;
libfwupd/fwupd-security-attr.c:	priv->flags = flags;
libfwupd/fwupd-security-attr.c:	priv->flags |= flag;
libfwupd/fwupd-security-attr.c:	return (priv->flags & flag) > 0;
libfwupd/fwupd-security-attr.c:	return priv->level;
libfwupd/fwupd-security-attr.c:	priv->level = level;
libfwupd/fwupd-security-attr.c:	priv->result = result;
libfwupd/fwupd-security-attr.c:	return priv->result;
libfwupd/fwupd-security-attr.c:	if (priv->appstream_id != NULL) {
libfwupd/fwupd-security-attr.c:				      g_variant_new_string(priv->appstream_id));
libfwupd/fwupd-security-attr.c:	if (priv->name != NULL) {
libfwupd/fwupd-security-attr.c:				      g_variant_new_string(priv->name));
libfwupd/fwupd-security-attr.c:	if (priv->url != NULL) {
libfwupd/fwupd-security-attr.c:				      g_variant_new_string(priv->url));
libfwupd/fwupd-security-attr.c:	if (priv->obsoletes->len > 0) {
libfwupd/fwupd-security-attr.c:		g_autofree const gchar **strv = g_new0(const gchar *, priv->obsoletes->len + 1);
libfwupd/fwupd-security-attr.c:		for (guint i = 0; i < priv->obsoletes->len; i++)
libfwupd/fwupd-security-attr.c:			strv[i] = (const gchar *)g_ptr_array_index(priv->obsoletes, i);
libfwupd/fwupd-security-attr.c:	if (priv->guids->len > 0) {
libfwupd/fwupd-security-attr.c:		g_autofree const gchar **strv = g_new0(const gchar *, priv->guids->len + 1);
libfwupd/fwupd-security-attr.c:		for (guint i = 0; i < priv->guids->len; i++)
libfwupd/fwupd-security-attr.c:			strv[i] = (const gchar *)g_ptr_array_index(priv->guids, i);
libfwupd/fwupd-security-attr.c:	if (priv->flags != 0) {
libfwupd/fwupd-security-attr.c:				      g_variant_new_uint64(priv->flags));
libfwupd/fwupd-security-attr.c:	if (priv->level > 0) {
libfwupd/fwupd-security-attr.c:				      g_variant_new_uint32(priv->level));
libfwupd/fwupd-security-attr.c:	if (priv->result != FWUPD_SECURITY_ATTR_RESULT_UNKNOWN) {
libfwupd/fwupd-security-attr.c:				      g_variant_new_uint32(priv->result));
libfwupd/fwupd-security-attr.c:	if (priv->metadata != NULL) {
libfwupd/fwupd-security-attr.c:				      fwupd_hash_kv_to_variant(priv->metadata));
libfwupd/fwupd-security-attr.c:	if (priv->metadata == NULL)
libfwupd/fwupd-security-attr.c:	return g_hash_table_lookup(priv->metadata, key);
libfwupd/fwupd-security-attr.c:	if (priv->metadata == NULL) {
libfwupd/fwupd-security-attr.c:		priv->metadata = g_hash_table_new_full(g_str_hash, g_str_equal, g_free, g_free);
libfwupd/fwupd-security-attr.c:	g_hash_table_insert(priv->metadata, g_strdup(key), g_strdup(value));
libfwupd/fwupd-security-attr.c:		if (priv->metadata != NULL)
libfwupd/fwupd-security-attr.c:			g_hash_table_unref(priv->metadata);
libfwupd/fwupd-security-attr.c:		priv->metadata = fwupd_variant_to_hash_kv(value);
libfwupd/fwupd-security-attr.c:	fwupd_common_json_add_string(builder, FWUPD_RESULT_KEY_APPSTREAM_ID, priv->appstream_id);
libfwupd/fwupd-security-attr.c:	fwupd_common_json_add_int(builder, FWUPD_RESULT_KEY_HSI_LEVEL, priv->level);
libfwupd/fwupd-security-attr.c:				     fwupd_security_attr_result_to_string(priv->result));
libfwupd/fwupd-security-attr.c:	fwupd_common_json_add_string(builder, FWUPD_RESULT_KEY_NAME, priv->name);
libfwupd/fwupd-security-attr.c:	fwupd_common_json_add_string(builder, FWUPD_RESULT_KEY_PLUGIN, priv->plugin);
libfwupd/fwupd-security-attr.c:	fwupd_common_json_add_string(builder, FWUPD_RESULT_KEY_URI, priv->url);
libfwupd/fwupd-security-attr.c:	if (priv->flags != FWUPD_SECURITY_ATTR_FLAG_NONE) {
libfwupd/fwupd-security-attr.c:			if ((priv->flags & ((guint64)1 << i)) == 0)
libfwupd/fwupd-security-attr.c:	if (priv->guids->len > 0) {
libfwupd/fwupd-security-attr.c:		for (guint i = 0; i < priv->guids->len; i++) {
libfwupd/fwupd-security-attr.c:			const gchar *guid = g_ptr_array_index(priv->guids, i);
libfwupd/fwupd-security-attr.c:	if (priv->metadata != NULL) {
libfwupd/fwupd-security-attr.c:		g_autoptr(GList) keys = g_hash_table_get_keys(priv->metadata);
libfwupd/fwupd-security-attr.c:			const gchar *value = g_hash_table_lookup(priv->metadata, key);
libfwupd/fwupd-security-attr.c:	fwupd_pad_kv_str(str, FWUPD_RESULT_KEY_APPSTREAM_ID, priv->appstream_id);
libfwupd/fwupd-security-attr.c:	fwupd_pad_kv_int(str, FWUPD_RESULT_KEY_HSI_LEVEL, priv->level);
libfwupd/fwupd-security-attr.c:			 fwupd_security_attr_result_to_string(priv->result));
libfwupd/fwupd-security-attr.c:	if (priv->flags != FWUPD_SECURITY_ATTR_FLAG_NONE)
libfwupd/fwupd-security-attr.c:		fwupd_pad_kv_tfl(str, FWUPD_RESULT_KEY_FLAGS, priv->flags);
libfwupd/fwupd-security-attr.c:	fwupd_pad_kv_str(str, FWUPD_RESULT_KEY_NAME, priv->name);
libfwupd/fwupd-security-attr.c:	fwupd_pad_kv_str(str, FWUPD_RESULT_KEY_PLUGIN, priv->plugin);
libfwupd/fwupd-security-attr.c:	fwupd_pad_kv_str(str, FWUPD_RESULT_KEY_URI, priv->url);
libfwupd/fwupd-security-attr.c:	for (guint i = 0; i < priv->obsoletes->len; i++) {
libfwupd/fwupd-security-attr.c:		const gchar *appstream_id = g_ptr_array_index(priv->obsoletes, i);
libfwupd/fwupd-security-attr.c:	for (guint i = 0; i < priv->guids->len; i++) {
libfwupd/fwupd-security-attr.c:		const gchar *guid = g_ptr_array_index(priv->guids, i);
libfwupd/fwupd-security-attr.c:	if (priv->metadata != NULL) {
libfwupd/fwupd-security-attr.c:		g_autoptr(GList) keys = g_hash_table_get_keys(priv->metadata);
libfwupd/fwupd-security-attr.c:			const gchar *value = g_hash_table_lookup(priv->metadata, key);
libfwupd/fwupd-security-attr.c:	priv->obsoletes = g_ptr_array_new_with_free_func(g_free);
libfwupd/fwupd-security-attr.c:	priv->guids = g_ptr_array_new_with_free_func(g_free);
libfwupd/fwupd-security-attr.c:	if (priv->metadata != NULL)
libfwupd/fwupd-security-attr.c:		g_hash_table_unref(priv->metadata);
libfwupd/fwupd-security-attr.c:	g_free(priv->appstream_id);
libfwupd/fwupd-security-attr.c:	g_free(priv->name);
libfwupd/fwupd-security-attr.c:	g_free(priv->plugin);
libfwupd/fwupd-security-attr.c:	g_free(priv->url);
libfwupd/fwupd-security-attr.c:	g_ptr_array_unref(priv->obsoletes);
libfwupd/fwupd-security-attr.c:	g_ptr_array_unref(priv->guids);
libfwupd/fwupd-client.c:/* always executed in the main context given by priv->main_ctx */
libfwupd/fwupd-client.c:	g_return_if_fail(g_main_context_is_owner(priv->main_ctx));
libfwupd/fwupd-client.c:		g_signal_emit(self, signals[SIGNAL_STATUS_CHANGED], 0, priv->status);
libfwupd/fwupd-client.c:	g_autoptr(GMutexLocker) locker = g_mutex_locker_new(&priv->idle_mutex);
libfwupd/fwupd-client.c:	for (guint i = 0; i < priv->idle_sources->len; i++) {
libfwupd/fwupd-client.c:		FwupdClientContextHelper *helper = g_ptr_array_index(priv->idle_sources, i);
libfwupd/fwupd-client.c:	g_ptr_array_set_size(priv->idle_sources, 0);
libfwupd/fwupd-client.c:	priv->idle_id = 0;
libfwupd/fwupd-client.c:	g_autoptr(GMutexLocker) locker = g_mutex_locker_new(&priv->idle_mutex);
libfwupd/fwupd-client.c:	if (priv->idle_id == 0) {
libfwupd/fwupd-client.c:		priv->idle_id = g_source_attach(g_steal_pointer(&source), priv->main_ctx);
libfwupd/fwupd-client.c:	g_ptr_array_add(priv->idle_sources, helper);
libfwupd/fwupd-client.c:	if (g_main_context_is_owner(priv->main_ctx)) {
libfwupd/fwupd-client.c:	if (g_main_context_is_owner(priv->main_ctx)) {
libfwupd/fwupd-client.c:	if (g_strcmp0(priv->host_product, host_product) == 0)
libfwupd/fwupd-client.c:	g_free(priv->host_product);
libfwupd/fwupd-client.c:	priv->host_product = g_strdup(host_product);
libfwupd/fwupd-client.c:	if (g_strcmp0(priv->host_machine_id, host_machine_id) == 0)
libfwupd/fwupd-client.c:	g_free(priv->host_machine_id);
libfwupd/fwupd-client.c:	priv->host_machine_id = g_strdup(host_machine_id);
libfwupd/fwupd-client.c:	if (g_strcmp0(priv->host_security_id, host_security_id) == 0)
libfwupd/fwupd-client.c:	g_free(priv->host_security_id);
libfwupd/fwupd-client.c:	priv->host_security_id = g_strdup(host_security_id);
libfwupd/fwupd-client.c:	if (g_strcmp0(priv->daemon_version, daemon_version) == 0)
libfwupd/fwupd-client.c:	g_free(priv->daemon_version);
libfwupd/fwupd-client.c:	priv->daemon_version = g_strdup(daemon_version);
libfwupd/fwupd-client.c:	if (priv->status == status)
libfwupd/fwupd-client.c:	priv->status = status;
libfwupd/fwupd-client.c:	g_debug("Emitting ::status-changed() [%s]", fwupd_status_to_string(priv->status));
libfwupd/fwupd-client.c:	if (priv->percentage == percentage)
libfwupd/fwupd-client.c:	priv->percentage = percentage;
libfwupd/fwupd-client.c:			priv->tainted = g_variant_get_boolean(val);
libfwupd/fwupd-client.c:			priv->interactive = g_variant_get_boolean(val);
libfwupd/fwupd-client.c:	if (priv->main_ctx != NULL)
libfwupd/fwupd-client.c:		return g_main_context_ref(priv->main_ctx);
libfwupd/fwupd-client.c:	if (main_ctx == priv->main_ctx)
libfwupd/fwupd-client.c:	g_clear_pointer(&priv->main_ctx, g_main_context_unref);
libfwupd/fwupd-client.c:		priv->main_ctx = g_main_context_ref(main_ctx);
libfwupd/fwupd-client.c:	if (priv->user_agent == NULL) {
libfwupd/fwupd-client.c:	if (g_strstr_len(priv->user_agent, -1, "fwupd/") == NULL) {
libfwupd/fwupd-client.c:	if (priv->soup_session != NULL) {
libfwupd/fwupd-client.c:		g_object_set(priv->soup_session, "user-agent", priv->user_agent, NULL);
libfwupd/fwupd-client.c:	proxies = g_proxy_resolver_lookup(priv->proxy_resolver, url, NULL, &error_local);
libfwupd/fwupd-client.c:	curl_easy_setopt(helper->curl, CURLOPT_USERAGENT, priv->user_agent);
libfwupd/fwupd-client.c:	locker = g_mutex_locker_new(&priv->proxy_mutex);
libfwupd/fwupd-client.c:	if (priv->proxy != NULL) {
libfwupd/fwupd-client.c:	priv->proxy = g_steal_pointer(&proxy);
libfwupd/fwupd-client.c:	g_signal_connect(priv->proxy,
libfwupd/fwupd-client.c:	g_signal_connect(priv->proxy, "g-signal", G_CALLBACK(fwupd_client_signal_cb), self);
libfwupd/fwupd-client.c:	val = g_dbus_proxy_get_cached_property(priv->proxy, "DaemonVersion");
libfwupd/fwupd-client.c:	val2 = g_dbus_proxy_get_cached_property(priv->proxy, "Tainted");
libfwupd/fwupd-client.c:		priv->tainted = g_variant_get_boolean(val2);
libfwupd/fwupd-client.c:	val3 = g_dbus_proxy_get_cached_property(priv->proxy, "Status");
libfwupd/fwupd-client.c:	val4 = g_dbus_proxy_get_cached_property(priv->proxy, "Interactive");
libfwupd/fwupd-client.c:		priv->interactive = g_variant_get_boolean(val4);
libfwupd/fwupd-client.c:	val5 = g_dbus_proxy_get_cached_property(priv->proxy, "HostProduct");
libfwupd/fwupd-client.c:	val6 = g_dbus_proxy_get_cached_property(priv->proxy, "HostMachineId");
libfwupd/fwupd-client.c:	val7 = g_dbus_proxy_get_cached_property(priv->proxy, "HostSecurityId");
libfwupd/fwupd-client.c:	g_autoptr(GMutexLocker) locker = g_mutex_locker_new(&priv->proxy_mutex);
libfwupd/fwupd-client.c:	if (priv->proxy != NULL) {
libfwupd/fwupd-client.c:	g_return_if_fail(priv->proxy != NULL);
libfwupd/fwupd-client.c:	g_dbus_proxy_call(priv->proxy,
libfwupd/fwupd-client.c:	g_return_if_fail(priv->proxy != NULL);
libfwupd/fwupd-client.c:	g_dbus_proxy_call(priv->proxy,
libfwupd/fwupd-client.c:	g_return_if_fail(priv->proxy != NULL);
libfwupd/fwupd-client.c:	g_dbus_proxy_call(priv->proxy,
libfwupd/fwupd-client.c:	g_return_if_fail(priv->proxy != NULL);
libfwupd/fwupd-client.c:	g_dbus_proxy_call(priv->proxy,
libfwupd/fwupd-client.c:	g_return_if_fail(priv->proxy != NULL);
libfwupd/fwupd-client.c:	g_dbus_proxy_call(priv->proxy,
libfwupd/fwupd-client.c:	g_return_if_fail(priv->proxy != NULL);
libfwupd/fwupd-client.c:	g_return_if_fail(priv->proxy != NULL);
libfwupd/fwupd-client.c:	g_return_if_fail(priv->proxy != NULL);
libfwupd/fwupd-client.c:	g_dbus_proxy_call(priv->proxy,
libfwupd/fwupd-client.c:	g_return_if_fail(priv->proxy != NULL);
libfwupd/fwupd-client.c:	g_dbus_proxy_call(priv->proxy,
libfwupd/fwupd-client.c:	g_return_if_fail(priv->proxy != NULL);
libfwupd/fwupd-client.c:	g_dbus_proxy_call(priv->proxy,
libfwupd/fwupd-client.c:	g_return_if_fail(priv->proxy != NULL);
libfwupd/fwupd-client.c:	g_dbus_proxy_call(priv->proxy,
libfwupd/fwupd-client.c:	g_return_if_fail(priv->proxy != NULL);
libfwupd/fwupd-client.c:	g_dbus_proxy_call(priv->proxy,
libfwupd/fwupd-client.c:	g_return_if_fail(priv->proxy != NULL);
libfwupd/fwupd-client.c:	g_dbus_proxy_call(priv->proxy,
libfwupd/fwupd-client.c:	g_return_if_fail(priv->proxy != NULL);
libfwupd/fwupd-client.c:	g_dbus_proxy_call(priv->proxy,
libfwupd/fwupd-client.c:	g_return_if_fail(priv->proxy != NULL);
libfwupd/fwupd-client.c:	g_dbus_proxy_call(priv->proxy,
libfwupd/fwupd-client.c:	g_return_if_fail(priv->proxy != NULL);
libfwupd/fwupd-client.c:	g_dbus_proxy_call(priv->proxy,
libfwupd/fwupd-client.c:	g_return_if_fail(priv->proxy != NULL);
libfwupd/fwupd-client.c:	g_dbus_proxy_call(priv->proxy,
libfwupd/fwupd-client.c:	g_dbus_connection_send_message_with_reply(g_dbus_proxy_get_connection(priv->proxy),
libfwupd/fwupd-client.c:	g_return_if_fail(priv->proxy != NULL);
libfwupd/fwupd-client.c:	g_return_if_fail(priv->proxy != NULL);
libfwupd/fwupd-client.c:	g_return_if_fail(priv->proxy != NULL);
libfwupd/fwupd-client.c:	g_dbus_connection_send_message_with_reply(g_dbus_proxy_get_connection(priv->proxy),
libfwupd/fwupd-client.c:	g_return_if_fail(priv->proxy != NULL);
libfwupd/fwupd-client.c:	return priv->percentage;
libfwupd/fwupd-client.c:	return priv->daemon_version;
libfwupd/fwupd-client.c:	return priv->host_product;
libfwupd/fwupd-client.c:	return priv->host_machine_id;
libfwupd/fwupd-client.c:	return priv->host_security_id;
libfwupd/fwupd-client.c:	return priv->status;
libfwupd/fwupd-client.c:	return priv->tainted;
libfwupd/fwupd-client.c:	return priv->interactive;
libfwupd/fwupd-client.c:	g_dbus_connection_send_message_with_reply(g_dbus_proxy_get_connection(priv->proxy),
libfwupd/fwupd-client.c:	g_return_if_fail(priv->proxy != NULL);
libfwupd/fwupd-client.c:	g_return_if_fail(priv->proxy != NULL);
libfwupd/fwupd-client.c:	g_dbus_proxy_call(priv->proxy,
libfwupd/fwupd-client.c:	g_return_if_fail(priv->proxy != NULL);
libfwupd/fwupd-client.c:	g_dbus_proxy_call(priv->proxy,
libfwupd/fwupd-client.c:	g_return_if_fail(priv->proxy != NULL);
libfwupd/fwupd-client.c:	g_dbus_proxy_call(priv->proxy,
libfwupd/fwupd-client.c:	g_return_if_fail(priv->proxy != NULL);
libfwupd/fwupd-client.c:	g_dbus_proxy_call(priv->proxy,
libfwupd/fwupd-client.c:	g_return_if_fail(priv->proxy != NULL);
libfwupd/fwupd-client.c:	g_dbus_proxy_call(priv->proxy,
libfwupd/fwupd-client.c:	g_return_if_fail(priv->proxy != NULL);
libfwupd/fwupd-client.c:	g_dbus_proxy_call(priv->proxy,
libfwupd/fwupd-client.c:	g_return_if_fail(priv->proxy != NULL);
libfwupd/fwupd-client.c:	g_dbus_proxy_call(priv->proxy,
libfwupd/fwupd-client.c:	g_return_if_fail(priv->proxy != NULL);
libfwupd/fwupd-client.c:	g_dbus_proxy_call(priv->proxy,
libfwupd/fwupd-client.c:	g_return_if_fail(priv->proxy != NULL);
libfwupd/fwupd-client.c:	g_dbus_proxy_call(priv->proxy,
libfwupd/fwupd-client.c:	g_return_if_fail(priv->proxy != NULL);
libfwupd/fwupd-client.c:	if (g_strcmp0(priv->user_agent, user_agent) == 0)
libfwupd/fwupd-client.c:	g_free(priv->user_agent);
libfwupd/fwupd-client.c:	priv->user_agent = g_strdup(user_agent);
libfwupd/fwupd-client.c:	return priv->user_agent;
libfwupd/fwupd-client.c:		g_string_append_printf(str, " fwupd/%s", priv->daemon_version);
libfwupd/fwupd-client.c:	g_free(priv->user_agent);
libfwupd/fwupd-client.c:	priv->user_agent = g_string_free(str, FALSE);
libfwupd/fwupd-client.c:	g_return_if_fail(priv->proxy != NULL);
libfwupd/fwupd-client.c:	g_return_if_fail(priv->proxy != NULL);
libfwupd/fwupd-client.c:	g_return_if_fail(priv->proxy != NULL);
libfwupd/fwupd-client.c:	if (priv->soup_session != NULL)
libfwupd/fwupd-client.c:		priv->soup_session = g_object_new(soup_gtype, NULL);
libfwupd/fwupd-client.c:	if (priv->soup_module == NULL) {
libfwupd/fwupd-client.c:		priv->soup_module = g_module_open(fn, G_MODULE_BIND_LAZY);
libfwupd/fwupd-client.c:		if (priv->soup_module == NULL) {
libfwupd/fwupd-client.c:	if (!g_module_symbol(priv->soup_module, "soup_session_new", (gpointer *)&func)) {
libfwupd/fwupd-client.c:		g_module_close(priv->soup_module);
libfwupd/fwupd-client.c:		priv->soup_module = NULL;
libfwupd/fwupd-client.c:	priv->soup_session = func();
libfwupd/fwupd-client.c:	g_object_set(priv->soup_session, "timeout", (guint)60, NULL);
libfwupd/fwupd-client.c:		g_value_set_uint(value, priv->status);
libfwupd/fwupd-client.c:		g_value_set_boolean(value, priv->tainted);
libfwupd/fwupd-client.c:		g_value_set_object(value, priv->soup_session);
libfwupd/fwupd-client.c:		g_value_set_uint(value, priv->percentage);
libfwupd/fwupd-client.c:		g_value_set_string(value, priv->daemon_version);
libfwupd/fwupd-client.c:		g_value_set_string(value, priv->host_product);
libfwupd/fwupd-client.c:		g_value_set_string(value, priv->host_machine_id);
libfwupd/fwupd-client.c:		g_value_set_string(value, priv->host_security_id);
libfwupd/fwupd-client.c:		g_value_set_boolean(value, priv->interactive);
libfwupd/fwupd-client.c:		priv->status = g_value_get_uint(value);
libfwupd/fwupd-client.c:		priv->percentage = g_value_get_uint(value);
libfwupd/fwupd-client.c:	g_mutex_init(&priv->proxy_mutex);
libfwupd/fwupd-client.c:	g_mutex_init(&priv->idle_mutex);
libfwupd/fwupd-client.c:	priv->idle_sources =
libfwupd/fwupd-client.c:	priv->proxy_resolver = g_proxy_resolver_get_default();
libfwupd/fwupd-client.c:	g_clear_pointer(&priv->main_ctx, g_main_context_unref);
libfwupd/fwupd-client.c:	g_free(priv->user_agent);
libfwupd/fwupd-client.c:	g_free(priv->daemon_version);
libfwupd/fwupd-client.c:	g_free(priv->host_product);
libfwupd/fwupd-client.c:	g_free(priv->host_machine_id);
libfwupd/fwupd-client.c:	g_free(priv->host_security_id);
libfwupd/fwupd-client.c:	g_mutex_clear(&priv->idle_mutex);
libfwupd/fwupd-client.c:	if (priv->idle_id != 0)
libfwupd/fwupd-client.c:		g_source_remove(priv->idle_id);
libfwupd/fwupd-client.c:	g_ptr_array_unref(priv->idle_sources);
libfwupd/fwupd-client.c:	g_mutex_clear(&priv->proxy_mutex);
libfwupd/fwupd-client.c:	if (priv->proxy != NULL)
libfwupd/fwupd-client.c:		g_object_unref(priv->proxy);
libfwupd/fwupd-client.c:	if (priv->soup_session != NULL)
libfwupd/fwupd-client.c:		g_object_unref(priv->soup_session);
libfwupd/fwupd-device.c:	return priv->checksums;
libfwupd/fwupd-device.c:	for (guint i = 0; i < priv->checksums->len; i++) {
libfwupd/fwupd-device.c:		const gchar *checksum_tmp = g_ptr_array_index(priv->checksums, i);
libfwupd/fwupd-device.c:	g_ptr_array_add(priv->checksums, g_strdup(checksum));
libfwupd/fwupd-device.c:	return priv->children;
libfwupd/fwupd-device.c:	return priv->summary;
libfwupd/fwupd-device.c:	if (g_strcmp0(priv->summary, summary) == 0)
libfwupd/fwupd-device.c:	g_free(priv->summary);
libfwupd/fwupd-device.c:	priv->summary = g_strdup(summary);
libfwupd/fwupd-device.c:	return priv->branch;
libfwupd/fwupd-device.c:	if (g_strcmp0(priv->branch, branch) == 0)
libfwupd/fwupd-device.c:	g_free(priv->branch);
libfwupd/fwupd-device.c:	priv->branch = g_strdup(branch);
libfwupd/fwupd-device.c:	return priv->serial;
libfwupd/fwupd-device.c:	if (g_strcmp0(priv->serial, serial) == 0)
libfwupd/fwupd-device.c:	g_free(priv->serial);
libfwupd/fwupd-device.c:	priv->serial = g_strdup(serial);
libfwupd/fwupd-device.c:	return priv->id;
libfwupd/fwupd-device.c:	if (g_strcmp0(priv->id, id) == 0)
libfwupd/fwupd-device.c:	g_free(priv->id);
libfwupd/fwupd-device.c:	priv->id = g_strdup(id);
libfwupd/fwupd-device.c:	return priv->parent_id;
libfwupd/fwupd-device.c:	if (g_strcmp0(priv->parent_id, parent_id) == 0)
libfwupd/fwupd-device.c:	g_free(priv->parent_id);
libfwupd/fwupd-device.c:	priv->parent_id = g_strdup(parent_id);
libfwupd/fwupd-device.c:	if (priv->composite_id != NULL)
libfwupd/fwupd-device.c:		return priv->composite_id;
libfwupd/fwupd-device.c:	return priv->id;
libfwupd/fwupd-device.c:	if (g_strcmp0(priv->composite_id, composite_id) == 0)
libfwupd/fwupd-device.c:	g_free(priv->composite_id);
libfwupd/fwupd-device.c:	priv->composite_id = g_strdup(composite_id);
libfwupd/fwupd-device.c:	return priv->parent;
libfwupd/fwupd-device.c:	if (priv->parent != NULL)
libfwupd/fwupd-device.c:		g_object_remove_weak_pointer(G_OBJECT(priv->parent), (gpointer *)&priv->parent);
libfwupd/fwupd-device.c:		g_object_add_weak_pointer(G_OBJECT(parent), (gpointer *)&priv->parent);
libfwupd/fwupd-device.c:	priv->parent = parent;
libfwupd/fwupd-device.c:	for (guint i = 0; i < priv->children->len; i++) {
libfwupd/fwupd-device.c:		FwupdDevice *devtmp = g_ptr_array_index(priv->children, i);
libfwupd/fwupd-device.c:	g_ptr_array_add(priv->children, g_object_ref(child));
libfwupd/fwupd-device.c:	for (guint i = 0; i < priv->children->len; i++) {
libfwupd/fwupd-device.c:		FwupdDevice *child_tmp = g_ptr_array_index(priv->children, i);
libfwupd/fwupd-device.c:			g_ptr_array_remove_index(priv->children, i);
libfwupd/fwupd-device.c:	return priv->guids;
libfwupd/fwupd-device.c:	for (guint i = 0; i < priv->guids->len; i++) {
libfwupd/fwupd-device.c:		const gchar *guid_tmp = g_ptr_array_index(priv->guids, i);
libfwupd/fwupd-device.c:	g_ptr_array_add(priv->guids, g_strdup(guid));
libfwupd/fwupd-device.c:	if (priv->guids->len == 0)
libfwupd/fwupd-device.c:	return g_ptr_array_index(priv->guids, 0);
libfwupd/fwupd-device.c:	return priv->instance_ids;
libfwupd/fwupd-device.c:	for (guint i = 0; i < priv->instance_ids->len; i++) {
libfwupd/fwupd-device.c:		const gchar *instance_id_tmp = g_ptr_array_index(priv->instance_ids, i);
libfwupd/fwupd-device.c:	g_ptr_array_add(priv->instance_ids, g_strdup(instance_id));
libfwupd/fwupd-device.c:	return priv->icons;
libfwupd/fwupd-device.c:	for (guint i = 0; i < priv->icons->len; i++) {
libfwupd/fwupd-device.c:		const gchar *icon_tmp = g_ptr_array_index(priv->icons, i);
libfwupd/fwupd-device.c:	g_ptr_array_add(priv->icons, g_strdup(icon));
libfwupd/fwupd-device.c:	return priv->name;
libfwupd/fwupd-device.c:	if (g_strcmp0(priv->name, name) == 0)
libfwupd/fwupd-device.c:	g_free(priv->name);
libfwupd/fwupd-device.c:	priv->name = g_strdup(name);
libfwupd/fwupd-device.c:	return priv->vendor;
libfwupd/fwupd-device.c:	if (g_strcmp0(priv->vendor, vendor) == 0)
libfwupd/fwupd-device.c:	g_free(priv->vendor);
libfwupd/fwupd-device.c:	priv->vendor = g_strdup(vendor);
libfwupd/fwupd-device.c:	return priv->vendor_id;
libfwupd/fwupd-device.c:	return priv->vendor_ids;
libfwupd/fwupd-device.c:	for (guint i = 0; i < priv->vendor_ids->len; i++) {
libfwupd/fwupd-device.c:		const gchar *vendor_id_tmp = g_ptr_array_index(priv->vendor_ids, i);
libfwupd/fwupd-device.c:	g_ptr_array_add(priv->vendor_ids, g_strdup(vendor_id));
libfwupd/fwupd-device.c:	vendor_ids_tmp = g_new0(gchar *, priv->vendor_ids->len + 1);
libfwupd/fwupd-device.c:	for (guint i = 0; i < priv->vendor_ids->len; i++) {
libfwupd/fwupd-device.c:		const gchar *vendor_id_tmp = g_ptr_array_index(priv->vendor_ids, i);
libfwupd/fwupd-device.c:	g_free(priv->vendor_id);
libfwupd/fwupd-device.c:	priv->vendor_id = g_strjoinv("|", vendor_ids_tmp);
libfwupd/fwupd-device.c:	return priv->description;
libfwupd/fwupd-device.c:	if (g_strcmp0(priv->description, description) == 0)
libfwupd/fwupd-device.c:	g_free(priv->description);
libfwupd/fwupd-device.c:	priv->description = g_strdup(description);
libfwupd/fwupd-device.c:	return priv->version;
libfwupd/fwupd-device.c:	if (g_strcmp0(priv->version, version) == 0)
libfwupd/fwupd-device.c:	g_free(priv->version);
libfwupd/fwupd-device.c:	priv->version = g_strdup(version);
libfwupd/fwupd-device.c:	return priv->version_lowest;
libfwupd/fwupd-device.c:	if (g_strcmp0(priv->version_lowest, version_lowest) == 0)
libfwupd/fwupd-device.c:	g_free(priv->version_lowest);
libfwupd/fwupd-device.c:	priv->version_lowest = g_strdup(version_lowest);
libfwupd/fwupd-device.c:	return priv->version_lowest_raw;
libfwupd/fwupd-device.c:	priv->version_lowest_raw = version_lowest_raw;
libfwupd/fwupd-device.c:	return priv->version_bootloader;
libfwupd/fwupd-device.c:	if (g_strcmp0(priv->version_bootloader, version_bootloader) == 0)
libfwupd/fwupd-device.c:	g_free(priv->version_bootloader);
libfwupd/fwupd-device.c:	priv->version_bootloader = g_strdup(version_bootloader);
libfwupd/fwupd-device.c:	return priv->version_bootloader_raw;
libfwupd/fwupd-device.c:	priv->version_bootloader_raw = version_bootloader_raw;
libfwupd/fwupd-device.c:	return priv->flashes_left;
libfwupd/fwupd-device.c:	priv->flashes_left = flashes_left;
libfwupd/fwupd-device.c:	return priv->install_duration;
libfwupd/fwupd-device.c:	priv->install_duration = duration;
libfwupd/fwupd-device.c:	return priv->plugin;
libfwupd/fwupd-device.c:	if (g_strcmp0(priv->plugin, plugin) == 0)
libfwupd/fwupd-device.c:	g_free(priv->plugin);
libfwupd/fwupd-device.c:	priv->plugin = g_strdup(plugin);
libfwupd/fwupd-device.c:	return priv->protocol;
libfwupd/fwupd-device.c:	return priv->protocols;
libfwupd/fwupd-device.c:	for (guint i = 0; i < priv->protocols->len; i++) {
libfwupd/fwupd-device.c:		const gchar *protocol_tmp = g_ptr_array_index(priv->protocols, i);
libfwupd/fwupd-device.c:	g_ptr_array_add(priv->protocols, g_strdup(protocol));
libfwupd/fwupd-device.c:	protocols_tmp = g_new0(gchar *, priv->protocols->len + 1);
libfwupd/fwupd-device.c:	for (guint i = 0; i < priv->protocols->len; i++) {
libfwupd/fwupd-device.c:		const gchar *protocol_tmp = g_ptr_array_index(priv->protocols, i);
libfwupd/fwupd-device.c:	g_free(priv->protocol);
libfwupd/fwupd-device.c:	priv->protocol = g_strjoinv("|", protocols_tmp);
libfwupd/fwupd-device.c:	return priv->flags;
libfwupd/fwupd-device.c:	if (priv->flags == flags)
libfwupd/fwupd-device.c:	priv->flags = flags;
libfwupd/fwupd-device.c:	if ((priv->flags | flag) == priv->flags)
libfwupd/fwupd-device.c:	priv->flags |= flag;
libfwupd/fwupd-device.c:	if ((priv->flags & flag) == 0)
libfwupd/fwupd-device.c:	priv->flags &= ~flag;
libfwupd/fwupd-device.c:	return (priv->flags & flag) > 0;
libfwupd/fwupd-device.c:	return priv->created;
libfwupd/fwupd-device.c:	priv->created = created;
libfwupd/fwupd-device.c:	return priv->modified;
libfwupd/fwupd-device.c:	priv->modified = modified;
libfwupd/fwupd-device.c:	if (priv->created == 0)
libfwupd/fwupd-device.c:	if (priv->modified == 0)
libfwupd/fwupd-device.c:	if (priv->version_build_date == 0)
libfwupd/fwupd-device.c:	if (priv->flashes_left == 0)
libfwupd/fwupd-device.c:	if (priv->install_duration == 0)
libfwupd/fwupd-device.c:	if (priv->update_state == FWUPD_UPDATE_STATE_UNKNOWN)
libfwupd/fwupd-device.c:	if (priv->description == NULL)
libfwupd/fwupd-device.c:	if (priv->id == NULL)
libfwupd/fwupd-device.c:	if (priv->parent_id == NULL)
libfwupd/fwupd-device.c:	if (priv->composite_id == NULL)
libfwupd/fwupd-device.c:	if (priv->name == NULL)
libfwupd/fwupd-device.c:	if (priv->serial == NULL)
libfwupd/fwupd-device.c:	if (priv->summary == NULL)
libfwupd/fwupd-device.c:	if (priv->branch == NULL)
libfwupd/fwupd-device.c:	if (priv->vendor == NULL)
libfwupd/fwupd-device.c:	if (priv->plugin == NULL)
libfwupd/fwupd-device.c:	if (priv->update_error == NULL)
libfwupd/fwupd-device.c:	if (priv->update_message == NULL)
libfwupd/fwupd-device.c:	if (priv->update_image == NULL)
libfwupd/fwupd-device.c:	if (priv->version == NULL)
libfwupd/fwupd-device.c:	if (priv->version_lowest == NULL)
libfwupd/fwupd-device.c:	if (priv->version_bootloader == NULL)
libfwupd/fwupd-device.c:	if (priv->version_format == FWUPD_VERSION_FORMAT_UNKNOWN)
libfwupd/fwupd-device.c:	if (priv->version_raw == 0)
libfwupd/fwupd-device.c:	if (priv->version_lowest_raw == 0)
libfwupd/fwupd-device.c:	if (priv->version_bootloader_raw == 0)
libfwupd/fwupd-device.c:	if (priv->id != NULL) {
libfwupd/fwupd-device.c:				      g_variant_new_string(priv->id));
libfwupd/fwupd-device.c:	if (priv->parent_id != NULL) {
libfwupd/fwupd-device.c:				      g_variant_new_string(priv->parent_id));
libfwupd/fwupd-device.c:	if (priv->composite_id != NULL) {
libfwupd/fwupd-device.c:				      g_variant_new_string(priv->composite_id));
libfwupd/fwupd-device.c:	if (priv->guids->len > 0) {
libfwupd/fwupd-device.c:		const gchar *const *tmp = (const gchar *const *)priv->guids->pdata;
libfwupd/fwupd-device.c:				      g_variant_new_strv(tmp, priv->guids->len));
libfwupd/fwupd-device.c:	if (priv->icons->len > 0) {
libfwupd/fwupd-device.c:		const gchar *const *tmp = (const gchar *const *)priv->icons->pdata;
libfwupd/fwupd-device.c:				      g_variant_new_strv(tmp, priv->icons->len));
libfwupd/fwupd-device.c:	if (priv->name != NULL) {
libfwupd/fwupd-device.c:				      g_variant_new_string(priv->name));
libfwupd/fwupd-device.c:	if (priv->vendor != NULL) {
libfwupd/fwupd-device.c:				      g_variant_new_string(priv->vendor));
libfwupd/fwupd-device.c:	if (priv->vendor_ids->len > 0) {
libfwupd/fwupd-device.c:		for (guint i = 0; i < priv->vendor_ids->len; i++) {
libfwupd/fwupd-device.c:			const gchar *tmp = g_ptr_array_index(priv->vendor_ids, i);
libfwupd/fwupd-device.c:	if (priv->flags > 0) {
libfwupd/fwupd-device.c:				      g_variant_new_uint64(priv->flags));
libfwupd/fwupd-device.c:	if (priv->created > 0) {
libfwupd/fwupd-device.c:				      g_variant_new_uint64(priv->created));
libfwupd/fwupd-device.c:	if (priv->modified > 0) {
libfwupd/fwupd-device.c:				      g_variant_new_uint64(priv->modified));
libfwupd/fwupd-device.c:	if (priv->version_build_date > 0) {
libfwupd/fwupd-device.c:				      g_variant_new_uint64(priv->version_build_date));
libfwupd/fwupd-device.c:	if (priv->description != NULL) {
libfwupd/fwupd-device.c:				      g_variant_new_string(priv->description));
libfwupd/fwupd-device.c:	if (priv->summary != NULL) {
libfwupd/fwupd-device.c:				      g_variant_new_string(priv->summary));
libfwupd/fwupd-device.c:	if (priv->branch != NULL) {
libfwupd/fwupd-device.c:				      g_variant_new_string(priv->branch));
libfwupd/fwupd-device.c:	if (priv->checksums->len > 0) {
libfwupd/fwupd-device.c:		for (guint i = 0; i < priv->checksums->len; i++) {
libfwupd/fwupd-device.c:			const gchar *checksum = g_ptr_array_index(priv->checksums, i);
libfwupd/fwupd-device.c:	if (priv->plugin != NULL) {
libfwupd/fwupd-device.c:				      g_variant_new_string(priv->plugin));
libfwupd/fwupd-device.c:	if (priv->protocols->len > 0) {
libfwupd/fwupd-device.c:		for (guint i = 0; i < priv->protocols->len; i++) {
libfwupd/fwupd-device.c:			const gchar *tmp = g_ptr_array_index(priv->protocols, i);
libfwupd/fwupd-device.c:	if (priv->version != NULL) {
libfwupd/fwupd-device.c:				      g_variant_new_string(priv->version));
libfwupd/fwupd-device.c:	if (priv->version_lowest != NULL) {
libfwupd/fwupd-device.c:				      g_variant_new_string(priv->version_lowest));
libfwupd/fwupd-device.c:	if (priv->version_bootloader != NULL) {
libfwupd/fwupd-device.c:				      g_variant_new_string(priv->version_bootloader));
libfwupd/fwupd-device.c:	if (priv->version_raw > 0) {
libfwupd/fwupd-device.c:				      g_variant_new_uint64(priv->version_raw));
libfwupd/fwupd-device.c:	if (priv->version_lowest_raw > 0) {
libfwupd/fwupd-device.c:				      g_variant_new_uint64(priv->version_raw));
libfwupd/fwupd-device.c:	if (priv->version_bootloader_raw > 0) {
libfwupd/fwupd-device.c:				      g_variant_new_uint64(priv->version_raw));
libfwupd/fwupd-device.c:	if (priv->flashes_left > 0) {
libfwupd/fwupd-device.c:				      g_variant_new_uint32(priv->flashes_left));
libfwupd/fwupd-device.c:	if (priv->install_duration > 0) {
libfwupd/fwupd-device.c:				      g_variant_new_uint32(priv->install_duration));
libfwupd/fwupd-device.c:	if (priv->update_error != NULL) {
libfwupd/fwupd-device.c:				      g_variant_new_string(priv->update_error));
libfwupd/fwupd-device.c:	if (priv->update_message != NULL) {
libfwupd/fwupd-device.c:				      g_variant_new_string(priv->update_message));
libfwupd/fwupd-device.c:	if (priv->update_image != NULL) {
libfwupd/fwupd-device.c:				      g_variant_new_string(priv->update_image));
libfwupd/fwupd-device.c:	if (priv->update_state != FWUPD_UPDATE_STATE_UNKNOWN) {
libfwupd/fwupd-device.c:				      g_variant_new_uint32(priv->update_state));
libfwupd/fwupd-device.c:	if (priv->status != FWUPD_STATUS_UNKNOWN) {
libfwupd/fwupd-device.c:				      g_variant_new_uint32(priv->status));
libfwupd/fwupd-device.c:	if (priv->version_format != FWUPD_VERSION_FORMAT_UNKNOWN) {
libfwupd/fwupd-device.c:				      g_variant_new_uint32(priv->version_format));
libfwupd/fwupd-device.c:		if (priv->serial != NULL) {
libfwupd/fwupd-device.c:					      g_variant_new_string(priv->serial));
libfwupd/fwupd-device.c:		if (priv->instance_ids->len > 0) {
libfwupd/fwupd-device.c:			const gchar *const *tmp = (const gchar *const *)priv->instance_ids->pdata;
libfwupd/fwupd-device.c:					      g_variant_new_strv(tmp, priv->instance_ids->len));
libfwupd/fwupd-device.c:	if (priv->releases->len > 0) {
libfwupd/fwupd-device.c:		children = g_new0(GVariant *, priv->releases->len);
libfwupd/fwupd-device.c:		for (guint i = 0; i < priv->releases->len; i++) {
libfwupd/fwupd-device.c:			FwupdRelease *release = g_ptr_array_index(priv->releases, i);
libfwupd/fwupd-device.c:		    g_variant_new_array(G_VARIANT_TYPE("a{sv}"), children, priv->releases->len));
libfwupd/fwupd-device.c:	return priv->update_state;
libfwupd/fwupd-device.c:	if (priv->update_state == update_state)
libfwupd/fwupd-device.c:	priv->update_state = update_state;
libfwupd/fwupd-device.c:	return priv->version_format;
libfwupd/fwupd-device.c:	priv->version_format = version_format;
libfwupd/fwupd-device.c:	return priv->version_raw;
libfwupd/fwupd-device.c:	priv->version_raw = version_raw;
libfwupd/fwupd-device.c:	return priv->version_build_date;
libfwupd/fwupd-device.c:	priv->version_build_date = version_build_date;
libfwupd/fwupd-device.c:	return priv->update_message;
libfwupd/fwupd-device.c:	if (g_strcmp0(priv->update_message, update_message) == 0)
libfwupd/fwupd-device.c:	g_free(priv->update_message);
libfwupd/fwupd-device.c:	priv->update_message = g_strdup(update_message);
libfwupd/fwupd-device.c:	return priv->update_image;
libfwupd/fwupd-device.c:	if (g_strcmp0(priv->update_image, update_image) == 0)
libfwupd/fwupd-device.c:	g_free(priv->update_image);
libfwupd/fwupd-device.c:	priv->update_image = g_strdup(update_image);
libfwupd/fwupd-device.c:	return priv->update_error;
libfwupd/fwupd-device.c:	if (g_strcmp0(priv->update_error, update_error) == 0)
libfwupd/fwupd-device.c:	g_free(priv->update_error);
libfwupd/fwupd-device.c:	priv->update_error = g_strdup(update_error);
libfwupd/fwupd-device.c:	if (priv->releases->len == 0)
libfwupd/fwupd-device.c:	return FWUPD_RELEASE(g_ptr_array_index(priv->releases, 0));
libfwupd/fwupd-device.c:	return priv->releases;
libfwupd/fwupd-device.c:	g_ptr_array_add(priv->releases, g_object_ref(release));
libfwupd/fwupd-device.c:	return priv->status;
libfwupd/fwupd-device.c:	if (priv->status == status)
libfwupd/fwupd-device.c:	priv->status = status;
libfwupd/fwupd-device.c:	fwupd_common_json_add_string(builder, FWUPD_RESULT_KEY_NAME, priv->name);
libfwupd/fwupd-device.c:	fwupd_common_json_add_string(builder, FWUPD_RESULT_KEY_DEVICE_ID, priv->id);
libfwupd/fwupd-device.c:	fwupd_common_json_add_string(builder, FWUPD_RESULT_KEY_PARENT_DEVICE_ID, priv->parent_id);
libfwupd/fwupd-device.c:	fwupd_common_json_add_string(builder, FWUPD_RESULT_KEY_COMPOSITE_ID, priv->composite_id);
libfwupd/fwupd-device.c:	if (priv->guids->len > 0) {
libfwupd/fwupd-device.c:		for (guint i = 0; i < priv->guids->len; i++) {
libfwupd/fwupd-device.c:			const gchar *guid = g_ptr_array_index(priv->guids, i);
libfwupd/fwupd-device.c:	fwupd_common_json_add_string(builder, FWUPD_RESULT_KEY_SERIAL, priv->serial);
libfwupd/fwupd-device.c:	fwupd_common_json_add_string(builder, FWUPD_RESULT_KEY_SUMMARY, priv->summary);
libfwupd/fwupd-device.c:	fwupd_common_json_add_string(builder, FWUPD_RESULT_KEY_DESCRIPTION, priv->description);
libfwupd/fwupd-device.c:	fwupd_common_json_add_string(builder, FWUPD_RESULT_KEY_BRANCH, priv->branch);
libfwupd/fwupd-device.c:	fwupd_common_json_add_string(builder, FWUPD_RESULT_KEY_PLUGIN, priv->plugin);
libfwupd/fwupd-device.c:	fwupd_common_json_add_string(builder, FWUPD_RESULT_KEY_PROTOCOL, priv->protocol);
libfwupd/fwupd-device.c:	if (priv->protocols->len > 1) { /* --> 0 when bumping API */
libfwupd/fwupd-device.c:		for (guint i = 0; i < priv->protocols->len; i++) {
libfwupd/fwupd-device.c:			const gchar *tmp = g_ptr_array_index(priv->protocols, i);
libfwupd/fwupd-device.c:	if (priv->flags != FWUPD_DEVICE_FLAG_NONE) {
libfwupd/fwupd-device.c:			if ((priv->flags & ((guint64)1 << i)) == 0)
libfwupd/fwupd-device.c:	if (priv->checksums->len > 0) {
libfwupd/fwupd-device.c:		for (guint i = 0; i < priv->checksums->len; i++) {
libfwupd/fwupd-device.c:			const gchar *checksum = g_ptr_array_index(priv->checksums, i);
libfwupd/fwupd-device.c:	fwupd_common_json_add_string(builder, FWUPD_RESULT_KEY_VENDOR, priv->vendor);
libfwupd/fwupd-device.c:	fwupd_common_json_add_string(builder, FWUPD_RESULT_KEY_VENDOR_ID, priv->vendor_id);
libfwupd/fwupd-device.c:	if (priv->vendor_ids->len > 1) { /* --> 0 when bumping API */
libfwupd/fwupd-device.c:		for (guint i = 0; i < priv->vendor_ids->len; i++) {
libfwupd/fwupd-device.c:			const gchar *tmp = g_ptr_array_index(priv->vendor_ids, i);
libfwupd/fwupd-device.c:	fwupd_common_json_add_string(builder, FWUPD_RESULT_KEY_VERSION, priv->version);
libfwupd/fwupd-device.c:				     priv->version_lowest);
libfwupd/fwupd-device.c:				     priv->version_bootloader);
libfwupd/fwupd-device.c:				     fwupd_version_format_to_string(priv->version_format));
libfwupd/fwupd-device.c:	if (priv->flashes_left > 0)
libfwupd/fwupd-device.c:					  priv->flashes_left);
libfwupd/fwupd-device.c:	if (priv->version_raw > 0)
libfwupd/fwupd-device.c:		fwupd_common_json_add_int(builder, FWUPD_RESULT_KEY_VERSION_RAW, priv->version_raw);
libfwupd/fwupd-device.c:	if (priv->version_lowest_raw > 0)
libfwupd/fwupd-device.c:					  priv->version_lowest_raw);
libfwupd/fwupd-device.c:	if (priv->version_bootloader_raw > 0)
libfwupd/fwupd-device.c:					  priv->version_bootloader_raw);
libfwupd/fwupd-device.c:	if (priv->version_build_date > 0)
libfwupd/fwupd-device.c:					  priv->version_build_date);
libfwupd/fwupd-device.c:	if (priv->icons->len > 0) {
libfwupd/fwupd-device.c:		for (guint i = 0; i < priv->icons->len; i++) {
libfwupd/fwupd-device.c:			const gchar *icon = g_ptr_array_index(priv->icons, i);
libfwupd/fwupd-device.c:	if (priv->install_duration > 0) {
libfwupd/fwupd-device.c:					  priv->install_duration);
libfwupd/fwupd-device.c:	if (priv->created > 0)
libfwupd/fwupd-device.c:		fwupd_common_json_add_int(builder, FWUPD_RESULT_KEY_CREATED, priv->created);
libfwupd/fwupd-device.c:	if (priv->modified > 0)
libfwupd/fwupd-device.c:		fwupd_common_json_add_int(builder, FWUPD_RESULT_KEY_MODIFIED, priv->modified);
libfwupd/fwupd-device.c:	if (priv->update_state > 0)
libfwupd/fwupd-device.c:					  priv->update_state);
libfwupd/fwupd-device.c:	if (priv->status > 0)
libfwupd/fwupd-device.c:		fwupd_common_json_add_int(builder, FWUPD_RESULT_KEY_STATUS, priv->status);
libfwupd/fwupd-device.c:	fwupd_common_json_add_string(builder, FWUPD_RESULT_KEY_UPDATE_ERROR, priv->update_error);
libfwupd/fwupd-device.c:				     priv->update_message);
libfwupd/fwupd-device.c:	fwupd_common_json_add_string(builder, FWUPD_RESULT_KEY_UPDATE_IMAGE, priv->update_image);
libfwupd/fwupd-device.c:	if (priv->releases->len > 0) {
libfwupd/fwupd-device.c:		for (guint i = 0; i < priv->releases->len; i++) {
libfwupd/fwupd-device.c:			FwupdRelease *release = g_ptr_array_index(priv->releases, i);
libfwupd/fwupd-device.c:	if (priv->name != NULL)
libfwupd/fwupd-device.c:		g_string_append_printf(str, "%s\n", priv->name);
libfwupd/fwupd-device.c:	fwupd_pad_kv_str(str, FWUPD_RESULT_KEY_DEVICE_ID, priv->id);
libfwupd/fwupd-device.c:	if (g_strcmp0(priv->composite_id, priv->parent_id) != 0)
libfwupd/fwupd-device.c:		fwupd_pad_kv_str(str, FWUPD_RESULT_KEY_PARENT_DEVICE_ID, priv->parent_id);
libfwupd/fwupd-device.c:	fwupd_pad_kv_str(str, FWUPD_RESULT_KEY_COMPOSITE_ID, priv->composite_id);
libfwupd/fwupd-device.c:	if (priv->status != FWUPD_STATUS_UNKNOWN) {
libfwupd/fwupd-device.c:				 fwupd_status_to_string(priv->status));
libfwupd/fwupd-device.c:	for (guint i = 0; i < priv->instance_ids->len; i++) {
libfwupd/fwupd-device.c:		const gchar *instance_id = g_ptr_array_index(priv->instance_ids, i);
libfwupd/fwupd-device.c:	for (guint i = 0; i < priv->guids->len; i++) {
libfwupd/fwupd-device.c:		const gchar *guid = g_ptr_array_index(priv->guids, i);
libfwupd/fwupd-device.c:	fwupd_pad_kv_str(str, FWUPD_RESULT_KEY_SERIAL, priv->serial);
libfwupd/fwupd-device.c:	fwupd_pad_kv_str(str, FWUPD_RESULT_KEY_SUMMARY, priv->summary);
libfwupd/fwupd-device.c:	fwupd_pad_kv_str(str, FWUPD_RESULT_KEY_DESCRIPTION, priv->description);
libfwupd/fwupd-device.c:	fwupd_pad_kv_str(str, FWUPD_RESULT_KEY_BRANCH, priv->branch);
libfwupd/fwupd-device.c:	fwupd_pad_kv_str(str, FWUPD_RESULT_KEY_PLUGIN, priv->plugin);
libfwupd/fwupd-device.c:	for (guint i = 0; i < priv->protocols->len; i++) {
libfwupd/fwupd-device.c:		const gchar *tmp = g_ptr_array_index(priv->protocols, i);
libfwupd/fwupd-device.c:	fwupd_pad_kv_dfl(str, FWUPD_RESULT_KEY_FLAGS, priv->flags);
libfwupd/fwupd-device.c:	for (guint i = 0; i < priv->checksums->len; i++) {
libfwupd/fwupd-device.c:		const gchar *checksum = g_ptr_array_index(priv->checksums, i);
libfwupd/fwupd-device.c:	fwupd_pad_kv_str(str, FWUPD_RESULT_KEY_VENDOR, priv->vendor);
libfwupd/fwupd-device.c:	for (guint i = 0; i < priv->vendor_ids->len; i++) {
libfwupd/fwupd-device.c:		const gchar *tmp = g_ptr_array_index(priv->vendor_ids, i);
libfwupd/fwupd-device.c:	fwupd_pad_kv_str(str, FWUPD_RESULT_KEY_VERSION, priv->version);
libfwupd/fwupd-device.c:	fwupd_pad_kv_str(str, FWUPD_RESULT_KEY_VERSION_LOWEST, priv->version_lowest);
libfwupd/fwupd-device.c:	fwupd_pad_kv_str(str, FWUPD_RESULT_KEY_VERSION_BOOTLOADER, priv->version_bootloader);
libfwupd/fwupd-device.c:			 fwupd_version_format_to_string(priv->version_format));
libfwupd/fwupd-device.c:	if (priv->flashes_left < 2)
libfwupd/fwupd-device.c:		fwupd_pad_kv_int(str, FWUPD_RESULT_KEY_FLASHES_LEFT, priv->flashes_left);
libfwupd/fwupd-device.c:	if (priv->version_raw > 0) {
libfwupd/fwupd-device.c:		g_autofree gchar *tmp = fwupd_device_verstr_raw(priv->version_raw);
libfwupd/fwupd-device.c:	if (priv->version_lowest_raw > 0) {
libfwupd/fwupd-device.c:		g_autofree gchar *tmp = fwupd_device_verstr_raw(priv->version_lowest_raw);
libfwupd/fwupd-device.c:	if (priv->version_build_date > 0) {
libfwupd/fwupd-device.c:				 priv->version_build_date);
libfwupd/fwupd-device.c:	if (priv->version_bootloader_raw > 0) {
libfwupd/fwupd-device.c:		g_autofree gchar *tmp = fwupd_device_verstr_raw(priv->version_bootloader_raw);
libfwupd/fwupd-device.c:	if (priv->icons->len > 0) {
libfwupd/fwupd-device.c:		for (guint i = 0; i < priv->icons->len; i++) {
libfwupd/fwupd-device.c:			const gchar *icon = g_ptr_array_index(priv->icons, i);
libfwupd/fwupd-device.c:	fwupd_pad_kv_int(str, FWUPD_RESULT_KEY_INSTALL_DURATION, priv->install_duration);
libfwupd/fwupd-device.c:	fwupd_pad_kv_unx(str, FWUPD_RESULT_KEY_CREATED, priv->created);
libfwupd/fwupd-device.c:	fwupd_pad_kv_unx(str, FWUPD_RESULT_KEY_MODIFIED, priv->modified);
libfwupd/fwupd-device.c:	fwupd_pad_kv_ups(str, FWUPD_RESULT_KEY_UPDATE_STATE, priv->update_state);
libfwupd/fwupd-device.c:	fwupd_pad_kv_str(str, FWUPD_RESULT_KEY_UPDATE_ERROR, priv->update_error);
libfwupd/fwupd-device.c:	fwupd_pad_kv_str(str, FWUPD_RESULT_KEY_UPDATE_MESSAGE, priv->update_message);
libfwupd/fwupd-device.c:	fwupd_pad_kv_str(str, FWUPD_RESULT_KEY_UPDATE_IMAGE, priv->update_image);
libfwupd/fwupd-device.c:	for (guint i = 0; i < priv->releases->len; i++) {
libfwupd/fwupd-device.c:		FwupdRelease *release = g_ptr_array_index(priv->releases, i);
libfwupd/fwupd-device.c:		g_value_set_uint(value, priv->version_format);
libfwupd/fwupd-device.c:		g_value_set_uint64(value, priv->flags);
libfwupd/fwupd-device.c:		g_value_set_string(value, priv->protocol);
libfwupd/fwupd-device.c:		g_value_set_string(value, priv->update_message);
libfwupd/fwupd-device.c:		g_value_set_string(value, priv->update_error);
libfwupd/fwupd-device.c:		g_value_set_string(value, priv->update_image);
libfwupd/fwupd-device.c:		g_value_set_uint(value, priv->status);
libfwupd/fwupd-device.c:		g_value_set_object(value, priv->parent);
libfwupd/fwupd-device.c:		g_value_set_uint(value, priv->update_state);
libfwupd/fwupd-device.c:	priv->guids = g_ptr_array_new_with_free_func(g_free);
libfwupd/fwupd-device.c:	priv->instance_ids = g_ptr_array_new_with_free_func(g_free);
libfwupd/fwupd-device.c:	priv->icons = g_ptr_array_new_with_free_func(g_free);
libfwupd/fwupd-device.c:	priv->checksums = g_ptr_array_new_with_free_func(g_free);
libfwupd/fwupd-device.c:	priv->vendor_ids = g_ptr_array_new_with_free_func(g_free);
libfwupd/fwupd-device.c:	priv->protocols = g_ptr_array_new_with_free_func(g_free);
libfwupd/fwupd-device.c:	priv->children = g_ptr_array_new_with_free_func((GDestroyNotify)g_object_unref);
libfwupd/fwupd-device.c:	priv->releases = g_ptr_array_new_with_free_func((GDestroyNotify)g_object_unref);
libfwupd/fwupd-device.c:	if (priv->parent != NULL)
libfwupd/fwupd-device.c:		g_object_remove_weak_pointer(G_OBJECT(priv->parent), (gpointer *)&priv->parent);
libfwupd/fwupd-device.c:	for (guint i = 0; i < priv->children->len; i++) {
libfwupd/fwupd-device.c:		FwupdDevice *child = g_ptr_array_index(priv->children, i);
libfwupd/fwupd-device.c:	g_free(priv->description);
libfwupd/fwupd-device.c:	g_free(priv->id);
libfwupd/fwupd-device.c:	g_free(priv->parent_id);
libfwupd/fwupd-device.c:	g_free(priv->composite_id);
libfwupd/fwupd-device.c:	g_free(priv->name);
libfwupd/fwupd-device.c:	g_free(priv->serial);
libfwupd/fwupd-device.c:	g_free(priv->summary);
libfwupd/fwupd-device.c:	g_free(priv->branch);
libfwupd/fwupd-device.c:	g_free(priv->vendor);
libfwupd/fwupd-device.c:	g_free(priv->vendor_id);
libfwupd/fwupd-device.c:	g_free(priv->plugin);
libfwupd/fwupd-device.c:	g_free(priv->protocol);
libfwupd/fwupd-device.c:	g_free(priv->update_error);
libfwupd/fwupd-device.c:	g_free(priv->update_message);
libfwupd/fwupd-device.c:	g_free(priv->update_image);
libfwupd/fwupd-device.c:	g_free(priv->version);
libfwupd/fwupd-device.c:	g_free(priv->version_lowest);
libfwupd/fwupd-device.c:	g_free(priv->version_bootloader);
libfwupd/fwupd-device.c:	g_ptr_array_unref(priv->guids);
libfwupd/fwupd-device.c:	g_ptr_array_unref(priv->vendor_ids);
libfwupd/fwupd-device.c:	g_ptr_array_unref(priv->protocols);
libfwupd/fwupd-device.c:	g_ptr_array_unref(priv->instance_ids);
libfwupd/fwupd-device.c:	g_ptr_array_unref(priv->icons);
libfwupd/fwupd-device.c:	g_ptr_array_unref(priv->checksums);
libfwupd/fwupd-device.c:	g_ptr_array_unref(priv->children);
libfwupd/fwupd-device.c:	g_ptr_array_unref(priv->releases);
libfwupd/fwupd-plugin.c:	return priv->name;
libfwupd/fwupd-plugin.c:	if (g_strcmp0(priv->name, name) == 0)
libfwupd/fwupd-plugin.c:	g_free(priv->name);
libfwupd/fwupd-plugin.c:	priv->name = g_strdup(name);
libfwupd/fwupd-plugin.c:	return priv->flags;
libfwupd/fwupd-plugin.c:	if (priv->flags == flags)
libfwupd/fwupd-plugin.c:	priv->flags = flags;
libfwupd/fwupd-plugin.c:	if ((priv->flags & flag) > 0)
libfwupd/fwupd-plugin.c:	priv->flags |= flag;
libfwupd/fwupd-plugin.c:	if ((priv->flags & flag) == 0)
libfwupd/fwupd-plugin.c:	priv->flags &= ~flag;
libfwupd/fwupd-plugin.c:	return (priv->flags & flag) > 0;
libfwupd/fwupd-plugin.c:	if (priv->name != NULL) {
libfwupd/fwupd-plugin.c:				      g_variant_new_string(priv->name));
libfwupd/fwupd-plugin.c:	if (priv->flags > 0) {
libfwupd/fwupd-plugin.c:				      g_variant_new_uint64(priv->flags));
libfwupd/fwupd-plugin.c:	fwupd_common_json_add_string(builder, FWUPD_RESULT_KEY_NAME, priv->name);
libfwupd/fwupd-plugin.c:	if (priv->flags != FWUPD_PLUGIN_FLAG_NONE) {
libfwupd/fwupd-plugin.c:			if ((priv->flags & ((guint64)1 << i)) == 0)
libfwupd/fwupd-plugin.c:	fwupd_pad_kv_str(str, FWUPD_RESULT_KEY_NAME, priv->name);
libfwupd/fwupd-plugin.c:	fwupd_pad_kv_dfl(str, FWUPD_RESULT_KEY_FLAGS, priv->flags);
libfwupd/fwupd-plugin.c:		g_value_set_string(value, priv->name);
libfwupd/fwupd-plugin.c:		g_value_set_uint64(value, priv->flags);
libfwupd/fwupd-plugin.c:	g_free(priv->name);
libfwupd/fwupd-release.c:	return priv->remote_id;
libfwupd/fwupd-release.c:	if (g_strcmp0(priv->remote_id, remote_id) == 0)
libfwupd/fwupd-release.c:	g_free(priv->remote_id);
libfwupd/fwupd-release.c:	priv->remote_id = g_strdup(remote_id);
libfwupd/fwupd-release.c:	return priv->version;
libfwupd/fwupd-release.c:	if (g_strcmp0(priv->version, version) == 0)
libfwupd/fwupd-release.c:	g_free(priv->version);
libfwupd/fwupd-release.c:	priv->version = g_strdup(version);
libfwupd/fwupd-release.c:	return priv->filename;
libfwupd/fwupd-release.c:	if (g_strcmp0(priv->filename, filename) == 0)
libfwupd/fwupd-release.c:	g_free(priv->filename);
libfwupd/fwupd-release.c:	priv->filename = g_strdup(filename);
libfwupd/fwupd-release.c:	return priv->update_message;
libfwupd/fwupd-release.c:	if (g_strcmp0(priv->update_message, update_message) == 0)
libfwupd/fwupd-release.c:	g_free(priv->update_message);
libfwupd/fwupd-release.c:	priv->update_message = g_strdup(update_message);
libfwupd/fwupd-release.c:	return priv->update_image;
libfwupd/fwupd-release.c:	if (g_strcmp0(priv->update_image, update_image) == 0)
libfwupd/fwupd-release.c:	g_free(priv->update_image);
libfwupd/fwupd-release.c:	priv->update_image = g_strdup(update_image);
libfwupd/fwupd-release.c:	return priv->protocol;
libfwupd/fwupd-release.c:	if (g_strcmp0(priv->protocol, protocol) == 0)
libfwupd/fwupd-release.c:	g_free(priv->protocol);
libfwupd/fwupd-release.c:	priv->protocol = g_strdup(protocol);
libfwupd/fwupd-release.c:	return priv->issues;
libfwupd/fwupd-release.c:	for (guint i = 0; i < priv->issues->len; i++) {
libfwupd/fwupd-release.c:		const gchar *issue_tmp = g_ptr_array_index(priv->issues, i);
libfwupd/fwupd-release.c:	g_ptr_array_add(priv->issues, g_strdup(issue));
libfwupd/fwupd-release.c:	return priv->categories;
libfwupd/fwupd-release.c:	for (guint i = 0; i < priv->categories->len; i++) {
libfwupd/fwupd-release.c:		const gchar *category_tmp = g_ptr_array_index(priv->categories, i);
libfwupd/fwupd-release.c:	g_ptr_array_add(priv->categories, g_strdup(category));
libfwupd/fwupd-release.c:	for (guint i = 0; i < priv->categories->len; i++) {
libfwupd/fwupd-release.c:		const gchar *category_tmp = g_ptr_array_index(priv->categories, i);
libfwupd/fwupd-release.c:	return priv->checksums;
libfwupd/fwupd-release.c:	for (guint i = 0; i < priv->checksums->len; i++) {
libfwupd/fwupd-release.c:		const gchar *checksum_tmp = g_ptr_array_index(priv->checksums, i);
libfwupd/fwupd-release.c:	g_ptr_array_add(priv->checksums, g_strdup(checksum));
libfwupd/fwupd-release.c:	for (guint i = 0; i < priv->checksums->len; i++) {
libfwupd/fwupd-release.c:		const gchar *checksum_tmp = g_ptr_array_index(priv->checksums, i);
libfwupd/fwupd-release.c:	return priv->metadata;
libfwupd/fwupd-release.c:	g_hash_table_insert(priv->metadata, g_strdup(key), g_strdup(value));
libfwupd/fwupd-release.c:		g_hash_table_insert(priv->metadata, g_strdup(key), g_strdup(value));
libfwupd/fwupd-release.c:	return g_hash_table_lookup(priv->metadata, key);
libfwupd/fwupd-release.c:	if (priv->locations->len == 0)
libfwupd/fwupd-release.c:	return (const gchar *)g_ptr_array_index(priv->locations, 0);
libfwupd/fwupd-release.c:	g_ptr_array_set_size(priv->locations, 0);
libfwupd/fwupd-release.c:	g_ptr_array_add(priv->locations, g_strdup(uri));
libfwupd/fwupd-release.c:	return priv->locations;
libfwupd/fwupd-release.c:	for (guint i = 0; i < priv->locations->len; i++) {
libfwupd/fwupd-release.c:		const gchar *location_tmp = g_ptr_array_index(priv->locations, i);
libfwupd/fwupd-release.c:	g_ptr_array_add(priv->locations, g_strdup(location));
libfwupd/fwupd-release.c:	return priv->homepage;
libfwupd/fwupd-release.c:	if (g_strcmp0(priv->homepage, homepage) == 0)
libfwupd/fwupd-release.c:	g_free(priv->homepage);
libfwupd/fwupd-release.c:	priv->homepage = g_strdup(homepage);
libfwupd/fwupd-release.c:	return priv->details_url;
libfwupd/fwupd-release.c:	if (g_strcmp0(priv->details_url, details_url) == 0)
libfwupd/fwupd-release.c:	g_free(priv->details_url);
libfwupd/fwupd-release.c:	priv->details_url = g_strdup(details_url);
libfwupd/fwupd-release.c:	return priv->source_url;
libfwupd/fwupd-release.c:	if (g_strcmp0(priv->source_url, source_url) == 0)
libfwupd/fwupd-release.c:	g_free(priv->source_url);
libfwupd/fwupd-release.c:	priv->source_url = g_strdup(source_url);
libfwupd/fwupd-release.c:	return priv->description;
libfwupd/fwupd-release.c:	if (g_strcmp0(priv->description, description) == 0)
libfwupd/fwupd-release.c:	g_free(priv->description);
libfwupd/fwupd-release.c:	priv->description = g_strdup(description);
libfwupd/fwupd-release.c:	return priv->appstream_id;
libfwupd/fwupd-release.c:	if (g_strcmp0(priv->appstream_id, appstream_id) == 0)
libfwupd/fwupd-release.c:	g_free(priv->appstream_id);
libfwupd/fwupd-release.c:	priv->appstream_id = g_strdup(appstream_id);
libfwupd/fwupd-release.c:	return priv->detach_caption;
libfwupd/fwupd-release.c:	if (g_strcmp0(priv->detach_caption, detach_caption) == 0)
libfwupd/fwupd-release.c:	g_free(priv->detach_caption);
libfwupd/fwupd-release.c:	priv->detach_caption = g_strdup(detach_caption);
libfwupd/fwupd-release.c:	return priv->detach_image;
libfwupd/fwupd-release.c:	if (g_strcmp0(priv->detach_image, detach_image) == 0)
libfwupd/fwupd-release.c:	g_free(priv->detach_image);
libfwupd/fwupd-release.c:	priv->detach_image = g_strdup(detach_image);
libfwupd/fwupd-release.c:	return priv->size;
libfwupd/fwupd-release.c:	priv->size = size;
libfwupd/fwupd-release.c:	return priv->created;
libfwupd/fwupd-release.c:	priv->created = created;
libfwupd/fwupd-release.c:	return priv->summary;
libfwupd/fwupd-release.c:	if (g_strcmp0(priv->summary, summary) == 0)
libfwupd/fwupd-release.c:	g_free(priv->summary);
libfwupd/fwupd-release.c:	priv->summary = g_strdup(summary);
libfwupd/fwupd-release.c:	return priv->branch;
libfwupd/fwupd-release.c:	if (g_strcmp0(priv->branch, branch) == 0)
libfwupd/fwupd-release.c:	g_free(priv->branch);
libfwupd/fwupd-release.c:	priv->branch = g_strdup(branch);
libfwupd/fwupd-release.c:	return priv->vendor;
libfwupd/fwupd-release.c:	if (g_strcmp0(priv->vendor, vendor) == 0)
libfwupd/fwupd-release.c:	g_free(priv->vendor);
libfwupd/fwupd-release.c:	priv->vendor = g_strdup(vendor);
libfwupd/fwupd-release.c:	return priv->license;
libfwupd/fwupd-release.c:	if (g_strcmp0(priv->license, license) == 0)
libfwupd/fwupd-release.c:	g_free(priv->license);
libfwupd/fwupd-release.c:	priv->license = g_strdup(license);
libfwupd/fwupd-release.c:	return priv->name;
libfwupd/fwupd-release.c:	if (g_strcmp0(priv->name, name) == 0)
libfwupd/fwupd-release.c:	g_free(priv->name);
libfwupd/fwupd-release.c:	priv->name = g_strdup(name);
libfwupd/fwupd-release.c:	return priv->name_variant_suffix;
libfwupd/fwupd-release.c:	if (g_strcmp0(priv->name_variant_suffix, name_variant_suffix) == 0)
libfwupd/fwupd-release.c:	g_free(priv->name_variant_suffix);
libfwupd/fwupd-release.c:	priv->name_variant_suffix = g_strdup(name_variant_suffix);
libfwupd/fwupd-release.c:	return priv->flags & FWUPD_RELEASE_TRUST_FLAGS_MASK;
libfwupd/fwupd-release.c:	priv->flags &= ~FWUPD_RELEASE_TRUST_FLAGS_MASK;
libfwupd/fwupd-release.c:	priv->flags |= trust_flags;
libfwupd/fwupd-release.c:	return priv->flags;
libfwupd/fwupd-release.c:	priv->flags = flags;
libfwupd/fwupd-release.c:	priv->flags |= flag;
libfwupd/fwupd-release.c:	priv->flags &= ~flag;
libfwupd/fwupd-release.c:	return (priv->flags & flag) > 0;
libfwupd/fwupd-release.c:	return priv->urgency;
libfwupd/fwupd-release.c:	priv->urgency = urgency;
libfwupd/fwupd-release.c:	return priv->install_duration;
libfwupd/fwupd-release.c:	priv->install_duration = duration;
libfwupd/fwupd-release.c:	if (priv->remote_id != NULL) {
libfwupd/fwupd-release.c:				      g_variant_new_string(priv->remote_id));
libfwupd/fwupd-release.c:	if (priv->appstream_id != NULL) {
libfwupd/fwupd-release.c:				      g_variant_new_string(priv->appstream_id));
libfwupd/fwupd-release.c:	if (priv->detach_caption != NULL) {
libfwupd/fwupd-release.c:				      g_variant_new_string(priv->detach_caption));
libfwupd/fwupd-release.c:	if (priv->detach_image != NULL) {
libfwupd/fwupd-release.c:				      g_variant_new_string(priv->detach_image));
libfwupd/fwupd-release.c:	if (priv->filename != NULL) {
libfwupd/fwupd-release.c:				      g_variant_new_string(priv->filename));
libfwupd/fwupd-release.c:	if (priv->protocol != NULL) {
libfwupd/fwupd-release.c:				      g_variant_new_string(priv->protocol));
libfwupd/fwupd-release.c:	if (priv->license != NULL) {
libfwupd/fwupd-release.c:				      g_variant_new_string(priv->license));
libfwupd/fwupd-release.c:	if (priv->name != NULL) {
libfwupd/fwupd-release.c:				      g_variant_new_string(priv->name));
libfwupd/fwupd-release.c:	if (priv->name_variant_suffix != NULL) {
libfwupd/fwupd-release.c:				      g_variant_new_string(priv->name_variant_suffix));
libfwupd/fwupd-release.c:	if (priv->size != 0) {
libfwupd/fwupd-release.c:				      g_variant_new_uint64(priv->size));
libfwupd/fwupd-release.c:	if (priv->created != 0) {
libfwupd/fwupd-release.c:				      g_variant_new_uint64(priv->created));
libfwupd/fwupd-release.c:	if (priv->summary != NULL) {
libfwupd/fwupd-release.c:				      g_variant_new_string(priv->summary));
libfwupd/fwupd-release.c:	if (priv->branch != NULL) {
libfwupd/fwupd-release.c:				      g_variant_new_string(priv->branch));
libfwupd/fwupd-release.c:	if (priv->description != NULL) {
libfwupd/fwupd-release.c:				      g_variant_new_string(priv->description));
libfwupd/fwupd-release.c:	if (priv->categories->len > 0) {
libfwupd/fwupd-release.c:		g_autofree const gchar **strv = g_new0(const gchar *, priv->categories->len + 1);
libfwupd/fwupd-release.c:		for (guint i = 0; i < priv->categories->len; i++)
libfwupd/fwupd-release.c:			strv[i] = (const gchar *)g_ptr_array_index(priv->categories, i);
libfwupd/fwupd-release.c:	if (priv->issues->len > 0) {
libfwupd/fwupd-release.c:		g_autofree const gchar **strv = g_new0(const gchar *, priv->issues->len + 1);
libfwupd/fwupd-release.c:		for (guint i = 0; i < priv->issues->len; i++)
libfwupd/fwupd-release.c:			strv[i] = (const gchar *)g_ptr_array_index(priv->issues, i);
libfwupd/fwupd-release.c:	if (priv->checksums->len > 0) {
libfwupd/fwupd-release.c:		for (guint i = 0; i < priv->checksums->len; i++) {
libfwupd/fwupd-release.c:			const gchar *checksum = g_ptr_array_index(priv->checksums, i);
libfwupd/fwupd-release.c:	if (priv->locations->len > 0) {
libfwupd/fwupd-release.c:		    g_variant_new_strv((const gchar *const *)priv->locations->pdata,
libfwupd/fwupd-release.c:				       priv->locations->len));
libfwupd/fwupd-release.c:				      g_variant_new_string(g_ptr_array_index(priv->locations, 0)));
libfwupd/fwupd-release.c:	if (priv->homepage != NULL) {
libfwupd/fwupd-release.c:				      g_variant_new_string(priv->homepage));
libfwupd/fwupd-release.c:	if (priv->details_url != NULL) {
libfwupd/fwupd-release.c:				      g_variant_new_string(priv->details_url));
libfwupd/fwupd-release.c:	if (priv->source_url != NULL) {
libfwupd/fwupd-release.c:				      g_variant_new_string(priv->source_url));
libfwupd/fwupd-release.c:	if (priv->version != NULL) {
libfwupd/fwupd-release.c:				      g_variant_new_string(priv->version));
libfwupd/fwupd-release.c:	if (priv->vendor != NULL) {
libfwupd/fwupd-release.c:				      g_variant_new_string(priv->vendor));
libfwupd/fwupd-release.c:	if (priv->flags != 0) {
libfwupd/fwupd-release.c:				      g_variant_new_uint64(priv->flags));
libfwupd/fwupd-release.c:	if (priv->urgency != 0) {
libfwupd/fwupd-release.c:				      g_variant_new_uint32(priv->urgency));
libfwupd/fwupd-release.c:	if (g_hash_table_size(priv->metadata) > 0) {
libfwupd/fwupd-release.c:				      fwupd_hash_kv_to_variant(priv->metadata));
libfwupd/fwupd-release.c:	if (priv->install_duration > 0) {
libfwupd/fwupd-release.c:				      g_variant_new_uint32(priv->install_duration));
libfwupd/fwupd-release.c:		g_hash_table_unref(priv->metadata);
libfwupd/fwupd-release.c:		priv->metadata = fwupd_variant_to_hash_kv(value);
libfwupd/fwupd-release.c:	fwupd_common_json_add_string(builder, FWUPD_RESULT_KEY_APPSTREAM_ID, priv->appstream_id);
libfwupd/fwupd-release.c:	fwupd_common_json_add_string(builder, FWUPD_RESULT_KEY_REMOTE_ID, priv->remote_id);
libfwupd/fwupd-release.c:	fwupd_common_json_add_string(builder, FWUPD_RESULT_KEY_NAME, priv->name);
libfwupd/fwupd-release.c:				     priv->name_variant_suffix);
libfwupd/fwupd-release.c:	fwupd_common_json_add_string(builder, FWUPD_RESULT_KEY_SUMMARY, priv->summary);
libfwupd/fwupd-release.c:	fwupd_common_json_add_string(builder, FWUPD_RESULT_KEY_DESCRIPTION, priv->description);
libfwupd/fwupd-release.c:	fwupd_common_json_add_string(builder, FWUPD_RESULT_KEY_BRANCH, priv->branch);
libfwupd/fwupd-release.c:	fwupd_common_json_add_string(builder, FWUPD_RESULT_KEY_VERSION, priv->version);
libfwupd/fwupd-release.c:	fwupd_common_json_add_string(builder, FWUPD_RESULT_KEY_FILENAME, priv->filename);
libfwupd/fwupd-release.c:	fwupd_common_json_add_string(builder, FWUPD_RESULT_KEY_PROTOCOL, priv->protocol);
libfwupd/fwupd-release.c:	if (priv->categories->len > 0) {
libfwupd/fwupd-release.c:		for (guint i = 0; i < priv->categories->len; i++) {
libfwupd/fwupd-release.c:			const gchar *tmp = g_ptr_array_index(priv->categories, i);
libfwupd/fwupd-release.c:	if (priv->issues->len > 0) {
libfwupd/fwupd-release.c:		for (guint i = 0; i < priv->issues->len; i++) {
libfwupd/fwupd-release.c:			const gchar *tmp = g_ptr_array_index(priv->issues, i);
libfwupd/fwupd-release.c:	if (priv->checksums->len > 0) {
libfwupd/fwupd-release.c:		for (guint i = 0; i < priv->checksums->len; i++) {
libfwupd/fwupd-release.c:			const gchar *checksum = g_ptr_array_index(priv->checksums, i);
libfwupd/fwupd-release.c:	fwupd_common_json_add_string(builder, FWUPD_RESULT_KEY_LICENSE, priv->license);
libfwupd/fwupd-release.c:	if (priv->size > 0)
libfwupd/fwupd-release.c:		fwupd_common_json_add_int(builder, FWUPD_RESULT_KEY_SIZE, priv->size);
libfwupd/fwupd-release.c:	if (priv->created > 0)
libfwupd/fwupd-release.c:		fwupd_common_json_add_int(builder, FWUPD_RESULT_KEY_CREATED, priv->created);
libfwupd/fwupd-release.c:	if (priv->locations->len > 0) {
libfwupd/fwupd-release.c:		for (guint i = 0; i < priv->locations->len; i++) {
libfwupd/fwupd-release.c:			const gchar *location = g_ptr_array_index(priv->locations, i);
libfwupd/fwupd-release.c:					     (const gchar *)g_ptr_array_index(priv->locations, 0));
libfwupd/fwupd-release.c:	fwupd_common_json_add_string(builder, FWUPD_RESULT_KEY_HOMEPAGE, priv->homepage);
libfwupd/fwupd-release.c:	fwupd_common_json_add_string(builder, FWUPD_RESULT_KEY_DETAILS_URL, priv->details_url);
libfwupd/fwupd-release.c:	fwupd_common_json_add_string(builder, FWUPD_RESULT_KEY_SOURCE_URL, priv->source_url);
libfwupd/fwupd-release.c:	fwupd_common_json_add_string(builder, FWUPD_RESULT_KEY_VENDOR, priv->vendor);
libfwupd/fwupd-release.c:	if (priv->flags != FWUPD_RELEASE_FLAG_NONE) {
libfwupd/fwupd-release.c:			if ((priv->flags & ((guint64)1 << i)) == 0)
libfwupd/fwupd-release.c:	if (priv->install_duration > 0) {
libfwupd/fwupd-release.c:					  priv->install_duration);
libfwupd/fwupd-release.c:				     priv->detach_caption);
libfwupd/fwupd-release.c:	fwupd_common_json_add_string(builder, FWUPD_RESULT_KEY_DETACH_IMAGE, priv->detach_image);
libfwupd/fwupd-release.c:				     priv->update_message);
libfwupd/fwupd-release.c:	fwupd_common_json_add_string(builder, FWUPD_RESULT_KEY_UPDATE_IMAGE, priv->update_image);
libfwupd/fwupd-release.c:	keys = g_hash_table_get_keys(priv->metadata);
libfwupd/fwupd-release.c:		const gchar *value = g_hash_table_lookup(priv->metadata, key);
libfwupd/fwupd-release.c:	fwupd_pad_kv_str(str, FWUPD_RESULT_KEY_APPSTREAM_ID, priv->appstream_id);
libfwupd/fwupd-release.c:	fwupd_pad_kv_str(str, FWUPD_RESULT_KEY_REMOTE_ID, priv->remote_id);
libfwupd/fwupd-release.c:	fwupd_pad_kv_str(str, FWUPD_RESULT_KEY_SUMMARY, priv->summary);
libfwupd/fwupd-release.c:	fwupd_pad_kv_str(str, FWUPD_RESULT_KEY_DESCRIPTION, priv->description);
libfwupd/fwupd-release.c:	fwupd_pad_kv_str(str, FWUPD_RESULT_KEY_BRANCH, priv->branch);
libfwupd/fwupd-release.c:	fwupd_pad_kv_str(str, FWUPD_RESULT_KEY_VERSION, priv->version);
libfwupd/fwupd-release.c:	fwupd_pad_kv_str(str, FWUPD_RESULT_KEY_FILENAME, priv->filename);
libfwupd/fwupd-release.c:	fwupd_pad_kv_str(str, FWUPD_RESULT_KEY_PROTOCOL, priv->protocol);
libfwupd/fwupd-release.c:	for (guint i = 0; i < priv->categories->len; i++) {
libfwupd/fwupd-release.c:		const gchar *tmp = g_ptr_array_index(priv->categories, i);
libfwupd/fwupd-release.c:	for (guint i = 0; i < priv->issues->len; i++) {
libfwupd/fwupd-release.c:		const gchar *tmp = g_ptr_array_index(priv->issues, i);
libfwupd/fwupd-release.c:	for (guint i = 0; i < priv->checksums->len; i++) {
libfwupd/fwupd-release.c:		const gchar *checksum = g_ptr_array_index(priv->checksums, i);
libfwupd/fwupd-release.c:	fwupd_pad_kv_str(str, FWUPD_RESULT_KEY_LICENSE, priv->license);
libfwupd/fwupd-release.c:	fwupd_pad_kv_siz(str, FWUPD_RESULT_KEY_SIZE, priv->size);
libfwupd/fwupd-release.c:	fwupd_pad_kv_unx(str, FWUPD_RESULT_KEY_CREATED, priv->created);
libfwupd/fwupd-release.c:	for (guint i = 0; i < priv->locations->len; i++) {
libfwupd/fwupd-release.c:		const gchar *location = g_ptr_array_index(priv->locations, i);
libfwupd/fwupd-release.c:	fwupd_pad_kv_str(str, FWUPD_RESULT_KEY_HOMEPAGE, priv->homepage);
libfwupd/fwupd-release.c:	fwupd_pad_kv_str(str, FWUPD_RESULT_KEY_DETAILS_URL, priv->details_url);
libfwupd/fwupd-release.c:	fwupd_pad_kv_str(str, FWUPD_RESULT_KEY_SOURCE_URL, priv->source_url);
libfwupd/fwupd-release.c:	if (priv->urgency != FWUPD_RELEASE_URGENCY_UNKNOWN) {
libfwupd/fwupd-release.c:				 fwupd_release_urgency_to_string(priv->urgency));
libfwupd/fwupd-release.c:	fwupd_pad_kv_str(str, FWUPD_RESULT_KEY_VENDOR, priv->vendor);
libfwupd/fwupd-release.c:	fwupd_pad_kv_tfl(str, FWUPD_RESULT_KEY_FLAGS, priv->flags);
libfwupd/fwupd-release.c:	fwupd_pad_kv_int(str, FWUPD_RESULT_KEY_INSTALL_DURATION, priv->install_duration);
libfwupd/fwupd-release.c:	fwupd_pad_kv_str(str, FWUPD_RESULT_KEY_DETACH_CAPTION, priv->detach_caption);
libfwupd/fwupd-release.c:	fwupd_pad_kv_str(str, FWUPD_RESULT_KEY_DETACH_IMAGE, priv->detach_image);
libfwupd/fwupd-release.c:	if (priv->update_message != NULL)
libfwupd/fwupd-release.c:		fwupd_pad_kv_str(str, FWUPD_RESULT_KEY_UPDATE_MESSAGE, priv->update_message);
libfwupd/fwupd-release.c:	if (priv->update_image != NULL)
libfwupd/fwupd-release.c:		fwupd_pad_kv_str(str, FWUPD_RESULT_KEY_UPDATE_IMAGE, priv->update_image);
libfwupd/fwupd-release.c:	keys = g_hash_table_get_keys(priv->metadata);
libfwupd/fwupd-release.c:		const gchar *value = g_hash_table_lookup(priv->metadata, key);
libfwupd/fwupd-release.c:	priv->categories = g_ptr_array_new_with_free_func(g_free);
libfwupd/fwupd-release.c:	priv->issues = g_ptr_array_new_with_free_func(g_free);
libfwupd/fwupd-release.c:	priv->checksums = g_ptr_array_new_with_free_func(g_free);
libfwupd/fwupd-release.c:	priv->locations = g_ptr_array_new_with_free_func(g_free);
libfwupd/fwupd-release.c:	priv->metadata = g_hash_table_new_full(g_str_hash, g_str_equal, g_free, g_free);
libfwupd/fwupd-release.c:	g_free(priv->description);
libfwupd/fwupd-release.c:	g_free(priv->filename);
libfwupd/fwupd-release.c:	g_free(priv->protocol);
libfwupd/fwupd-release.c:	g_free(priv->appstream_id);
libfwupd/fwupd-release.c:	g_free(priv->detach_caption);
libfwupd/fwupd-release.c:	g_free(priv->detach_image);
libfwupd/fwupd-release.c:	g_free(priv->license);
libfwupd/fwupd-release.c:	g_free(priv->name);
libfwupd/fwupd-release.c:	g_free(priv->name_variant_suffix);
libfwupd/fwupd-release.c:	g_free(priv->summary);
libfwupd/fwupd-release.c:	g_free(priv->branch);
libfwupd/fwupd-release.c:	g_ptr_array_unref(priv->locations);
libfwupd/fwupd-release.c:	g_free(priv->homepage);
libfwupd/fwupd-release.c:	g_free(priv->details_url);
libfwupd/fwupd-release.c:	g_free(priv->source_url);
libfwupd/fwupd-release.c:	g_free(priv->vendor);
libfwupd/fwupd-release.c:	g_free(priv->version);
libfwupd/fwupd-release.c:	g_free(priv->remote_id);
libfwupd/fwupd-release.c:	g_free(priv->update_message);
libfwupd/fwupd-release.c:	g_free(priv->update_image);
libfwupd/fwupd-release.c:	g_ptr_array_unref(priv->categories);
libfwupd/fwupd-release.c:	g_ptr_array_unref(priv->issues);
libfwupd/fwupd-release.c:	g_ptr_array_unref(priv->checksums);
libfwupd/fwupd-release.c:	g_hash_table_unref(priv->metadata);
libfwupdplugin/fu-efi-firmware-file.c:	fu_xmlb_builder_insert_kx(bn, "attrib", priv->attrib);
libfwupdplugin/fu-efi-firmware-file.c:	fu_xmlb_builder_insert_kx(bn, "type", priv->type);
libfwupdplugin/fu-efi-firmware-file.c:					  fu_efi_firmware_file_type_to_string(priv->type));
libfwupdplugin/fu-efi-firmware-file.c:				       &priv->type,
libfwupdplugin/fu-efi-firmware-file.c:				       &priv->attrib,
libfwupdplugin/fu-efi-firmware-file.c:	if (priv->type == FU_EFI_FIRMWARE_FILE_TYPE_FIRMWARE_VOLUME_IMAGE) {
libfwupdplugin/fu-efi-firmware-file.c:	if ((priv->attrib & FU_EFI_FIRMWARE_FILE_ATTRIB_CHECKSUM) > 0 &&
libfwupdplugin/fu-efi-firmware-file.c:	fu_byte_array_append_uint8(buf, priv->type);   /* data_checksum */
libfwupdplugin/fu-efi-firmware-file.c:	fu_byte_array_append_uint8(buf, priv->attrib); /* data_checksum */
libfwupdplugin/fu-efi-firmware-file.c:		priv->type = tmp;
libfwupdplugin/fu-efi-firmware-file.c:		priv->attrib = tmp;
libfwupdplugin/fu-efi-firmware-file.c:	priv->attrib = FU_EFI_FIRMWARE_FILE_ATTRIB_NONE;
libfwupdplugin/fu-efi-firmware-file.c:	priv->type = FU_EFI_FIRMWARE_FILE_TYPE_RAW;
libfwupdplugin/fu-udev-device.c:	if (priv->udev_device != NULL) {
libfwupdplugin/fu-udev-device.c:					   g_udev_device_get_sysfs_path(priv->udev_device));
libfwupdplugin/fu-udev-device.c:		fu_common_string_append_kv(str, idt, "Subsystem", priv->subsystem);
libfwupdplugin/fu-udev-device.c:		if (priv->driver != NULL)
libfwupdplugin/fu-udev-device.c:			fu_common_string_append_kv(str, idt, "Driver", priv->driver);
libfwupdplugin/fu-udev-device.c:		if (priv->device_file != NULL)
libfwupdplugin/fu-udev-device.c:			fu_common_string_append_kv(str, idt, "DeviceFile", priv->device_file);
libfwupdplugin/fu-udev-device.c:		fu_udev_device_to_string_raw(priv->udev_device, idt, str);
libfwupdplugin/fu-udev-device.c:		udev_parent = g_udev_device_get_parent(priv->udev_device);
libfwupdplugin/fu-udev-device.c:	if (g_strcmp0(priv->subsystem, subsystem) == 0)
libfwupdplugin/fu-udev-device.c:	g_free(priv->subsystem);
libfwupdplugin/fu-udev-device.c:	priv->subsystem = g_strdup(subsystem);
libfwupdplugin/fu-udev-device.c:	if (g_strcmp0(priv->driver, driver) == 0)
libfwupdplugin/fu-udev-device.c:	g_free(priv->driver);
libfwupdplugin/fu-udev-device.c:	priv->driver = g_strdup(driver);
libfwupdplugin/fu-udev-device.c:	if (g_strcmp0(priv->device_file, device_file) == 0)
libfwupdplugin/fu-udev-device.c:	g_free(priv->device_file);
libfwupdplugin/fu-udev-device.c:	priv->device_file = g_strdup(device_file);
libfwupdplugin/fu-udev-device.c:	tmp = g_udev_device_get_property(priv->udev_device, "SERIO_FIRMWARE_ID");
libfwupdplugin/fu-udev-device.c:	if (priv->udev_device == NULL)
libfwupdplugin/fu-udev-device.c:	priv->vendor = fu_udev_device_get_sysfs_attr_as_uint32(priv->udev_device, "vendor");
libfwupdplugin/fu-udev-device.c:	priv->model = fu_udev_device_get_sysfs_attr_as_uint32(priv->udev_device, "device");
libfwupdplugin/fu-udev-device.c:	priv->revision = fu_udev_device_get_sysfs_attr_as_uint8(priv->udev_device, "revision");
libfwupdplugin/fu-udev-device.c:	priv->subsystem_vendor =
libfwupdplugin/fu-udev-device.c:	    fu_udev_device_get_sysfs_attr_as_uint32(priv->udev_device, "subsystem_vendor");
libfwupdplugin/fu-udev-device.c:	priv->subsystem_model =
libfwupdplugin/fu-udev-device.c:	    fu_udev_device_get_sysfs_attr_as_uint32(priv->udev_device, "subsystem_device");
libfwupdplugin/fu-udev-device.c:	udev_parent = g_udev_device_get_parent(priv->udev_device);
libfwupdplugin/fu-udev-device.c:	if (udev_parent != NULL && priv->flags & FU_UDEV_DEVICE_FLAG_VENDOR_FROM_PARENT &&
libfwupdplugin/fu-udev-device.c:	    priv->vendor == 0x0 && priv->model == 0x0 && priv->revision == 0x0) {
libfwupdplugin/fu-udev-device.c:		priv->vendor = fu_udev_device_get_sysfs_attr_as_uint32(udev_parent, "vendor");
libfwupdplugin/fu-udev-device.c:		priv->model = fu_udev_device_get_sysfs_attr_as_uint32(udev_parent, "device");
libfwupdplugin/fu-udev-device.c:		priv->revision = fu_udev_device_get_sysfs_attr_as_uint8(udev_parent, "revision");
libfwupdplugin/fu-udev-device.c:		priv->subsystem_vendor =
libfwupdplugin/fu-udev-device.c:		priv->subsystem_model =
libfwupdplugin/fu-udev-device.c:	if (udev_parent != NULL && priv->vendor == 0x0 && priv->model == 0x0 &&
libfwupdplugin/fu-udev-device.c:	    priv->revision == 0x0 && g_strcmp0(priv->subsystem, "hidraw") == 0) {
libfwupdplugin/fu-udev-device.c:						  g_udev_device_get_sysfs_path(priv->udev_device));
libfwupdplugin/fu-udev-device.c:					priv->vendor = val;
libfwupdplugin/fu-udev-device.c:						  g_udev_device_get_sysfs_path(priv->udev_device));
libfwupdplugin/fu-udev-device.c:					priv->model = val;
libfwupdplugin/fu-udev-device.c:		if (priv->revision != 0x00) {
libfwupdplugin/fu-udev-device.c:			g_autofree gchar *version = g_strdup_printf("%02x", priv->revision);
libfwupdplugin/fu-udev-device.c:		tmp = g_udev_device_get_property(priv->udev_device, "ID_MODEL_FROM_DATABASE");
libfwupdplugin/fu-udev-device.c:			tmp = g_udev_device_get_property(priv->udev_device, "ID_MODEL");
libfwupdplugin/fu-udev-device.c:			tmp = g_udev_device_get_property(priv->udev_device,
libfwupdplugin/fu-udev-device.c:		tmp = fu_udev_device_get_vendor_fallback(priv->udev_device);
libfwupdplugin/fu-udev-device.c:	if (priv->flags & FU_UDEV_DEVICE_FLAG_VENDOR_FROM_PARENT && udev_parent != NULL &&
libfwupdplugin/fu-udev-device.c:		tmp = g_udev_device_get_property(priv->udev_device, "ID_SERIAL_SHORT");
libfwupdplugin/fu-udev-device.c:			tmp = g_udev_device_get_property(priv->udev_device, "ID_SERIAL");
libfwupdplugin/fu-udev-device.c:		tmp = g_udev_device_get_property(priv->udev_device, "ID_REVISION");
libfwupdplugin/fu-udev-device.c:	subsystem = g_ascii_strup(g_udev_device_get_subsystem(priv->udev_device), -1);
libfwupdplugin/fu-udev-device.c:	if (subsystem != NULL && priv->vendor != 0x0000) {
libfwupdplugin/fu-udev-device.c:		vendor_id = g_strdup_printf("%s:0x%04X", subsystem, (guint)priv->vendor);
libfwupdplugin/fu-udev-device.c:	if (priv->vendor != 0x0000 && priv->model != 0x0000 && priv->subsystem_vendor != 0x0000 &&
libfwupdplugin/fu-udev-device.c:	    priv->subsystem_model != 0x0000) {
libfwupdplugin/fu-udev-device.c:					 priv->vendor,
libfwupdplugin/fu-udev-device.c:					 priv->model,
libfwupdplugin/fu-udev-device.c:					 priv->subsystem_vendor,
libfwupdplugin/fu-udev-device.c:					 priv->subsystem_model,
libfwupdplugin/fu-udev-device.c:					 priv->revision);
libfwupdplugin/fu-udev-device.c:					 priv->vendor,
libfwupdplugin/fu-udev-device.c:					 priv->model,
libfwupdplugin/fu-udev-device.c:					 priv->subsystem_vendor,
libfwupdplugin/fu-udev-device.c:					 priv->subsystem_model);
libfwupdplugin/fu-udev-device.c:	if (priv->vendor != 0x0000 && priv->model != 0x0000) {
libfwupdplugin/fu-udev-device.c:					priv->vendor,
libfwupdplugin/fu-udev-device.c:					priv->model,
libfwupdplugin/fu-udev-device.c:					priv->revision);
libfwupdplugin/fu-udev-device.c:	if (priv->vendor != 0x0000 && priv->model != 0x0000) {
libfwupdplugin/fu-udev-device.c:		    g_strdup_printf("%s\\VEN_%04X&DEV_%04X", subsystem, priv->vendor, priv->model);
libfwupdplugin/fu-udev-device.c:	if (priv->vendor != 0x0000) {
libfwupdplugin/fu-udev-device.c:		devid = g_strdup_printf("%s\\VEN_%04X", subsystem, priv->vendor);
libfwupdplugin/fu-udev-device.c:	tmp = g_udev_device_get_sysfs_attr(priv->udev_device, "class");
libfwupdplugin/fu-udev-device.c:		devid = g_strdup_printf("%s\\VEN_%04X&CLASS_%s", subsystem, priv->vendor, class_id);
libfwupdplugin/fu-udev-device.c:	if (priv->driver != NULL) {
libfwupdplugin/fu-udev-device.c:		devid = g_strdup_printf("%s\\DRIVER_%s", subsystem, priv->driver);
libfwupdplugin/fu-udev-device.c:	if (g_strcmp0(g_udev_device_get_subsystem(priv->udev_device), "serio") == 0) {
libfwupdplugin/fu-udev-device.c:	parent_i2c = g_udev_device_get_parent_with_subsystem(priv->udev_device, "i2c", NULL);
libfwupdplugin/fu-udev-device.c:	miscdir = g_build_filename(g_udev_device_get_sysfs_path(priv->udev_device), "misc", NULL);
libfwupdplugin/fu-udev-device.c:		g_set_object(&priv->udev_device, udev_device_phys);
libfwupdplugin/fu-udev-device.c:		g_set_object(&priv->udev_device, udev_device);
libfwupdplugin/fu-udev-device.c:	g_set_object(&priv->udev_device, udev_device);
libfwupdplugin/fu-udev-device.c:	if (priv->udev_device == NULL)
libfwupdplugin/fu-udev-device.c:	fu_udev_device_set_subsystem(self, g_udev_device_get_subsystem(priv->udev_device));
libfwupdplugin/fu-udev-device.c:	fu_udev_device_set_driver(self, g_udev_device_get_driver(priv->udev_device));
libfwupdplugin/fu-udev-device.c:	fu_udev_device_set_device_file(self, g_udev_device_get_device_file(priv->udev_device));
libfwupdplugin/fu-udev-device.c:	fu_device_set_backend_id(FU_DEVICE(self), g_udev_device_get_sysfs_path(priv->udev_device));
libfwupdplugin/fu-udev-device.c:	if (priv->device_file == NULL) {
libfwupdplugin/fu-udev-device.c:		if (g_strcmp0(priv->subsystem, "serio") == 0)
libfwupdplugin/fu-udev-device.c:			priv->device_file = fu_udev_device_get_miscdev0(self);
libfwupdplugin/fu-udev-device.c:		if (priv->device_file != NULL)
libfwupdplugin/fu-udev-device.c:			g_debug("falling back to misc %s", priv->device_file);
libfwupdplugin/fu-udev-device.c:	summary = g_udev_device_get_sysfs_attr(priv->udev_device, "description");
libfwupdplugin/fu-udev-device.c:		parent = g_udev_device_get_parent(priv->udev_device);
libfwupdplugin/fu-udev-device.c:		return g_strdup(g_udev_device_get_property(priv->udev_device, "PCI_SLOT_NAME"));
libfwupdplugin/fu-udev-device.c:		return g_strdup(g_udev_device_get_property(priv->udev_device, "HID_PHYS"));
libfwupdplugin/fu-udev-device.c:		return g_path_get_basename(g_udev_device_get_sysfs_path(priv->udev_device));
libfwupdplugin/fu-udev-device.c:	fn = g_build_filename(g_udev_device_get_sysfs_path(priv->udev_device),
libfwupdplugin/fu-udev-device.c:			    priv->subsystem);
libfwupdplugin/fu-udev-device.c:			    priv->subsystem);
libfwupdplugin/fu-udev-device.c:	if (priv->device_file == NULL) {
libfwupdplugin/fu-udev-device.c:	return priv->udev_device;
libfwupdplugin/fu-udev-device.c:	return priv->subsystem;
libfwupdplugin/fu-udev-device.c:	return priv->driver;
libfwupdplugin/fu-udev-device.c:	return priv->device_file;
libfwupdplugin/fu-udev-device.c:	if (priv->udev_device != NULL)
libfwupdplugin/fu-udev-device.c:		return g_udev_device_get_sysfs_path(priv->udev_device);
libfwupdplugin/fu-udev-device.c:	if (priv->udev_device != NULL)
libfwupdplugin/fu-udev-device.c:		return fu_common_strtoull(g_udev_device_get_number(priv->udev_device));
libfwupdplugin/fu-udev-device.c:	return priv->vendor;
libfwupdplugin/fu-udev-device.c:	return priv->model;
libfwupdplugin/fu-udev-device.c:	return priv->subsystem_vendor;
libfwupdplugin/fu-udev-device.c:	return priv->subsystem_model;
libfwupdplugin/fu-udev-device.c:	return priv->revision;
libfwupdplugin/fu-udev-device.c:	g_autoptr(GUdevDevice) udev_device = g_object_ref(priv->udev_device);
libfwupdplugin/fu-udev-device.c:	if (priv->subsystem != NULL)
libfwupdplugin/fu-udev-device.c:		g_string_append_printf(str, "%s,", priv->subsystem);
libfwupdplugin/fu-udev-device.c:	if (priv->udev_device == NULL)
libfwupdplugin/fu-udev-device.c:		if (g_strcmp0(priv->subsystem, subsystem) == 0) {
libfwupdplugin/fu-udev-device.c:			udev_device = g_object_ref(priv->udev_device);
libfwupdplugin/fu-udev-device.c:		    g_udev_device_get_parent_with_subsystem(priv->udev_device, subsystem, NULL);
libfwupdplugin/fu-udev-device.c:	if (priv->udev_device == NULL)
libfwupdplugin/fu-udev-device.c:	if (g_strcmp0(priv->subsystem, subsystem) == 0) {
libfwupdplugin/fu-udev-device.c:		udev_device = g_object_ref(priv->udev_device);
libfwupdplugin/fu-udev-device.c:		    g_udev_device_get_parent_with_subsystem(priv->udev_device, subsystem, NULL);
libfwupdplugin/fu-udev-device.c:	return priv->fd;
libfwupdplugin/fu-udev-device.c:	if (priv->fd > 0)
libfwupdplugin/fu-udev-device.c:		close(priv->fd);
libfwupdplugin/fu-udev-device.c:	priv->fd = fd;
libfwupdplugin/fu-udev-device.c:	priv->flags = flags;
libfwupdplugin/fu-udev-device.c:		g_free(priv->device_file);
libfwupdplugin/fu-udev-device.c:		priv->device_file =
libfwupdplugin/fu-udev-device.c:		    g_build_filename(g_udev_device_get_sysfs_path(priv->udev_device),
libfwupdplugin/fu-udev-device.c:	if (priv->device_file != NULL && priv->flags != FU_UDEV_DEVICE_FLAG_NONE) {
libfwupdplugin/fu-udev-device.c:		if (priv->flags & FU_UDEV_DEVICE_FLAG_OPEN_READ &&
libfwupdplugin/fu-udev-device.c:		    priv->flags & FU_UDEV_DEVICE_FLAG_OPEN_WRITE) {
libfwupdplugin/fu-udev-device.c:		} else if (priv->flags & FU_UDEV_DEVICE_FLAG_OPEN_WRITE) {
libfwupdplugin/fu-udev-device.c:		if (priv->flags & FU_UDEV_DEVICE_FLAG_OPEN_NONBLOCK)
libfwupdplugin/fu-udev-device.c:		priv->fd = g_open(priv->device_file, flags, 0);
libfwupdplugin/fu-udev-device.c:		if (priv->fd < 0) {
libfwupdplugin/fu-udev-device.c:				    priv->device_file,
libfwupdplugin/fu-udev-device.c:	if (priv->udev_device == NULL) {
libfwupdplugin/fu-udev-device.c:	sysfs_path = g_udev_device_get_sysfs_path(priv->udev_device);
libfwupdplugin/fu-udev-device.c:	if (priv->fd > 0) {
libfwupdplugin/fu-udev-device.c:		if (!g_close(priv->fd, error))
libfwupdplugin/fu-udev-device.c:		priv->fd = 0;
libfwupdplugin/fu-udev-device.c:	if (priv->fd == 0) {
libfwupdplugin/fu-udev-device.c:	rc_tmp = ioctl(priv->fd, request, buf);
libfwupdplugin/fu-udev-device.c:	if (priv->fd == 0) {
libfwupdplugin/fu-udev-device.c:	if (pread(priv->fd, buf, bufsz, port) != (gssize)bufsz) {
libfwupdplugin/fu-udev-device.c:	if (priv->fd == 0) {
libfwupdplugin/fu-udev-device.c:	if (pwrite(priv->fd, buf, bufsz, port) != (gssize)bufsz) {
libfwupdplugin/fu-udev-device.c:	parent = g_udev_device_get_parent(priv->udev_device);
libfwupdplugin/fu-udev-device.c:	if (priv->udev_device == NULL) {
libfwupdplugin/fu-udev-device.c:	result = g_udev_device_get_sysfs_attr(priv->udev_device, attr);
libfwupdplugin/fu-udev-device.c:	return g_udev_device_get_devtype(priv->udev_device);
libfwupdplugin/fu-udev-device.c:	g_autoptr(GUdevDevice) udev_parent = g_udev_device_get_parent(priv->udev_device);
libfwupdplugin/fu-udev-device.c:		g_value_set_object(value, priv->udev_device);
libfwupdplugin/fu-udev-device.c:		g_value_set_string(value, priv->subsystem);
libfwupdplugin/fu-udev-device.c:		g_value_set_string(value, priv->driver);
libfwupdplugin/fu-udev-device.c:		g_value_set_string(value, priv->device_file);
libfwupdplugin/fu-udev-device.c:	g_free(priv->subsystem);
libfwupdplugin/fu-udev-device.c:	g_free(priv->driver);
libfwupdplugin/fu-udev-device.c:	g_free(priv->device_file);
libfwupdplugin/fu-udev-device.c:	if (priv->udev_device != NULL)
libfwupdplugin/fu-udev-device.c:		g_object_unref(priv->udev_device);
libfwupdplugin/fu-udev-device.c:	if (priv->fd > 0)
libfwupdplugin/fu-udev-device.c:		g_close(priv->fd, NULL);
libfwupdplugin/fu-udev-device.c:	priv->flags = FU_UDEV_DEVICE_FLAG_OPEN_READ | FU_UDEV_DEVICE_FLAG_OPEN_WRITE;
libfwupdplugin/fu-backend.c:		fu_device_set_context(device, priv->ctx);
libfwupdplugin/fu-backend.c:	g_hash_table_insert(priv->devices,
libfwupdplugin/fu-backend.c:	g_hash_table_remove(priv->devices, fu_device_get_backend_id(device));
libfwupdplugin/fu-backend.c:	if (priv->done_setup)
libfwupdplugin/fu-backend.c:			priv->enabled = FALSE;
libfwupdplugin/fu-backend.c:	priv->done_setup = TRUE;
libfwupdplugin/fu-backend.c:	return priv->name;
libfwupdplugin/fu-backend.c:	return priv->ctx;
libfwupdplugin/fu-backend.c:	return priv->enabled;
libfwupdplugin/fu-backend.c:	priv->enabled = FALSE;
libfwupdplugin/fu-backend.c:	return g_hash_table_lookup(priv->devices, device_id);
libfwupdplugin/fu-backend.c:	values = g_hash_table_get_values(priv->devices);
libfwupdplugin/fu-backend.c:		g_value_set_string(value, priv->name);
libfwupdplugin/fu-backend.c:		g_value_set_object(value, priv->ctx);
libfwupdplugin/fu-backend.c:		priv->name = g_value_dup_string(value);
libfwupdplugin/fu-backend.c:		g_set_object(&priv->ctx, g_value_get_object(value));
libfwupdplugin/fu-backend.c:	priv->enabled = TRUE;
libfwupdplugin/fu-backend.c:	priv->devices =
libfwupdplugin/fu-backend.c:	if (priv->ctx != NULL)
libfwupdplugin/fu-backend.c:		g_object_unref(priv->ctx);
libfwupdplugin/fu-backend.c:	g_free(priv->name);
libfwupdplugin/fu-backend.c:	g_hash_table_unref(priv->devices);
libfwupdplugin/fu-srec-firmware.c:	return priv->records;
libfwupdplugin/fu-srec-firmware.c:	g_ptr_array_add(priv->records, g_steal_pointer(&rcd));
libfwupdplugin/fu-srec-firmware.c:	for (guint j = 0; j < priv->records->len; j++) {
libfwupdplugin/fu-srec-firmware.c:		FuSrecFirmwareRecord *rcd = g_ptr_array_index(priv->records, j);
libfwupdplugin/fu-srec-firmware.c:	g_ptr_array_unref(priv->records);
libfwupdplugin/fu-srec-firmware.c:	priv->records = g_ptr_array_new_with_free_func((GFreeFunc)fu_srec_firmware_record_free);
libfwupdplugin/fu-ifd-firmware.c:	fu_xmlb_builder_insert_kx(bn, "descriptor_map0", priv->descriptor_map0);
libfwupdplugin/fu-ifd-firmware.c:	fu_xmlb_builder_insert_kx(bn, "descriptor_map1", priv->descriptor_map1);
libfwupdplugin/fu-ifd-firmware.c:	fu_xmlb_builder_insert_kx(bn, "descriptor_map2", priv->descriptor_map2);
libfwupdplugin/fu-ifd-firmware.c:	fu_xmlb_builder_insert_kx(bn, "num_regions", priv->num_regions);
libfwupdplugin/fu-ifd-firmware.c:	fu_xmlb_builder_insert_kx(bn, "num_components", priv->num_components + 1);
libfwupdplugin/fu-ifd-firmware.c:	fu_xmlb_builder_insert_kx(bn, "flash_region_base_addr", priv->flash_region_base_addr);
libfwupdplugin/fu-ifd-firmware.c:	fu_xmlb_builder_insert_kx(bn, "flash_component_base_addr", priv->flash_component_base_addr);
libfwupdplugin/fu-ifd-firmware.c:	fu_xmlb_builder_insert_kx(bn, "flash_master_base_addr", priv->flash_master_base_addr);
libfwupdplugin/fu-ifd-firmware.c:	fu_xmlb_builder_insert_kx(bn, "flash_ich_strap_base_addr", priv->flash_ich_strap_base_addr);
libfwupdplugin/fu-ifd-firmware.c:	fu_xmlb_builder_insert_kx(bn, "flash_mch_strap_base_addr", priv->flash_mch_strap_base_addr);
libfwupdplugin/fu-ifd-firmware.c:	fu_xmlb_builder_insert_kx(bn, "components_rcd", priv->components_rcd);
libfwupdplugin/fu-ifd-firmware.c:	fu_xmlb_builder_insert_kx(bn, "illegal_jedec", priv->illegal_jedec);
libfwupdplugin/fu-ifd-firmware.c:	fu_xmlb_builder_insert_kx(bn, "illegal_jedec1", priv->illegal_jedec1);
libfwupdplugin/fu-ifd-firmware.c:			fu_xmlb_builder_insert_kx(bn, title, priv->flash_master[i]);
libfwupdplugin/fu-ifd-firmware.c:		if (priv->flash_descriptor_regs != NULL) {
libfwupdplugin/fu-ifd-firmware.c:			for (guint i = 0; i < priv->num_regions; i++) {
libfwupdplugin/fu-ifd-firmware.c:							  priv->flash_descriptor_regs[i]);
libfwupdplugin/fu-ifd-firmware.c:	priv->descriptor_map0 =
libfwupdplugin/fu-ifd-firmware.c:	priv->num_regions = (priv->descriptor_map0 >> 24) & 0b111;
libfwupdplugin/fu-ifd-firmware.c:	if (priv->num_regions == 0)
libfwupdplugin/fu-ifd-firmware.c:		priv->num_regions = 10;
libfwupdplugin/fu-ifd-firmware.c:	priv->num_components = (priv->descriptor_map0 >> 8) & 0b11;
libfwupdplugin/fu-ifd-firmware.c:	priv->flash_component_base_addr = (priv->descriptor_map0 << 4) & 0x00000FF0;
libfwupdplugin/fu-ifd-firmware.c:	priv->flash_region_base_addr = (priv->descriptor_map0 >> 12) & 0x00000FF0;
libfwupdplugin/fu-ifd-firmware.c:	priv->descriptor_map1 =
libfwupdplugin/fu-ifd-firmware.c:	priv->flash_master_base_addr = (priv->descriptor_map1 << 4) & 0x00000FF0;
libfwupdplugin/fu-ifd-firmware.c:	priv->flash_ich_strap_base_addr = (priv->descriptor_map1 >> 12) & 0x00000FF0;
libfwupdplugin/fu-ifd-firmware.c:	priv->descriptor_map2 =
libfwupdplugin/fu-ifd-firmware.c:	priv->flash_mch_strap_base_addr = (priv->descriptor_map2 << 4) & 0x00000FF0;
libfwupdplugin/fu-ifd-firmware.c:					priv->flash_component_base_addr + FU_IFD_FCBA_FLCOMP,
libfwupdplugin/fu-ifd-firmware.c:					&priv->components_rcd,
libfwupdplugin/fu-ifd-firmware.c:					priv->flash_component_base_addr + FU_IFD_FCBA_FLILL,
libfwupdplugin/fu-ifd-firmware.c:					&priv->illegal_jedec,
libfwupdplugin/fu-ifd-firmware.c:					priv->flash_component_base_addr + FU_IFD_FCBA_FLILL1,
libfwupdplugin/fu-ifd-firmware.c:					&priv->illegal_jedec1,
libfwupdplugin/fu-ifd-firmware.c:					priv->flash_master_base_addr + 0x0,
libfwupdplugin/fu-ifd-firmware.c:					&priv->flash_master[1],
libfwupdplugin/fu-ifd-firmware.c:					priv->flash_master_base_addr + 0x4,
libfwupdplugin/fu-ifd-firmware.c:					&priv->flash_master[2],
libfwupdplugin/fu-ifd-firmware.c:					priv->flash_master_base_addr + 0x8,
libfwupdplugin/fu-ifd-firmware.c:					&priv->flash_master[3],
libfwupdplugin/fu-ifd-firmware.c:	priv->flash_descriptor_regs = g_new0(guint32, priv->num_regions);
libfwupdplugin/fu-ifd-firmware.c:	for (guint i = 0; i < priv->num_regions; i++) {
libfwupdplugin/fu-ifd-firmware.c:						priv->flash_region_base_addr +
libfwupdplugin/fu-ifd-firmware.c:						&priv->flash_descriptor_regs[i],
libfwupdplugin/fu-ifd-firmware.c:	for (guint i = 0; i < priv->num_regions; i++) {
libfwupdplugin/fu-ifd-firmware.c:		guint32 freg_base = FU_IFD_FREG_BASE(priv->flash_descriptor_regs[i]);
libfwupdplugin/fu-ifd-firmware.c:		guint32 freg_limt = FU_IFD_FREG_LIMIT(priv->flash_descriptor_regs[i]);
libfwupdplugin/fu-ifd-firmware.c:			acc = fu_ifd_region_to_access(i, priv->flash_master[r], priv->new_layout);
libfwupdplugin/fu-ifd-firmware.c:		if (((priv->illegal_jedec >> j) & 0xff) == cmd)
libfwupdplugin/fu-ifd-firmware.c:		if (((priv->illegal_jedec1 >> j) & 0xff) == cmd)
libfwupdplugin/fu-ifd-firmware.c:	for (guint i = 0; i < priv->num_regions; i++) {
libfwupdplugin/fu-ifd-firmware.c:			       priv->descriptor_map0,
libfwupdplugin/fu-ifd-firmware.c:			       priv->descriptor_map1,
libfwupdplugin/fu-ifd-firmware.c:			       priv->descriptor_map2,
libfwupdplugin/fu-ifd-firmware.c:					 priv->flash_component_base_addr + FU_IFD_FCBA_FLCOMP,
libfwupdplugin/fu-ifd-firmware.c:					 priv->components_rcd,
libfwupdplugin/fu-ifd-firmware.c:					 priv->flash_component_base_addr + FU_IFD_FCBA_FLILL,
libfwupdplugin/fu-ifd-firmware.c:					 priv->illegal_jedec,
libfwupdplugin/fu-ifd-firmware.c:					 priv->flash_component_base_addr + FU_IFD_FCBA_FLILL1,
libfwupdplugin/fu-ifd-firmware.c:					 priv->illegal_jedec1,
libfwupdplugin/fu-ifd-firmware.c:	for (guint i = 0; i < priv->num_regions; i++) {
libfwupdplugin/fu-ifd-firmware.c:						 priv->flash_region_base_addr +
libfwupdplugin/fu-ifd-firmware.c:	for (guint i = 1; i < priv->num_regions; i++) {
libfwupdplugin/fu-ifd-firmware.c:		priv->descriptor_map0 = tmp;
libfwupdplugin/fu-ifd-firmware.c:		priv->descriptor_map1 = tmp;
libfwupdplugin/fu-ifd-firmware.c:		priv->descriptor_map2 = tmp;
libfwupdplugin/fu-ifd-firmware.c:		priv->components_rcd = tmp;
libfwupdplugin/fu-ifd-firmware.c:		priv->illegal_jedec = tmp & 0xFFFFFFFF;
libfwupdplugin/fu-ifd-firmware.c:		priv->illegal_jedec1 = tmp >> 32;
libfwupdplugin/fu-ifd-firmware.c:	priv->new_layout = TRUE;
libfwupdplugin/fu-ifd-firmware.c:	priv->num_regions = 10;
libfwupdplugin/fu-ifd-firmware.c:	priv->flash_region_base_addr = 0x40;
libfwupdplugin/fu-ifd-firmware.c:	priv->flash_component_base_addr = 0x30;
libfwupdplugin/fu-ifd-firmware.c:	priv->flash_master_base_addr = 0x80;
libfwupdplugin/fu-ifd-firmware.c:	priv->flash_master[1] = 0x00A00F00;
libfwupdplugin/fu-ifd-firmware.c:	priv->flash_master[2] = 0x00400D00;
libfwupdplugin/fu-ifd-firmware.c:	priv->flash_master[3] = 0x00800900;
libfwupdplugin/fu-ifd-firmware.c:	priv->flash_ich_strap_base_addr = 0x100;
libfwupdplugin/fu-ifd-firmware.c:	priv->flash_mch_strap_base_addr = 0x300;
libfwupdplugin/fu-ifd-firmware.c:	g_free(priv->flash_descriptor_regs);
libfwupdplugin/fu-efi-firmware-volume.c:	fu_xmlb_builder_insert_kx(bn, "attrs", priv->attrs);
libfwupdplugin/fu-efi-firmware-volume.c:	priv->attrs = attrs & 0xffff;
libfwupdplugin/fu-efi-firmware-volume.c:				    priv->attrs |
libfwupdplugin/fu-efi-firmware-volume.c:	priv->attrs = 0xfeff;
libfwupdplugin/fu-progress.c:	return priv->id;
libfwupdplugin/fu-progress.c:	if (g_strcmp0(priv->id, id) == 0)
libfwupdplugin/fu-progress.c:	g_free(priv->id);
libfwupdplugin/fu-progress.c:	priv->id = g_strdup(id);
libfwupdplugin/fu-progress.c:	return priv->status;
libfwupdplugin/fu-progress.c:	priv->flags |= flag;
libfwupdplugin/fu-progress.c:	priv->flags &= ~flag;
libfwupdplugin/fu-progress.c:	return (priv->flags & flag) > 0;
libfwupdplugin/fu-progress.c:	if (priv->status == status)
libfwupdplugin/fu-progress.c:	priv->status = status;
libfwupdplugin/fu-progress.c:	return priv->percentage;
libfwupdplugin/fu-progress.c:	if (priv->parent != NULL)
libfwupdplugin/fu-progress.c:		fu_progress_build_parent_chain(priv->parent, str, level + 1);
libfwupdplugin/fu-progress.c:			       priv->id,
libfwupdplugin/fu-progress.c:			       priv->step_now,
libfwupdplugin/fu-progress.c:			       priv->step_max);
libfwupdplugin/fu-progress.c:	if (percentage == priv->percentage)
libfwupdplugin/fu-progress.c:	if (percentage < priv->percentage) {
libfwupdplugin/fu-progress.c:		if (priv->profile) {
libfwupdplugin/fu-progress.c:				  priv->percentage,
libfwupdplugin/fu-progress.c:	priv->percentage = percentage;
libfwupdplugin/fu-progress.c:	priv->profile = profile;
libfwupdplugin/fu-progress.c:	return priv->profile;
libfwupdplugin/fu-progress.c:	priv->step_max = 0;
libfwupdplugin/fu-progress.c:	priv->step_now = 0;
libfwupdplugin/fu-progress.c:	priv->percentage = 0;
libfwupdplugin/fu-progress.c:	if (priv->profile)
libfwupdplugin/fu-progress.c:		g_timer_start(priv->timer);
libfwupdplugin/fu-progress.c:	if (priv->percentage_child_id != 0) {
libfwupdplugin/fu-progress.c:		g_signal_handler_disconnect(priv->child, priv->percentage_child_id);
libfwupdplugin/fu-progress.c:		priv->percentage_child_id = 0;
libfwupdplugin/fu-progress.c:	if (priv->status_child_id != 0) {
libfwupdplugin/fu-progress.c:		g_signal_handler_disconnect(priv->child, priv->status_child_id);
libfwupdplugin/fu-progress.c:		priv->status_child_id = 0;
libfwupdplugin/fu-progress.c:	g_clear_object(&priv->child);
libfwupdplugin/fu-progress.c:	g_ptr_array_set_size(priv->steps, 0);
libfwupdplugin/fu-progress.c:	g_return_if_fail(priv->id != NULL);
libfwupdplugin/fu-progress.c:	if (priv->profile)
libfwupdplugin/fu-progress.c:		g_timer_start(priv->timer);
libfwupdplugin/fu-progress.c:	priv->step_max = step_max;
libfwupdplugin/fu-progress.c:	return priv->step_max;
libfwupdplugin/fu-progress.c:	g_return_if_fail(priv->id != NULL);
libfwupdplugin/fu-progress.c:	if (priv->steps->len == 0)
libfwupdplugin/fu-progress.c:	g_ptr_array_add(priv->steps, step);
libfwupdplugin/fu-progress.c:	fu_progress_set_steps(self, priv->steps->len);
libfwupdplugin/fu-progress.c:	g_return_if_fail(priv->id != NULL);
libfwupdplugin/fu-progress.c:	if (priv->step_now == priv->step_max)
libfwupdplugin/fu-progress.c:	priv->step_now = priv->step_max;
libfwupdplugin/fu-progress.c:	for (guint i = 0; i < priv->steps->len; i++) {
libfwupdplugin/fu-progress.c:		FuProgressStep *step = g_ptr_array_index(priv->steps, i);
libfwupdplugin/fu-progress.c:	if (priv->step_max == 1) {
libfwupdplugin/fu-progress.c:	if (priv->step_max == 0)
libfwupdplugin/fu-progress.c:	if (priv->step_now >= priv->step_max) {
libfwupdplugin/fu-progress.c:		g_warning("already at %u/%u step_max", priv->step_now, priv->step_max);
libfwupdplugin/fu-progress.c:	if (priv->steps->len > 0) {
libfwupdplugin/fu-progress.c:		if (priv->step_now == 0) {
libfwupdplugin/fu-progress.c:			gdouble pc1 = fu_progress_get_step_percentage(self, priv->step_now - 1);
libfwupdplugin/fu-progress.c:			gdouble pc2 = fu_progress_get_step_percentage(self, priv->step_now);
libfwupdplugin/fu-progress.c:	offset = fu_progress_discrete_to_percent(priv->step_now, priv->step_max);
libfwupdplugin/fu-progress.c:	range = fu_progress_discrete_to_percent(priv->step_now + 1, priv->step_max) - offset;
libfwupdplugin/fu-progress.c:	priv->parent = parent; /* no ref! */
libfwupdplugin/fu-progress.c:	priv->profile = fu_progress_get_profile(parent);
libfwupdplugin/fu-progress.c:	g_return_val_if_fail(priv->id != NULL, NULL);
libfwupdplugin/fu-progress.c:	if (priv->child != NULL)
libfwupdplugin/fu-progress.c:		return priv->child;
libfwupdplugin/fu-progress.c:	priv->child = fu_progress_new(NULL);
libfwupdplugin/fu-progress.c:	priv->percentage_child_id =
libfwupdplugin/fu-progress.c:	    g_signal_connect(priv->child,
libfwupdplugin/fu-progress.c:	priv->status_child_id = g_signal_connect(priv->child,
libfwupdplugin/fu-progress.c:	fu_progress_set_parent(priv->child, self);
libfwupdplugin/fu-progress.c:	return priv->child;
libfwupdplugin/fu-progress.c:	if (priv->flags & FU_PROGRESS_FLAG_NO_PROFILE)
libfwupdplugin/fu-progress.c:	for (guint i = 0; i < priv->step_max; i++) {
libfwupdplugin/fu-progress.c:		FuProgressStep *step = g_ptr_array_index(priv->steps, i);
libfwupdplugin/fu-progress.c:	if (priv->step_max > 0)
libfwupdplugin/fu-progress.c:	for (guint i = 0; i < priv->step_max; i++) {
libfwupdplugin/fu-progress.c:		FuProgressStep *step = g_ptr_array_index(priv->steps, i);
libfwupdplugin/fu-progress.c:	for (guint i = 0; i < priv->step_max; i++) {
libfwupdplugin/fu-progress.c:		FuProgressStep *step = g_ptr_array_index(priv->steps, i);
libfwupdplugin/fu-progress.c:	for (guint i = 0; i < priv->step_max; i++) {
libfwupdplugin/fu-progress.c:		FuProgressStep *step = g_ptr_array_index(priv->steps, i);
libfwupdplugin/fu-progress.c:	if (priv->flags & FU_PROGRESS_FLAG_GUESSED) {
libfwupdplugin/fu-progress.c:		g_debug("%s at %s", str->str, priv->id);
libfwupdplugin/fu-progress.c:		g_warning("%s at %s", str->str, priv->id);
libfwupdplugin/fu-progress.c:		g_debug("%s at %s", str->str, priv->id);
libfwupdplugin/fu-progress.c:	g_return_if_fail(priv->id != NULL);
libfwupdplugin/fu-progress.c:	if (priv->step_max == 0) {
libfwupdplugin/fu-progress.c:		g_warning("progress done when no size set! [%s]: %s", priv->id, str->str);
libfwupdplugin/fu-progress.c:	if (priv->profile) {
libfwupdplugin/fu-progress.c:		if (priv->steps->len > 0) {
libfwupdplugin/fu-progress.c:			FuProgressStep *step = g_ptr_array_index(priv->steps, priv->step_now);
libfwupdplugin/fu-progress.c:			step->profile = g_timer_elapsed(priv->timer, NULL);
libfwupdplugin/fu-progress.c:		g_timer_start(priv->timer);
libfwupdplugin/fu-progress.c:	if (priv->step_now >= priv->step_max) {
libfwupdplugin/fu-progress.c:		g_warning("already at 100%% [%s]: %s", priv->id, str->str);
libfwupdplugin/fu-progress.c:	if (priv->child != NULL) {
libfwupdplugin/fu-progress.c:		FuProgressPrivate *child_priv = GET_PRIVATE(priv->child);
libfwupdplugin/fu-progress.c:		if (child_priv->step_now != child_priv->step_max) {
libfwupdplugin/fu-progress.c:			fu_progress_build_parent_chain(priv->child, str, 0);
libfwupdplugin/fu-progress.c:				  child_priv->step_now,
libfwupdplugin/fu-progress.c:				  child_priv->step_max,
libfwupdplugin/fu-progress.c:				  priv->id,
libfwupdplugin/fu-progress.c:	priv->step_now++;
libfwupdplugin/fu-progress.c:	if (priv->steps->len > 0) {
libfwupdplugin/fu-progress.c:		if (priv->step_now == priv->step_max) {
libfwupdplugin/fu-progress.c:			FuProgressStep *step = g_ptr_array_index(priv->steps, priv->step_now);
libfwupdplugin/fu-progress.c:	if (priv->steps->len == 0) {
libfwupdplugin/fu-progress.c:		percentage = fu_progress_discrete_to_percent(priv->step_now, priv->step_max);
libfwupdplugin/fu-progress.c:		percentage = fu_progress_get_step_percentage(self, priv->step_now - 1);
libfwupdplugin/fu-progress.c:	if (priv->profile && priv->step_now == priv->step_max && priv->steps->len > 0)
libfwupdplugin/fu-progress.c:	if (priv->child != NULL)
libfwupdplugin/fu-progress.c:		fu_progress_reset(priv->child);
libfwupdplugin/fu-progress.c:	priv->timer = g_timer_new();
libfwupdplugin/fu-progress.c:	priv->steps = g_ptr_array_new_with_free_func(g_free);
libfwupdplugin/fu-progress.c:	g_free(priv->id);
libfwupdplugin/fu-progress.c:	g_ptr_array_unref(priv->steps);
libfwupdplugin/fu-progress.c:	g_timer_destroy(priv->timer);
libfwupdplugin/fu-efi-firmware-section.c:	fu_xmlb_builder_insert_kx(bn, "type", priv->type);
libfwupdplugin/fu-efi-firmware-section.c:					  fu_efi_firmware_section_type_to_string(priv->type));
libfwupdplugin/fu-efi-firmware-section.c:				       &priv->type,
libfwupdplugin/fu-efi-firmware-section.c:	if (priv->type == FU_EFI_FIRMWARE_SECTION_TYPE_GUID_DEFINED) {
libfwupdplugin/fu-efi-firmware-section.c:	if (priv->type == FU_EFI_FIRMWARE_SECTION_TYPE_VOLUME_IMAGE) {
libfwupdplugin/fu-efi-firmware-section.c:	} else if (priv->type == FU_EFI_FIRMWARE_SECTION_TYPE_GUID_DEFINED &&
libfwupdplugin/fu-efi-firmware-section.c:	if (priv->type == FU_EFI_FIRMWARE_SECTION_TYPE_GUID_DEFINED) {
libfwupdplugin/fu-efi-firmware-section.c:	buf->data[FU_EFI_FIRMWARE_SECTION_OFFSET_TYPE] = priv->type;
libfwupdplugin/fu-efi-firmware-section.c:		priv->type = tmp;
libfwupdplugin/fu-efi-firmware-section.c:	priv->type = FU_EFI_FIRMWARE_SECTION_TYPE_RAW;
libfwupdplugin/fu-dfu-firmware.c:	fu_xmlb_builder_insert_kx(bn, "vendor", priv->vid);
libfwupdplugin/fu-dfu-firmware.c:	fu_xmlb_builder_insert_kx(bn, "product", priv->pid);
libfwupdplugin/fu-dfu-firmware.c:	fu_xmlb_builder_insert_kx(bn, "release", priv->release);
libfwupdplugin/fu-dfu-firmware.c:	fu_xmlb_builder_insert_kx(bn, "dfu_version", priv->dfu_version);
libfwupdplugin/fu-dfu-firmware.c:	return priv->footer_len;
libfwupdplugin/fu-dfu-firmware.c:	return priv->vid;
libfwupdplugin/fu-dfu-firmware.c:	return priv->pid;
libfwupdplugin/fu-dfu-firmware.c:	return priv->release;
libfwupdplugin/fu-dfu-firmware.c:	return priv->dfu_version;
libfwupdplugin/fu-dfu-firmware.c:	priv->vid = vid;
libfwupdplugin/fu-dfu-firmware.c:	priv->pid = pid;
libfwupdplugin/fu-dfu-firmware.c:	priv->release = release;
libfwupdplugin/fu-dfu-firmware.c:	priv->dfu_version = version;
libfwupdplugin/fu-dfu-firmware.c:	priv->vid = GUINT16_FROM_LE(ftr.vid);
libfwupdplugin/fu-dfu-firmware.c:	priv->pid = GUINT16_FROM_LE(ftr.pid);
libfwupdplugin/fu-dfu-firmware.c:	priv->release = GUINT16_FROM_LE(ftr.release);
libfwupdplugin/fu-dfu-firmware.c:	priv->dfu_version = GUINT16_FROM_LE(ftr.ver);
libfwupdplugin/fu-dfu-firmware.c:	priv->footer_len = ftr.len;
libfwupdplugin/fu-dfu-firmware.c:	if (priv->footer_len > len) {
libfwupdplugin/fu-dfu-firmware.c:			    (guint)priv->footer_len,
libfwupdplugin/fu-dfu-firmware.c:	contents = fu_common_bytes_new_offset(fw, 0, len - priv->footer_len, error);
libfwupdplugin/fu-dfu-firmware.c:	fu_byte_array_append_uint16(buf, priv->release, G_LITTLE_ENDIAN);
libfwupdplugin/fu-dfu-firmware.c:	fu_byte_array_append_uint16(buf, priv->pid, G_LITTLE_ENDIAN);
libfwupdplugin/fu-dfu-firmware.c:	fu_byte_array_append_uint16(buf, priv->vid, G_LITTLE_ENDIAN);
libfwupdplugin/fu-dfu-firmware.c:	fu_byte_array_append_uint16(buf, priv->dfu_version, G_LITTLE_ENDIAN);
libfwupdplugin/fu-dfu-firmware.c:		priv->vid = tmp;
libfwupdplugin/fu-dfu-firmware.c:		priv->pid = tmp;
libfwupdplugin/fu-dfu-firmware.c:		priv->release = tmp;
libfwupdplugin/fu-dfu-firmware.c:		priv->dfu_version = tmp;
libfwupdplugin/fu-dfu-firmware.c:	priv->vid = 0xffff;
libfwupdplugin/fu-dfu-firmware.c:	priv->pid = 0xffff;
libfwupdplugin/fu-dfu-firmware.c:	priv->release = 0xffff;
libfwupdplugin/fu-dfu-firmware.c:	priv->dfu_version = FU_DFU_FIRMARE_VERSION_DFU_1_0;
libfwupdplugin/fu-bluez-device.c:	uuid_helper = g_hash_table_lookup(priv->uuids, uuid);
libfwupdplugin/fu-bluez-device.c:	g_hash_table_insert(priv->uuids, g_strdup(uuid), uuid_helper);
libfwupdplugin/fu-bluez-device.c:	if (priv->uuids != NULL) {
libfwupdplugin/fu-bluez-device.c:		g_hash_table_iter_init(&iter, priv->uuids);
libfwupdplugin/fu-bluez-device.c:	obj_list = g_dbus_object_manager_get_objects(priv->object_manager);
libfwupdplugin/fu-bluez-device.c:				      g_dbus_proxy_get_object_path(priv->proxy)))
libfwupdplugin/fu-bluez-device.c:	val_address = g_dbus_proxy_get_cached_property(priv->proxy, "Address");
libfwupdplugin/fu-bluez-device.c:	val_adapter = g_dbus_proxy_get_cached_property(priv->proxy, "Adapter");
libfwupdplugin/fu-bluez-device.c:	val_name = g_dbus_proxy_get_cached_property(priv->proxy, "Name");
libfwupdplugin/fu-bluez-device.c:	val_icon = g_dbus_proxy_get_cached_property(priv->proxy, "Icon");
libfwupdplugin/fu-bluez-device.c:	val_modalias = g_dbus_proxy_get_cached_property(priv->proxy, "Modalias");
libfwupdplugin/fu-bluez-device.c:	if (g_hash_table_size(priv->uuids) == 0) {
libfwupdplugin/fu-bluez-device.c:	if (priv->object_manager == NULL)
libfwupdplugin/fu-bluez-device.c:		priv->object_manager = g_object_ref(privdonor->object_manager);
libfwupdplugin/fu-bluez-device.c:	if (priv->proxy == NULL)
libfwupdplugin/fu-bluez-device.c:		priv->proxy = g_object_ref(privdonor->proxy);
libfwupdplugin/fu-bluez-device.c:		g_value_set_object(value, priv->object_manager);
libfwupdplugin/fu-bluez-device.c:		g_value_set_object(value, priv->proxy);
libfwupdplugin/fu-bluez-device.c:		priv->object_manager = g_value_dup_object(value);
libfwupdplugin/fu-bluez-device.c:		priv->proxy = g_value_dup_object(value);
libfwupdplugin/fu-bluez-device.c:	g_hash_table_unref(priv->uuids);
libfwupdplugin/fu-bluez-device.c:	g_object_unref(priv->proxy);
libfwupdplugin/fu-bluez-device.c:	g_object_unref(priv->object_manager);
libfwupdplugin/fu-bluez-device.c:	priv->uuids = g_hash_table_new_full(g_str_hash,
libfwupdplugin/fu-device.c:		g_value_set_uint(value, priv->battery_level);
libfwupdplugin/fu-device.c:		g_value_set_uint(value, priv->battery_threshold);
libfwupdplugin/fu-device.c:		g_value_set_string(value, priv->physical_id);
libfwupdplugin/fu-device.c:		g_value_set_string(value, priv->logical_id);
libfwupdplugin/fu-device.c:		g_value_set_string(value, priv->backend_id);
libfwupdplugin/fu-device.c:		g_value_set_object(value, priv->ctx);
libfwupdplugin/fu-device.c:		g_value_set_object(value, priv->proxy);
libfwupdplugin/fu-device.c:	priv->internal_flags |= flag;
libfwupdplugin/fu-device.c:	priv->internal_flags &= ~flag;
libfwupdplugin/fu-device.c:	return (priv->internal_flags & flag) > 0;
libfwupdplugin/fu-device.c:	priv->private_flags |= flag;
libfwupdplugin/fu-device.c:	priv->private_flags &= ~flag;
libfwupdplugin/fu-device.c:	return (priv->private_flags & flag) > 0;
libfwupdplugin/fu-device.c:	return priv->private_flags;
libfwupdplugin/fu-device.c:	return priv->request_cnts[request_kind];
libfwupdplugin/fu-device.c:	priv->private_flags = flag;
libfwupdplugin/fu-device.c:	return g_ptr_array_ref(priv->possible_plugins);
libfwupdplugin/fu-device.c:	if (g_ptr_array_find_with_equal_func(priv->possible_plugins, plugin, g_str_equal, NULL))
libfwupdplugin/fu-device.c:	g_ptr_array_add(priv->possible_plugins, g_strdup(plugin));
libfwupdplugin/fu-device.c:	g_ptr_array_add(priv->retry_recs, rec);
libfwupdplugin/fu-device.c:	priv->retry_delay = delay;
libfwupdplugin/fu-device.c:		if (priv->retry_recs->len == 0) {
libfwupdplugin/fu-device.c:		for (guint j = 0; j < priv->retry_recs->len; j++) {
libfwupdplugin/fu-device.c:			FuDeviceRetryRecovery *rec = g_ptr_array_index(priv->retry_recs, j);
libfwupdplugin/fu-device.c:	return fu_device_retry_full(self, func, count, priv->retry_delay, user_data, error);
libfwupdplugin/fu-device.c:		priv->poll_id = 0;
libfwupdplugin/fu-device.c:	if (priv->poll_id != 0) {
libfwupdplugin/fu-device.c:		g_source_remove(priv->poll_id);
libfwupdplugin/fu-device.c:		priv->poll_id = 0;
libfwupdplugin/fu-device.c:		priv->poll_id = g_timeout_add_seconds(interval / 1000, fu_device_poll_cb, self);
libfwupdplugin/fu-device.c:		priv->poll_id = g_timeout_add(interval, fu_device_poll_cb, self);
libfwupdplugin/fu-device.c:	return priv->order;
libfwupdplugin/fu-device.c:	priv->order = order;
libfwupdplugin/fu-device.c:	return priv->priority;
libfwupdplugin/fu-device.c:	priv->priority = priority;
libfwupdplugin/fu-device.c:	return priv->equivalent_id;
libfwupdplugin/fu-device.c:	if (g_strcmp0(priv->equivalent_id, equivalent_id) == 0)
libfwupdplugin/fu-device.c:	g_free(priv->equivalent_id);
libfwupdplugin/fu-device.c:	priv->equivalent_id = g_strdup(equivalent_id);
libfwupdplugin/fu-device.c:	return priv->alternate_id;
libfwupdplugin/fu-device.c:	if (g_strcmp0(priv->alternate_id, alternate_id) == 0)
libfwupdplugin/fu-device.c:	g_free(priv->alternate_id);
libfwupdplugin/fu-device.c:	priv->alternate_id = g_strdup(alternate_id);
libfwupdplugin/fu-device.c:	return priv->alternate;
libfwupdplugin/fu-device.c:	g_set_object(&priv->alternate, alternate);
libfwupdplugin/fu-device.c:	if (priv->proxy != NULL)
libfwupdplugin/fu-device.c:		g_object_remove_weak_pointer(G_OBJECT(priv->proxy), (gpointer *)&priv->proxy);
libfwupdplugin/fu-device.c:		g_object_add_weak_pointer(G_OBJECT(proxy), (gpointer *)&priv->proxy);
libfwupdplugin/fu-device.c:	priv->proxy = proxy;
libfwupdplugin/fu-device.c:	return priv->proxy;
libfwupdplugin/fu-device.c:	    priv->proxy != NULL)
libfwupdplugin/fu-device.c:		return priv->proxy;
libfwupdplugin/fu-device.c:		g_autoptr(GList) values = g_hash_table_get_values(priv->inhibits);
libfwupdplugin/fu-device.c:		if (remove_delay > priv->remove_delay) {
libfwupdplugin/fu-device.c:				priv->remove_delay);
libfwupdplugin/fu-device.c:			priv->remove_delay = remove_delay;
libfwupdplugin/fu-device.c:	if (priv_child->backend_id == NULL && priv->backend_id != NULL)
libfwupdplugin/fu-device.c:		fu_device_set_backend_id(child, priv->backend_id);
libfwupdplugin/fu-device.c:	if (priv_child->ctx == NULL && priv->ctx != NULL)
libfwupdplugin/fu-device.c:		fu_device_set_context(child, priv->ctx);
libfwupdplugin/fu-device.c:	if (priv_child->remove_delay == 0 && priv->remove_delay != 0)
libfwupdplugin/fu-device.c:		fu_device_set_remove_delay(child, priv->remove_delay);
libfwupdplugin/fu-device.c:	    g_rw_lock_reader_locker_new(&priv->parent_guids_mutex);
libfwupdplugin/fu-device.c:	return priv->parent_guids;
libfwupdplugin/fu-device.c:	    g_rw_lock_reader_locker_new(&priv->parent_guids_mutex);
libfwupdplugin/fu-device.c:	for (guint i = 0; i < priv->parent_guids->len; i++) {
libfwupdplugin/fu-device.c:		const gchar *guid_tmp = g_ptr_array_index(priv->parent_guids, i);
libfwupdplugin/fu-device.c:		g_ptr_array_add(priv->parent_guids, g_steal_pointer(&tmp));
libfwupdplugin/fu-device.c:	locker = g_rw_lock_writer_locker_new(&priv->parent_guids_mutex);
libfwupdplugin/fu-device.c:	g_ptr_array_add(priv->parent_guids, g_strdup(guid));
libfwupdplugin/fu-device.c:	return priv->parent_physical_ids;
libfwupdplugin/fu-device.c:	if (priv->parent_physical_ids == NULL)
libfwupdplugin/fu-device.c:	for (guint i = 0; i < priv->parent_physical_ids->len; i++) {
libfwupdplugin/fu-device.c:		const gchar *tmp = g_ptr_array_index(priv->parent_physical_ids, i);
libfwupdplugin/fu-device.c:	if (priv->parent_physical_ids == NULL)
libfwupdplugin/fu-device.c:		priv->parent_physical_ids = g_ptr_array_new_with_free_func(g_free);
libfwupdplugin/fu-device.c:	g_ptr_array_add(priv->parent_physical_ids, g_strdup(physical_id));
libfwupdplugin/fu-device.c:	child = g_object_new(type, "context", priv->ctx, "logical-id", guid, NULL);
libfwupdplugin/fu-device.c:		if (priv->specialized_gtype != G_TYPE_INVALID) {
libfwupdplugin/fu-device.c:				g_type_name(priv->specialized_gtype),
libfwupdplugin/fu-device.c:		priv->specialized_gtype = g_type_from_name(value);
libfwupdplugin/fu-device.c:	return priv->specialized_gtype;
libfwupdplugin/fu-device.c:	if (priv->ctx == NULL) {
libfwupdplugin/fu-device.c:	fu_context_lookup_quirk_by_id_iter(priv->ctx, guid, fu_device_quirks_iter_cb, self);
libfwupdplugin/fu-device.c:	priv->size_min = size;
libfwupdplugin/fu-device.c:	priv->size_max = size;
libfwupdplugin/fu-device.c:	priv->size_min = size_min;
libfwupdplugin/fu-device.c:	priv->size_max = size_max;
libfwupdplugin/fu-device.c:	return priv->size_min;
libfwupdplugin/fu-device.c:	return priv->size_max;
libfwupdplugin/fu-device.c:	if (priv->done_setup)
libfwupdplugin/fu-device.c:	g_autoptr(GRWLockReaderLocker) locker = g_rw_lock_reader_locker_new(&priv->metadata_mutex);
libfwupdplugin/fu-device.c:	if (priv->metadata == NULL)
libfwupdplugin/fu-device.c:	return g_hash_table_lookup(priv->metadata, key);
libfwupdplugin/fu-device.c:	g_autoptr(GRWLockReaderLocker) locker = g_rw_lock_reader_locker_new(&priv->metadata_mutex);
libfwupdplugin/fu-device.c:	if (priv->metadata == NULL)
libfwupdplugin/fu-device.c:	tmp = g_hash_table_lookup(priv->metadata, key);
libfwupdplugin/fu-device.c:	g_autoptr(GRWLockReaderLocker) locker = g_rw_lock_reader_locker_new(&priv->metadata_mutex);
libfwupdplugin/fu-device.c:	if (priv->metadata == NULL)
libfwupdplugin/fu-device.c:	tmp = g_hash_table_lookup(priv->metadata, key);
libfwupdplugin/fu-device.c:	g_autoptr(GRWLockWriterLocker) locker = g_rw_lock_writer_locker_new(&priv->metadata_mutex);
libfwupdplugin/fu-device.c:	if (priv->metadata == NULL)
libfwupdplugin/fu-device.c:	g_hash_table_remove(priv->metadata, key);
libfwupdplugin/fu-device.c:	g_autoptr(GRWLockWriterLocker) locker = g_rw_lock_writer_locker_new(&priv->metadata_mutex);
libfwupdplugin/fu-device.c:	if (priv->metadata == NULL) {
libfwupdplugin/fu-device.c:		priv->metadata = g_hash_table_new_full(g_str_hash, g_str_equal, g_free, g_free);
libfwupdplugin/fu-device.c:	g_hash_table_insert(priv->metadata, g_strdup(key), g_strdup(value));
libfwupdplugin/fu-device.c:	priv->device_id_valid = TRUE;
libfwupdplugin/fu-device.c:	guint nr_inhibits = g_hash_table_size(priv->inhibits);
libfwupdplugin/fu-device.c:	if (priv->notify_flags_handler_id != 0)
libfwupdplugin/fu-device.c:		g_signal_handler_block(self, priv->notify_flags_handler_id);
libfwupdplugin/fu-device.c:		g_autoptr(GList) values = g_hash_table_get_values(priv->inhibits);
libfwupdplugin/fu-device.c:	if (priv->notify_flags_handler_id != 0)
libfwupdplugin/fu-device.c:		g_signal_handler_unblock(self, priv->notify_flags_handler_id);
libfwupdplugin/fu-device.c:	if (priv->inhibits == NULL) {
libfwupdplugin/fu-device.c:		priv->inhibits = g_hash_table_new_full(g_str_hash,
libfwupdplugin/fu-device.c:	inhibit = g_hash_table_lookup(priv->inhibits, inhibit_id);
libfwupdplugin/fu-device.c:	g_hash_table_insert(priv->inhibits, inhibit->inhibit_id, inhibit);
libfwupdplugin/fu-device.c:	if (priv->inhibits == NULL)
libfwupdplugin/fu-device.c:	if (g_hash_table_remove(priv->inhibits, inhibit_id))
libfwupdplugin/fu-device.c:	if (priv->device_id_valid)
libfwupdplugin/fu-device.c:	if (priv->physical_id == NULL) {
libfwupdplugin/fu-device.c:	return priv->logical_id;
libfwupdplugin/fu-device.c:	if (g_strcmp0(priv->logical_id, logical_id) == 0)
libfwupdplugin/fu-device.c:	if (priv->done_setup) {
libfwupdplugin/fu-device.c:			  priv->logical_id,
libfwupdplugin/fu-device.c:	g_free(priv->logical_id);
libfwupdplugin/fu-device.c:	priv->logical_id = g_strdup(logical_id);
libfwupdplugin/fu-device.c:	priv->device_id_valid = FALSE;
libfwupdplugin/fu-device.c:	if (priv->backend_id != NULL)
libfwupdplugin/fu-device.c:		return priv->backend_id;
libfwupdplugin/fu-device.c:	return priv->physical_id;
libfwupdplugin/fu-device.c:	if (g_strcmp0(priv->backend_id, backend_id) == 0)
libfwupdplugin/fu-device.c:	g_free(priv->backend_id);
libfwupdplugin/fu-device.c:	priv->backend_id = g_strdup(backend_id);
libfwupdplugin/fu-device.c:	priv->device_id_valid = FALSE;
libfwupdplugin/fu-device.c:	return priv->proxy_guid;
libfwupdplugin/fu-device.c:	if (g_strcmp0(priv->proxy_guid, proxy_guid) == 0)
libfwupdplugin/fu-device.c:	g_free(priv->proxy_guid);
libfwupdplugin/fu-device.c:	priv->proxy_guid = g_strdup(proxy_guid);
libfwupdplugin/fu-device.c:	if (g_strcmp0(priv->physical_id, physical_id) == 0)
libfwupdplugin/fu-device.c:	if (priv->done_setup) {
libfwupdplugin/fu-device.c:			  priv->physical_id,
libfwupdplugin/fu-device.c:	g_free(priv->physical_id);
libfwupdplugin/fu-device.c:	priv->physical_id = g_strdup(physical_id);
libfwupdplugin/fu-device.c:	priv->device_id_valid = FALSE;
libfwupdplugin/fu-device.c:	return priv->physical_id;
libfwupdplugin/fu-device.c:	if (priv->private_flag_items == NULL)
libfwupdplugin/fu-device.c:	for (guint i = 0; i < priv->private_flag_items->len; i++) {
libfwupdplugin/fu-device.c:		FuDevicePrivateFlagItem *item = g_ptr_array_index(priv->private_flag_items, i);
libfwupdplugin/fu-device.c:	if (priv->private_flag_items == NULL)
libfwupdplugin/fu-device.c:	for (guint i = 0; i < priv->private_flag_items->len; i++) {
libfwupdplugin/fu-device.c:		FuDevicePrivateFlagItem *item = g_ptr_array_index(priv->private_flag_items, i);
libfwupdplugin/fu-device.c:	if (priv->private_flag_items == NULL)
libfwupdplugin/fu-device.c:		priv->private_flag_items = g_ptr_array_new_with_free_func(
libfwupdplugin/fu-device.c:	g_ptr_array_add(priv->private_flag_items, item);
libfwupdplugin/fu-device.c:			priv->private_flags &= ~item->value;
libfwupdplugin/fu-device.c:		priv->private_flags |= item->value;
libfwupdplugin/fu-device.c:	return priv->remove_delay;
libfwupdplugin/fu-device.c:	priv->remove_delay = remove_delay;
libfwupdplugin/fu-device.c:	if (priv->battery_level == FU_BATTERY_VALUE_INVALID ||
libfwupdplugin/fu-device.c:	    priv->battery_level >= fu_device_get_battery_threshold(self)) {
libfwupdplugin/fu-device.c:	    priv->battery_level == FU_BATTERY_VALUE_INVALID) {
libfwupdplugin/fu-device.c:	return priv->battery_level;
libfwupdplugin/fu-device.c:	if (priv->battery_level == battery_level)
libfwupdplugin/fu-device.c:	priv->battery_level = battery_level;
libfwupdplugin/fu-device.c:	    priv->battery_threshold == FU_BATTERY_VALUE_INVALID) {
libfwupdplugin/fu-device.c:	if (priv->battery_threshold == FU_BATTERY_VALUE_INVALID)
libfwupdplugin/fu-device.c:	return priv->battery_threshold;
libfwupdplugin/fu-device.c:	if (priv->battery_threshold == battery_threshold)
libfwupdplugin/fu-device.c:	priv->battery_threshold = battery_threshold;
libfwupdplugin/fu-device.c:	g_autoptr(GRWLockReaderLocker) locker = g_rw_lock_reader_locker_new(&priv->metadata_mutex);
libfwupdplugin/fu-device.c:	if (priv->alternate_id != NULL)
libfwupdplugin/fu-device.c:		fu_common_string_append_kv(str, idt + 1, "AlternateId", priv->alternate_id);
libfwupdplugin/fu-device.c:	if (priv->equivalent_id != NULL)
libfwupdplugin/fu-device.c:		fu_common_string_append_kv(str, idt + 1, "EquivalentId", priv->equivalent_id);
libfwupdplugin/fu-device.c:	if (priv->physical_id != NULL)
libfwupdplugin/fu-device.c:		fu_common_string_append_kv(str, idt + 1, "PhysicalId", priv->physical_id);
libfwupdplugin/fu-device.c:	if (priv->logical_id != NULL)
libfwupdplugin/fu-device.c:		fu_common_string_append_kv(str, idt + 1, "LogicalId", priv->logical_id);
libfwupdplugin/fu-device.c:	if (priv->backend_id != NULL)
libfwupdplugin/fu-device.c:		fu_common_string_append_kv(str, idt + 1, "BackendId", priv->backend_id);
libfwupdplugin/fu-device.c:	if (priv->proxy != NULL)
libfwupdplugin/fu-device.c:		fu_common_string_append_kv(str, idt + 1, "ProxyId", fu_device_get_id(priv->proxy));
libfwupdplugin/fu-device.c:	if (priv->proxy_guid != NULL)
libfwupdplugin/fu-device.c:		fu_common_string_append_kv(str, idt + 1, "ProxyGuid", priv->proxy_guid);
libfwupdplugin/fu-device.c:	if (priv->battery_level != FU_BATTERY_VALUE_INVALID)
libfwupdplugin/fu-device.c:		fu_common_string_append_ku(str, idt + 1, "BatteryLevel", priv->battery_level);
libfwupdplugin/fu-device.c:	if (priv->battery_threshold != FU_BATTERY_VALUE_INVALID)
libfwupdplugin/fu-device.c:					   priv->battery_threshold);
libfwupdplugin/fu-device.c:	if (priv->size_min > 0) {
libfwupdplugin/fu-device.c:		g_autofree gchar *sz = g_strdup_printf("%" G_GUINT64_FORMAT, priv->size_min);
libfwupdplugin/fu-device.c:	if (priv->size_max > 0) {
libfwupdplugin/fu-device.c:		g_autofree gchar *sz = g_strdup_printf("%" G_GUINT64_FORMAT, priv->size_max);
libfwupdplugin/fu-device.c:	if (priv->order != G_MAXINT) {
libfwupdplugin/fu-device.c:		g_autofree gchar *order = g_strdup_printf("%i", priv->order);
libfwupdplugin/fu-device.c:	if (priv->priority > 0)
libfwupdplugin/fu-device.c:		fu_common_string_append_ku(str, idt + 1, "Priority", priv->priority);
libfwupdplugin/fu-device.c:	if (priv->metadata != NULL) {
libfwupdplugin/fu-device.c:		g_autoptr(GList) keys = g_hash_table_get_keys(priv->metadata);
libfwupdplugin/fu-device.c:			const gchar *value = g_hash_table_lookup(priv->metadata, key);
libfwupdplugin/fu-device.c:	for (guint i = 0; i < priv->possible_plugins->len; i++) {
libfwupdplugin/fu-device.c:		const gchar *name = g_ptr_array_index(priv->possible_plugins, i);
libfwupdplugin/fu-device.c:	if (priv->parent_physical_ids != NULL && priv->parent_physical_ids->len > 0) {
libfwupdplugin/fu-device.c:		g_autofree gchar *flags = fu_common_strjoin_array(",", priv->parent_physical_ids);
libfwupdplugin/fu-device.c:	if (priv->internal_flags != FU_DEVICE_INTERNAL_FLAG_NONE) {
libfwupdplugin/fu-device.c:			if ((priv->internal_flags & ((guint64)1 << i)) == 0)
libfwupdplugin/fu-device.c:	if (priv->private_flags > 0) {
libfwupdplugin/fu-device.c:			if ((priv->private_flags & value) == 0)
libfwupdplugin/fu-device.c:	if (g_set_object(&priv->ctx, ctx))
libfwupdplugin/fu-device.c:	return priv->ctx;
libfwupdplugin/fu-device.c:	if (priv->request_cnts[FWUPD_REQUEST_KIND_POST] == 0 &&
libfwupdplugin/fu-device.c:		if (priv->size_max > 0 && fw_sz > priv->size_max) {
libfwupdplugin/fu-device.c:				    (guint)(fw_sz - priv->size_max),
libfwupdplugin/fu-device.c:				    (guint)priv->size_max);
libfwupdplugin/fu-device.c:		if (priv->size_min > 0 && fw_sz < priv->size_min) {
libfwupdplugin/fu-device.c:				    (guint)(priv->size_min - fw_sz),
libfwupdplugin/fu-device.c:				    (guint)priv->size_max);
libfwupdplugin/fu-device.c:	g_atomic_int_inc(&priv->open_refcount);
libfwupdplugin/fu-device.c:	if (priv->open_refcount > 1)
libfwupdplugin/fu-device.c:	if (priv->open_refcount == 0) {
libfwupdplugin/fu-device.c:	if (!g_atomic_int_dec_and_test(&priv->open_refcount))
libfwupdplugin/fu-device.c:	if (priv->done_probe)
libfwupdplugin/fu-device.c:	priv->done_probe = TRUE;
libfwupdplugin/fu-device.c:	if (priv->done_setup)
libfwupdplugin/fu-device.c:	priv->done_setup = TRUE;
libfwupdplugin/fu-device.c:	priv->done_probe = FALSE;
libfwupdplugin/fu-device.c:	priv->done_setup = FALSE;
libfwupdplugin/fu-device.c:	if (priv->alternate_id == NULL)
libfwupdplugin/fu-device.c:	if (priv->equivalent_id == NULL)
libfwupdplugin/fu-device.c:	if (priv->physical_id == NULL && priv_donor->physical_id != NULL)
libfwupdplugin/fu-device.c:	if (priv->logical_id == NULL && priv_donor->logical_id != NULL)
libfwupdplugin/fu-device.c:	if (priv->backend_id == NULL && priv_donor->backend_id != NULL)
libfwupdplugin/fu-device.c:	if (priv->proxy == NULL && priv_donor->proxy != NULL)
libfwupdplugin/fu-device.c:	if (priv->proxy_guid == NULL && priv_donor->proxy_guid != NULL)
libfwupdplugin/fu-device.c:	if (priv->ctx == NULL)
libfwupdplugin/fu-device.c:	if (priv->metadata != NULL) {
libfwupdplugin/fu-device.c:			if (g_hash_table_lookup(priv->metadata, key) == NULL) {
libfwupdplugin/fu-device.c:		priv->device_id_valid = TRUE;
libfwupdplugin/fu-device.c:	priv->request_cnts[fwupd_request_get_kind(request)]++;
libfwupdplugin/fu-device.c:	if (priv->inhibits != NULL)
libfwupdplugin/fu-device.c:	priv->order = G_MAXINT;
libfwupdplugin/fu-device.c:	priv->battery_level = FU_BATTERY_VALUE_INVALID;
libfwupdplugin/fu-device.c:	priv->battery_threshold = FU_BATTERY_VALUE_INVALID;
libfwupdplugin/fu-device.c:	priv->parent_guids = g_ptr_array_new_with_free_func(g_free);
libfwupdplugin/fu-device.c:	priv->possible_plugins = g_ptr_array_new_with_free_func(g_free);
libfwupdplugin/fu-device.c:	priv->retry_recs = g_ptr_array_new_with_free_func(g_free);
libfwupdplugin/fu-device.c:	g_rw_lock_init(&priv->parent_guids_mutex);
libfwupdplugin/fu-device.c:	g_rw_lock_init(&priv->metadata_mutex);
libfwupdplugin/fu-device.c:	priv->notify_flags_handler_id =
libfwupdplugin/fu-device.c:	g_rw_lock_clear(&priv->metadata_mutex);
libfwupdplugin/fu-device.c:	g_rw_lock_clear(&priv->parent_guids_mutex);
libfwupdplugin/fu-device.c:	if (priv->alternate != NULL)
libfwupdplugin/fu-device.c:		g_object_unref(priv->alternate);
libfwupdplugin/fu-device.c:	if (priv->proxy != NULL)
libfwupdplugin/fu-device.c:		g_object_remove_weak_pointer(G_OBJECT(priv->proxy), (gpointer *)&priv->proxy);
libfwupdplugin/fu-device.c:	if (priv->ctx != NULL)
libfwupdplugin/fu-device.c:		g_object_unref(priv->ctx);
libfwupdplugin/fu-device.c:	if (priv->poll_id != 0)
libfwupdplugin/fu-device.c:		g_source_remove(priv->poll_id);
libfwupdplugin/fu-device.c:	if (priv->metadata != NULL)
libfwupdplugin/fu-device.c:		g_hash_table_unref(priv->metadata);
libfwupdplugin/fu-device.c:	if (priv->inhibits != NULL)
libfwupdplugin/fu-device.c:		g_hash_table_unref(priv->inhibits);
libfwupdplugin/fu-device.c:	if (priv->parent_physical_ids != NULL)
libfwupdplugin/fu-device.c:		g_ptr_array_unref(priv->parent_physical_ids);
libfwupdplugin/fu-device.c:	if (priv->private_flag_items != NULL)
libfwupdplugin/fu-device.c:		g_ptr_array_unref(priv->private_flag_items);
libfwupdplugin/fu-device.c:	g_ptr_array_unref(priv->parent_guids);
libfwupdplugin/fu-device.c:	g_ptr_array_unref(priv->possible_plugins);
libfwupdplugin/fu-device.c:	g_ptr_array_unref(priv->retry_recs);
libfwupdplugin/fu-device.c:	g_free(priv->alternate_id);
libfwupdplugin/fu-device.c:	g_free(priv->equivalent_id);
libfwupdplugin/fu-device.c:	g_free(priv->physical_id);
libfwupdplugin/fu-device.c:	g_free(priv->logical_id);
libfwupdplugin/fu-device.c:	g_free(priv->backend_id);
libfwupdplugin/fu-device.c:	g_free(priv->proxy_guid);
libfwupdplugin/fu-plugin.c:	return priv->module != NULL;
libfwupdplugin/fu-plugin.c:	if (g_strcmp0(priv->build_hash, build_hash) == 0)
libfwupdplugin/fu-plugin.c:	g_free(priv->build_hash);
libfwupdplugin/fu-plugin.c:	priv->build_hash = g_strdup(build_hash);
libfwupdplugin/fu-plugin.c:	return priv->build_hash;
libfwupdplugin/fu-plugin.c:	g_autoptr(GRWLockReaderLocker) locker = g_rw_lock_reader_locker_new(&priv->cache_mutex);
libfwupdplugin/fu-plugin.c:	if (priv->cache == NULL)
libfwupdplugin/fu-plugin.c:	return g_hash_table_lookup(priv->cache, id);
libfwupdplugin/fu-plugin.c:	g_autoptr(GRWLockWriterLocker) locker = g_rw_lock_writer_locker_new(&priv->cache_mutex);
libfwupdplugin/fu-plugin.c:	if (priv->cache == NULL) {
libfwupdplugin/fu-plugin.c:		priv->cache = g_hash_table_new_full(g_str_hash,
libfwupdplugin/fu-plugin.c:	g_hash_table_insert(priv->cache, g_strdup(id), g_object_ref(dev));
libfwupdplugin/fu-plugin.c:	g_autoptr(GRWLockWriterLocker) locker = g_rw_lock_writer_locker_new(&priv->cache_mutex);
libfwupdplugin/fu-plugin.c:	if (priv->cache == NULL)
libfwupdplugin/fu-plugin.c:	g_hash_table_remove(priv->cache, id);
libfwupdplugin/fu-plugin.c:	return priv->data;
libfwupdplugin/fu-plugin.c:	if (priv->data != NULL) {
libfwupdplugin/fu-plugin.c:		return priv->data;
libfwupdplugin/fu-plugin.c:	priv->data = g_malloc0(data_sz);
libfwupdplugin/fu-plugin.c:	return priv->data;
libfwupdplugin/fu-plugin.c:	priv->module = g_module_open(filename, 0);
libfwupdplugin/fu-plugin.c:	if (priv->module == NULL) {
libfwupdplugin/fu-plugin.c:	g_module_symbol(priv->module, "fu_plugin_init", (gpointer *)&func);
libfwupdplugin/fu-plugin.c:	if (priv->devices != NULL)
libfwupdplugin/fu-plugin.c:	priv->devices = g_ptr_array_new_with_free_func((GDestroyNotify)g_object_unref);
libfwupdplugin/fu-plugin.c:	g_ptr_array_add(priv->devices, g_object_ref(device));
libfwupdplugin/fu-plugin.c:	return priv->devices;
libfwupdplugin/fu-plugin.c:	if (priv->devices != NULL)
libfwupdplugin/fu-plugin.c:		g_ptr_array_remove(priv->devices, device);
libfwupdplugin/fu-plugin.c:	if (priv->ctx == NULL)
libfwupdplugin/fu-plugin.c:	guids = fu_context_get_hwid_guids(priv->ctx);
libfwupdplugin/fu-plugin.c:		value = fu_context_lookup_quirk_by_id(priv->ctx, guid, FU_QUIRKS_FLAGS);
libfwupdplugin/fu-plugin.c:	return priv->ctx;
libfwupdplugin/fu-plugin.c:	if (priv->module == NULL)
libfwupdplugin/fu-plugin.c:	g_module_symbol(priv->module, "fu_plugin_startup", (gpointer *)&func);
libfwupdplugin/fu-plugin.c:	priv->config_monitor = g_file_monitor_file(file, G_FILE_MONITOR_NONE, NULL, error);
libfwupdplugin/fu-plugin.c:	if (priv->config_monitor == NULL)
libfwupdplugin/fu-plugin.c:	g_signal_connect(priv->config_monitor,
libfwupdplugin/fu-plugin.c:	if (priv->module == NULL)
libfwupdplugin/fu-plugin.c:	g_module_symbol(priv->module, symbol_name, (gpointer *)&func);
libfwupdplugin/fu-plugin.c:	if (priv->module == NULL)
libfwupdplugin/fu-plugin.c:	g_module_symbol(priv->module, symbol_name, (gpointer *)&func);
libfwupdplugin/fu-plugin.c:	if (priv->module == NULL)
libfwupdplugin/fu-plugin.c:	g_module_symbol(priv->module, symbol_name, (gpointer *)&func);
libfwupdplugin/fu-plugin.c:	if (priv->module == NULL)
libfwupdplugin/fu-plugin.c:	g_module_symbol(priv->module, symbol_name, (gpointer *)&func);
libfwupdplugin/fu-plugin.c:	if (priv->module == NULL)
libfwupdplugin/fu-plugin.c:	g_module_symbol(priv->module, "fu_plugin_coldplug", (gpointer *)&func);
libfwupdplugin/fu-plugin.c:	if (priv->module == NULL)
libfwupdplugin/fu-plugin.c:	g_module_symbol(priv->module, "fu_plugin_coldplug_prepare", (gpointer *)&func);
libfwupdplugin/fu-plugin.c:	if (priv->module == NULL)
libfwupdplugin/fu-plugin.c:	g_module_symbol(priv->module, "fu_plugin_coldplug_cleanup", (gpointer *)&func);
libfwupdplugin/fu-plugin.c:	if (priv->module == NULL)
libfwupdplugin/fu-plugin.c:	g_module_symbol(priv->module, symbol_name, (gpointer *)&func);
libfwupdplugin/fu-plugin.c:	if (priv->device_gtypes == NULL)
libfwupdplugin/fu-plugin.c:		priv->device_gtypes = g_array_new(FALSE, FALSE, sizeof(GType));
libfwupdplugin/fu-plugin.c:	g_array_append_val(priv->device_gtypes, device_gtype);
libfwupdplugin/fu-plugin.c:	fu_context_add_udev_subsystem(priv->ctx, subsystem);
libfwupdplugin/fu-plugin.c:	fu_context_add_firmware_gtype(priv->ctx, id_safe, gtype);
libfwupdplugin/fu-plugin.c:		if (priv->device_gtypes->len > 1) {
libfwupdplugin/fu-plugin.c:		device_gtype = g_array_index(priv->device_gtypes, GType, 0);
libfwupdplugin/fu-plugin.c:	if (priv->module == NULL)
libfwupdplugin/fu-plugin.c:	g_module_symbol(priv->module, "fu_plugin_backend_device_added", (gpointer *)&func);
libfwupdplugin/fu-plugin.c:		if (priv->device_gtypes != NULL ||
libfwupdplugin/fu-plugin.c:	if (priv->module == NULL)
libfwupdplugin/fu-plugin.c:	g_module_symbol(priv->module, "fu_plugin_backend_device_changed", (gpointer *)&func);
libfwupdplugin/fu-plugin.c:	if (priv->module == NULL)
libfwupdplugin/fu-plugin.c:	g_module_symbol(priv->module, "fu_plugin_device_added", (gpointer *)&func);
libfwupdplugin/fu-plugin.c:	if (priv->module == NULL)
libfwupdplugin/fu-plugin.c:	g_module_symbol(priv->module, "fu_plugin_device_registered", (gpointer *)&func);
libfwupdplugin/fu-plugin.c:	if (priv->module == NULL)
libfwupdplugin/fu-plugin.c:	g_module_symbol(priv->module, "fu_plugin_device_created", (gpointer *)&func);
libfwupdplugin/fu-plugin.c:	if (priv->module == NULL)
libfwupdplugin/fu-plugin.c:	g_module_symbol(priv->module, "fu_plugin_verify", (gpointer *)&func);
libfwupdplugin/fu-plugin.c:	if (priv->module == NULL) {
libfwupdplugin/fu-plugin.c:	g_module_symbol(priv->module, "fu_plugin_write_firmware", (gpointer *)&update_func);
libfwupdplugin/fu-plugin.c:	if (priv->module == NULL)
libfwupdplugin/fu-plugin.c:	g_module_symbol(priv->module, "fu_plugin_clear_results", (gpointer *)&func);
libfwupdplugin/fu-plugin.c:	if (priv->module == NULL)
libfwupdplugin/fu-plugin.c:	g_module_symbol(priv->module, "fu_plugin_get_results", (gpointer *)&func);
libfwupdplugin/fu-plugin.c:	return priv->order;
libfwupdplugin/fu-plugin.c:	priv->order = order;
libfwupdplugin/fu-plugin.c:	return priv->priority;
libfwupdplugin/fu-plugin.c:	priv->priority = priority;
libfwupdplugin/fu-plugin.c:	if (priv->rules[rule] == NULL)
libfwupdplugin/fu-plugin.c:		priv->rules[rule] = g_ptr_array_new_with_free_func(g_free);
libfwupdplugin/fu-plugin.c:	g_ptr_array_add(priv->rules[rule], g_strdup(name));
libfwupdplugin/fu-plugin.c:	return priv->rules[rule];
libfwupdplugin/fu-plugin.c:	if (priv->rules[rule] == NULL)
libfwupdplugin/fu-plugin.c:	for (guint i = 0; i < priv->rules[rule]->len; i++) {
libfwupdplugin/fu-plugin.c:		const gchar *tmp = g_ptr_array_index(priv->rules[rule], i);
libfwupdplugin/fu-plugin.c:	if (priv->report_metadata == NULL) {
libfwupdplugin/fu-plugin.c:		priv->report_metadata =
libfwupdplugin/fu-plugin.c:	g_hash_table_insert(priv->report_metadata, g_strdup(key), g_strdup(value));
libfwupdplugin/fu-plugin.c:	return priv->report_metadata;
libfwupdplugin/fu-plugin.c:	g_rw_lock_init(&priv->cache_mutex);
libfwupdplugin/fu-plugin.c:	g_rw_lock_clear(&priv->cache_mutex);
libfwupdplugin/fu-plugin.c:	if (priv->module != NULL) {
libfwupdplugin/fu-plugin.c:		g_module_symbol(priv->module, "fu_plugin_destroy", (gpointer *)&func);
libfwupdplugin/fu-plugin.c:		if (priv->rules[i] != NULL)
libfwupdplugin/fu-plugin.c:			g_ptr_array_unref(priv->rules[i]);
libfwupdplugin/fu-plugin.c:	if (priv->devices != NULL)
libfwupdplugin/fu-plugin.c:		g_ptr_array_unref(priv->devices);
libfwupdplugin/fu-plugin.c:	if (priv->ctx != NULL)
libfwupdplugin/fu-plugin.c:		g_object_unref(priv->ctx);
libfwupdplugin/fu-plugin.c:	if (priv->runtime_versions != NULL)
libfwupdplugin/fu-plugin.c:		g_hash_table_unref(priv->runtime_versions);
libfwupdplugin/fu-plugin.c:	if (priv->compile_versions != NULL)
libfwupdplugin/fu-plugin.c:		g_hash_table_unref(priv->compile_versions);
libfwupdplugin/fu-plugin.c:	if (priv->report_metadata != NULL)
libfwupdplugin/fu-plugin.c:		g_hash_table_unref(priv->report_metadata);
libfwupdplugin/fu-plugin.c:	if (priv->cache != NULL)
libfwupdplugin/fu-plugin.c:		g_hash_table_unref(priv->cache);
libfwupdplugin/fu-plugin.c:	if (priv->device_gtypes != NULL)
libfwupdplugin/fu-plugin.c:		g_array_unref(priv->device_gtypes);
libfwupdplugin/fu-plugin.c:	if (priv->config_monitor != NULL)
libfwupdplugin/fu-plugin.c:		g_object_unref(priv->config_monitor);
libfwupdplugin/fu-plugin.c:	g_free(priv->build_hash);
libfwupdplugin/fu-plugin.c:	g_free(priv->data);
libfwupdplugin/fu-plugin.c:		priv->ctx = g_object_ref(ctx);
libfwupdplugin/fu-ihex-firmware.c:	return priv->records;
libfwupdplugin/fu-ihex-firmware.c:	priv->padding_value = padding_value;
libfwupdplugin/fu-ihex-firmware.c:	g_ptr_array_add(priv->records, g_steal_pointer(&rcd));
libfwupdplugin/fu-ihex-firmware.c:	for (guint k = 0; k < priv->records->len; k++) {
libfwupdplugin/fu-ihex-firmware.c:		FuIhexFirmwareRecord *rcd = g_ptr_array_index(priv->records, k);
libfwupdplugin/fu-ihex-firmware.c:					fu_byte_array_append_uint8(buf, priv->padding_value);
libfwupdplugin/fu-ihex-firmware.c:	g_ptr_array_unref(priv->records);
libfwupdplugin/fu-ihex-firmware.c:	priv->padding_value = 0x00; /* chosen as we can't write 0xffff to PIC14 */
libfwupdplugin/fu-ihex-firmware.c:	priv->records = g_ptr_array_new_with_free_func((GFreeFunc)fu_ihex_firmware_record_free);
libfwupdplugin/fu-ifd-image.c:		if (priv->access[i] == FU_IFD_ACCESS_NONE)
libfwupdplugin/fu-ifd-image.c:					    fu_ifd_access_to_string(priv->access[i]),
libfwupdplugin/fu-ifd-image.c:	priv->access[region] = access;
libfwupdplugin/fu-ifd-image.c:	return priv->access[region];
libfwupdplugin/fu-cfu-offer.c:	fu_xmlb_builder_insert_kx(bn, "segment_number", priv->segment_number);
libfwupdplugin/fu-cfu-offer.c:	fu_xmlb_builder_insert_kb(bn, "force_immediate_reset", priv->force_immediate_reset);
libfwupdplugin/fu-cfu-offer.c:	fu_xmlb_builder_insert_kb(bn, "force_ignore_version", priv->force_ignore_version);
libfwupdplugin/fu-cfu-offer.c:	fu_xmlb_builder_insert_kx(bn, "component_id", priv->component_id);
libfwupdplugin/fu-cfu-offer.c:	fu_xmlb_builder_insert_kx(bn, "token", priv->token);
libfwupdplugin/fu-cfu-offer.c:	fu_xmlb_builder_insert_kx(bn, "hw_variant", priv->hw_variant);
libfwupdplugin/fu-cfu-offer.c:	fu_xmlb_builder_insert_kx(bn, "protocol_revision", priv->protocol_revision);
libfwupdplugin/fu-cfu-offer.c:	fu_xmlb_builder_insert_kx(bn, "bank", priv->bank);
libfwupdplugin/fu-cfu-offer.c:	fu_xmlb_builder_insert_kx(bn, "milestone", priv->milestone);
libfwupdplugin/fu-cfu-offer.c:	fu_xmlb_builder_insert_kx(bn, "product_id", priv->product_id);
libfwupdplugin/fu-cfu-offer.c:	return priv->segment_number;
libfwupdplugin/fu-cfu-offer.c:	return priv->force_immediate_reset;
libfwupdplugin/fu-cfu-offer.c:	return priv->force_ignore_version;
libfwupdplugin/fu-cfu-offer.c:	return priv->component_id;
libfwupdplugin/fu-cfu-offer.c:	return priv->token;
libfwupdplugin/fu-cfu-offer.c:	return priv->hw_variant;
libfwupdplugin/fu-cfu-offer.c:	return priv->protocol_revision;
libfwupdplugin/fu-cfu-offer.c:	return priv->bank;
libfwupdplugin/fu-cfu-offer.c:	return priv->milestone;
libfwupdplugin/fu-cfu-offer.c:	return priv->product_id;
libfwupdplugin/fu-cfu-offer.c:	priv->segment_number = segment_number;
libfwupdplugin/fu-cfu-offer.c:	priv->force_immediate_reset = force_immediate_reset;
libfwupdplugin/fu-cfu-offer.c:	priv->force_ignore_version = force_ignore_version;
libfwupdplugin/fu-cfu-offer.c:	priv->component_id = component_id;
libfwupdplugin/fu-cfu-offer.c:	priv->token = token;
libfwupdplugin/fu-cfu-offer.c:	priv->hw_variant = hw_variant;
libfwupdplugin/fu-cfu-offer.c:	priv->protocol_revision = protocol_revision;
libfwupdplugin/fu-cfu-offer.c:	priv->bank = bank;
libfwupdplugin/fu-cfu-offer.c:	priv->milestone = milestone;
libfwupdplugin/fu-cfu-offer.c:	priv->product_id = product_id;
libfwupdplugin/fu-cfu-offer.c:	if (!fu_common_read_uint8_safe(buf, bufsz, 0x0, &priv->segment_number, error))
libfwupdplugin/fu-cfu-offer.c:	priv->force_ignore_version = (tmp & 0b1) > 0;
libfwupdplugin/fu-cfu-offer.c:	priv->force_immediate_reset = (tmp & 0b10) > 0;
libfwupdplugin/fu-cfu-offer.c:	if (!fu_common_read_uint8_safe(buf, bufsz, 0x2, &priv->component_id, error))
libfwupdplugin/fu-cfu-offer.c:	if (!fu_common_read_uint8_safe(buf, bufsz, 0x3, &priv->token, error))
libfwupdplugin/fu-cfu-offer.c:	if (!fu_common_read_uint32_safe(buf, bufsz, 0x8, &priv->hw_variant, G_LITTLE_ENDIAN, error))
libfwupdplugin/fu-cfu-offer.c:	priv->protocol_revision = (tmp >> 4) & 0b1111;
libfwupdplugin/fu-cfu-offer.c:	priv->bank = (tmp >> 2) & 0b11;
libfwupdplugin/fu-cfu-offer.c:	priv->milestone = (tmp >> 5) & 0b111;
libfwupdplugin/fu-cfu-offer.c:	if (!fu_common_read_uint16_safe(buf, bufsz, 0xE, &priv->product_id, G_LITTLE_ENDIAN, error))
libfwupdplugin/fu-cfu-offer.c:	fu_byte_array_append_uint8(buf, priv->segment_number);
libfwupdplugin/fu-cfu-offer.c:				   priv->force_ignore_version | (priv->force_immediate_reset << 1));
libfwupdplugin/fu-cfu-offer.c:	fu_byte_array_append_uint8(buf, priv->component_id);
libfwupdplugin/fu-cfu-offer.c:	fu_byte_array_append_uint8(buf, priv->token);
libfwupdplugin/fu-cfu-offer.c:	fu_byte_array_append_uint32(buf, priv->hw_variant, G_LITTLE_ENDIAN);
libfwupdplugin/fu-cfu-offer.c:	fu_byte_array_append_uint8(buf, (priv->protocol_revision << 4) | (priv->bank << 2));
libfwupdplugin/fu-cfu-offer.c:	fu_byte_array_append_uint8(buf, priv->milestone << 5);
libfwupdplugin/fu-cfu-offer.c:	fu_byte_array_append_uint16(buf, priv->product_id, G_LITTLE_ENDIAN);
libfwupdplugin/fu-cfu-offer.c:		priv->segment_number = tmp;
libfwupdplugin/fu-cfu-offer.c:		priv->force_immediate_reset = tmp;
libfwupdplugin/fu-cfu-offer.c:		priv->force_ignore_version = tmp;
libfwupdplugin/fu-cfu-offer.c:		priv->component_id = tmp;
libfwupdplugin/fu-cfu-offer.c:		priv->token = tmp;
libfwupdplugin/fu-cfu-offer.c:		priv->hw_variant = tmp;
libfwupdplugin/fu-cfu-offer.c:		priv->protocol_revision = tmp;
libfwupdplugin/fu-cfu-offer.c:		priv->bank = tmp;
libfwupdplugin/fu-cfu-offer.c:		priv->milestone = tmp;
libfwupdplugin/fu-cfu-offer.c:		priv->product_id = tmp;
libfwupdplugin/fu-firmware.c:	priv->flags |= flag;
libfwupdplugin/fu-firmware.c:	return (priv->flags & flag) > 0;
libfwupdplugin/fu-firmware.c:	return priv->version;
libfwupdplugin/fu-firmware.c:	if (g_strcmp0(priv->version, version) == 0)
libfwupdplugin/fu-firmware.c:	g_free(priv->version);
libfwupdplugin/fu-firmware.c:	priv->version = g_strdup(version);
libfwupdplugin/fu-firmware.c:	return priv->version_raw;
libfwupdplugin/fu-firmware.c:	priv->version_raw = version_raw;
libfwupdplugin/fu-firmware.c:	return priv->filename;
libfwupdplugin/fu-firmware.c:	if (g_strcmp0(priv->filename, filename) == 0)
libfwupdplugin/fu-firmware.c:	g_free(priv->filename);
libfwupdplugin/fu-firmware.c:	priv->filename = g_strdup(filename);
libfwupdplugin/fu-firmware.c:	if (g_strcmp0(priv->id, id) == 0)
libfwupdplugin/fu-firmware.c:	g_free(priv->id);
libfwupdplugin/fu-firmware.c:	priv->id = g_strdup(id);
libfwupdplugin/fu-firmware.c:	return priv->id;
libfwupdplugin/fu-firmware.c:	priv->addr = addr;
libfwupdplugin/fu-firmware.c:	return priv->addr;
libfwupdplugin/fu-firmware.c:	priv->offset = offset;
libfwupdplugin/fu-firmware.c:	return priv->offset;
libfwupdplugin/fu-firmware.c:	priv->size = size;
libfwupdplugin/fu-firmware.c:	if (priv->size != 0)
libfwupdplugin/fu-firmware.c:		return priv->size;
libfwupdplugin/fu-firmware.c:	if (priv->bytes != NULL)
libfwupdplugin/fu-firmware.c:		return g_bytes_get_size(priv->bytes);
libfwupdplugin/fu-firmware.c:	priv->idx = idx;
libfwupdplugin/fu-firmware.c:	return priv->idx;
libfwupdplugin/fu-firmware.c:	g_return_if_fail(priv->bytes == NULL);
libfwupdplugin/fu-firmware.c:	if (priv->bytes != NULL)
libfwupdplugin/fu-firmware.c:		g_bytes_unref(priv->bytes);
libfwupdplugin/fu-firmware.c:	priv->bytes = g_bytes_ref(bytes);
libfwupdplugin/fu-firmware.c:	if (priv->bytes == NULL) {
libfwupdplugin/fu-firmware.c:	return g_bytes_ref(priv->bytes);
libfwupdplugin/fu-firmware.c:	priv->alignment = alignment;
libfwupdplugin/fu-firmware.c:	return priv->alignment;
libfwupdplugin/fu-firmware.c:	if (priv->chunks != NULL)
libfwupdplugin/fu-firmware.c:		return g_ptr_array_ref(priv->chunks);
libfwupdplugin/fu-firmware.c:	if (priv->bytes != NULL) {
libfwupdplugin/fu-firmware.c:		chk = fu_chunk_bytes_new(priv->bytes);
libfwupdplugin/fu-firmware.c:		fu_chunk_set_idx(chk, priv->idx);
libfwupdplugin/fu-firmware.c:		fu_chunk_set_address(chk, priv->addr);
libfwupdplugin/fu-firmware.c:	if (priv->chunks == NULL)
libfwupdplugin/fu-firmware.c:		priv->chunks = g_ptr_array_new_with_free_func((GDestroyNotify)g_object_unref);
libfwupdplugin/fu-firmware.c:	g_ptr_array_add(priv->chunks, g_object_ref(chk));
libfwupdplugin/fu-firmware.c:	if (priv->bytes != NULL)
libfwupdplugin/fu-firmware.c:		return g_compute_checksum_for_bytes(csum_kind, priv->bytes);
libfwupdplugin/fu-firmware.c:	if (priv->bytes != NULL)
libfwupdplugin/fu-firmware.c:		return g_bytes_ref(priv->bytes);
libfwupdplugin/fu-firmware.c:	if (address < priv->addr) {
libfwupdplugin/fu-firmware.c:			    (guint)priv->addr);
libfwupdplugin/fu-firmware.c:	offset = address - priv->addr;
libfwupdplugin/fu-firmware.c:	if (offset > g_bytes_get_size(priv->bytes)) {
libfwupdplugin/fu-firmware.c:			    (guint)g_bytes_get_size(priv->bytes));
libfwupdplugin/fu-firmware.c:	chunk_left = g_bytes_get_size(priv->bytes) - offset;
libfwupdplugin/fu-firmware.c:		return fu_common_bytes_new_offset(priv->bytes, offset, chunk_left, error);
libfwupdplugin/fu-firmware.c:	return fu_common_bytes_new_offset(priv->bytes, offset, chunk_sz_max, error);
libfwupdplugin/fu-firmware.c:	for (guint i = 0; i < priv->images->len; i++) {
libfwupdplugin/fu-firmware.c:		FuFirmware *img_tmp = g_ptr_array_index(priv->images, i);
libfwupdplugin/fu-firmware.c:		if (priv->flags & FU_FIRMWARE_FLAG_DEDUPE_ID) {
libfwupdplugin/fu-firmware.c:				g_ptr_array_remove_index(priv->images, i);
libfwupdplugin/fu-firmware.c:		if (priv->flags & FU_FIRMWARE_FLAG_DEDUPE_IDX) {
libfwupdplugin/fu-firmware.c:				g_ptr_array_remove_index(priv->images, i);
libfwupdplugin/fu-firmware.c:	g_ptr_array_add(priv->images, g_object_ref(img));
libfwupdplugin/fu-firmware.c:	if (g_ptr_array_remove(priv->images, img))
libfwupdplugin/fu-firmware.c:	g_ptr_array_remove(priv->images, img);
libfwupdplugin/fu-firmware.c:	g_ptr_array_remove(priv->images, img);
libfwupdplugin/fu-firmware.c:	for (guint i = 0; i < priv->images->len; i++) {
libfwupdplugin/fu-firmware.c:		FuFirmware *img = g_ptr_array_index(priv->images, i);
libfwupdplugin/fu-firmware.c:	for (guint i = 0; i < priv->images->len; i++) {
libfwupdplugin/fu-firmware.c:		FuFirmware *img = g_ptr_array_index(priv->images, i);
libfwupdplugin/fu-firmware.c:	for (guint i = 0; i < priv->images->len; i++) {
libfwupdplugin/fu-firmware.c:		FuFirmware *img = g_ptr_array_index(priv->images, i);
libfwupdplugin/fu-firmware.c:	for (guint i = 0; i < priv->images->len; i++) {
libfwupdplugin/fu-firmware.c:		FuFirmware *img = g_ptr_array_index(priv->images, i);
libfwupdplugin/fu-firmware.c:	if (priv->flags != FU_FIRMWARE_FLAG_NONE) {
libfwupdplugin/fu-firmware.c:			if ((priv->flags & ((guint64)1 << i)) == 0)
libfwupdplugin/fu-firmware.c:	fu_xmlb_builder_insert_kv(bn, "id", priv->id);
libfwupdplugin/fu-firmware.c:	fu_xmlb_builder_insert_kx(bn, "idx", priv->idx);
libfwupdplugin/fu-firmware.c:	fu_xmlb_builder_insert_kv(bn, "version", priv->version);
libfwupdplugin/fu-firmware.c:	fu_xmlb_builder_insert_kx(bn, "version_raw", priv->version_raw);
libfwupdplugin/fu-firmware.c:	fu_xmlb_builder_insert_kx(bn, "addr", priv->addr);
libfwupdplugin/fu-firmware.c:	fu_xmlb_builder_insert_kx(bn, "offset", priv->offset);
libfwupdplugin/fu-firmware.c:	fu_xmlb_builder_insert_kx(bn, "size", priv->size);
libfwupdplugin/fu-firmware.c:	fu_xmlb_builder_insert_kv(bn, "filename", priv->filename);
libfwupdplugin/fu-firmware.c:	if (priv->bytes != NULL) {
libfwupdplugin/fu-firmware.c:		const guint8 *buf = g_bytes_get_data(priv->bytes, &bufsz);
libfwupdplugin/fu-firmware.c:	fu_xmlb_builder_insert_kx(bn, "alignment", priv->alignment);
libfwupdplugin/fu-firmware.c:	if (priv->chunks != NULL && priv->chunks->len > 0) {
libfwupdplugin/fu-firmware.c:		for (guint i = 0; i < priv->chunks->len; i++) {
libfwupdplugin/fu-firmware.c:			FuChunk *chk = g_ptr_array_index(priv->chunks, i);
libfwupdplugin/fu-firmware.c:	if (priv->images->len > 0) {
libfwupdplugin/fu-firmware.c:		for (guint i = 0; i < priv->images->len; i++) {
libfwupdplugin/fu-firmware.c:			FuFirmware *img = g_ptr_array_index(priv->images, i);
libfwupdplugin/fu-firmware.c:	priv->images = g_ptr_array_new_with_free_func((GDestroyNotify)g_object_unref);
libfwupdplugin/fu-firmware.c:	g_free(priv->version);
libfwupdplugin/fu-firmware.c:	g_free(priv->id);
libfwupdplugin/fu-firmware.c:	g_free(priv->filename);
libfwupdplugin/fu-firmware.c:	if (priv->bytes != NULL)
libfwupdplugin/fu-firmware.c:		g_bytes_unref(priv->bytes);
libfwupdplugin/fu-firmware.c:	if (priv->chunks != NULL)
libfwupdplugin/fu-firmware.c:		g_ptr_array_unref(priv->chunks);
libfwupdplugin/fu-firmware.c:	g_ptr_array_unref(priv->images);
libfwupdplugin/fu-hid-device.c:		g_value_set_uint(value, priv->interface);
libfwupdplugin/fu-hid-device.c:	if (priv->interface_autodetect) {
libfwupdplugin/fu-hid-device.c:				priv->interface = g_usb_interface_get_number(iface);
libfwupdplugin/fu-hid-device.c:				priv->interface_autodetect = FALSE;
libfwupdplugin/fu-hid-device.c:		if (priv->interface_autodetect) {
libfwupdplugin/fu-hid-device.c:		g_debug("autodetected HID interface of 0x%02x", priv->interface);
libfwupdplugin/fu-hid-device.c:	if ((priv->flags & FU_HID_DEVICE_FLAG_NO_KERNEL_UNBIND) == 0)
libfwupdplugin/fu-hid-device.c:	if (!g_usb_device_claim_interface(usb_device, priv->interface, flags, error)) {
libfwupdplugin/fu-hid-device.c:	if ((priv->flags & FU_HID_DEVICE_FLAG_NO_KERNEL_REBIND) == 0)
libfwupdplugin/fu-hid-device.c:	if (!g_usb_device_release_interface(usb_device, priv->interface, flags, &error_local)) {
libfwupdplugin/fu-hid-device.c:	priv->interface = interface;
libfwupdplugin/fu-hid-device.c:	priv->interface_autodetect = FALSE;
libfwupdplugin/fu-hid-device.c:	return priv->interface;
libfwupdplugin/fu-hid-device.c:	priv->flags |= flag;
libfwupdplugin/fu-hid-device.c:					priv->interface);
libfwupdplugin/fu-hid-device.c:					   priv->interface,
libfwupdplugin/fu-hid-device.c:	helper.flags = priv->flags | flags;
libfwupdplugin/fu-hid-device.c:					priv->interface);
libfwupdplugin/fu-hid-device.c:					   priv->interface,
libfwupdplugin/fu-hid-device.c:					priv->interface);
libfwupdplugin/fu-hid-device.c:	helper.flags = priv->flags | flags;
libfwupdplugin/fu-hid-device.c:	priv->interface_autodetect = TRUE;
libfwupdplugin/fu-i2c-device.c:	fu_common_string_append_kx(str, idt, "BusNumber", priv->bus_number);
libfwupdplugin/fu-i2c-device.c:		g_value_set_uint(value, priv->bus_number);
libfwupdplugin/fu-i2c-device.c:		priv->bus_number = g_value_get_uint(value);
libfwupdplugin/fu-i2c-device.c:	bus_path = g_strdup_printf("/dev/i2c-%u", priv->bus_number);
libfwupdplugin/fu-i2c-device.c:	priv->bus_number = g_ascii_strtoll(g_match_info_fetch(info, 1), NULL, 10);
libfwupdplugin/fu-i2c-device.c:	return priv->bus_number;
libfwupdplugin/fu-i2c-device.c:	priv->bus_number = bus_number;
libfwupdplugin/fu-usb-device.c:		g_value_set_object(value, priv->usb_device);
libfwupdplugin/fu-usb-device.c:	if (priv->usb_device_locker != NULL)
libfwupdplugin/fu-usb-device.c:		g_object_unref(priv->usb_device_locker);
libfwupdplugin/fu-usb-device.c:	if (priv->usb_device != NULL)
libfwupdplugin/fu-usb-device.c:		g_object_unref(priv->usb_device);
libfwupdplugin/fu-usb-device.c:	return priv->usb_device_locker != NULL;
libfwupdplugin/fu-usb-device.c:	if (!g_usb_device_control_transfer(priv->usb_device,
libfwupdplugin/fu-usb-device.c:					g_usb_device_get_vid(priv->usb_device),
libfwupdplugin/fu-usb-device.c:					g_usb_device_get_pid(priv->usb_device),
libfwupdplugin/fu-usb-device.c:					g_usb_device_get_vid(priv->usb_device),
libfwupdplugin/fu-usb-device.c:					g_usb_device_get_pid(priv->usb_device),
libfwupdplugin/fu-usb-device.c:	if (priv->usb_device_locker != NULL)
libfwupdplugin/fu-usb-device.c:	locker = fu_device_locker_new(priv->usb_device, error);
libfwupdplugin/fu-usb-device.c:	priv->usb_device_locker = g_steal_pointer(&locker);
libfwupdplugin/fu-usb-device.c:		idx = g_usb_device_get_manufacturer_index(priv->usb_device);
libfwupdplugin/fu-usb-device.c:			    g_usb_device_get_string_descriptor(priv->usb_device, idx, &error_local);
libfwupdplugin/fu-usb-device.c:				    g_usb_device_get_bus(priv->usb_device),
libfwupdplugin/fu-usb-device.c:				    g_usb_device_get_address(priv->usb_device),
libfwupdplugin/fu-usb-device.c:		idx = g_usb_device_get_product_index(priv->usb_device);
libfwupdplugin/fu-usb-device.c:			    g_usb_device_get_string_descriptor(priv->usb_device, idx, &error_local);
libfwupdplugin/fu-usb-device.c:					g_usb_device_get_bus(priv->usb_device),
libfwupdplugin/fu-usb-device.c:					g_usb_device_get_address(priv->usb_device),
libfwupdplugin/fu-usb-device.c:		idx = g_usb_device_get_serial_number_index(priv->usb_device);
libfwupdplugin/fu-usb-device.c:			    g_usb_device_get_string_descriptor(priv->usb_device, idx, &error_local);
libfwupdplugin/fu-usb-device.c:				    g_usb_device_get_bus(priv->usb_device),
libfwupdplugin/fu-usb-device.c:				    g_usb_device_get_address(priv->usb_device),
libfwupdplugin/fu-usb-device.c:	if (g_usb_device_get_device_class(priv->usb_device) == G_USB_DEVICE_CLASS_HUB) {
libfwupdplugin/fu-usb-device.c:	if (priv->usb_device_locker == NULL)
libfwupdplugin/fu-usb-device.c:	g_clear_object(&priv->usb_device_locker);
libfwupdplugin/fu-usb-device.c:	vendor_id = g_strdup_printf("USB:0x%04X", g_usb_device_get_vid(priv->usb_device));
libfwupdplugin/fu-usb-device.c:	release = g_usb_device_get_release(priv->usb_device);
libfwupdplugin/fu-usb-device.c:				 g_usb_device_get_vid(priv->usb_device),
libfwupdplugin/fu-usb-device.c:				 g_usb_device_get_pid(priv->usb_device),
libfwupdplugin/fu-usb-device.c:				 g_usb_device_get_vid(priv->usb_device),
libfwupdplugin/fu-usb-device.c:				 g_usb_device_get_pid(priv->usb_device));
libfwupdplugin/fu-usb-device.c:	devid0 = g_strdup_printf("USB\\VID_%04X", g_usb_device_get_vid(priv->usb_device));
libfwupdplugin/fu-usb-device.c:	intfs = g_usb_device_get_interfaces(priv->usb_device, error);
libfwupdplugin/fu-usb-device.c:	platform_id = g_strdup(g_usb_device_get_platform_id(priv->usb_device));
libfwupdplugin/fu-usb-device.c:	if (priv->usb_device == NULL)
libfwupdplugin/fu-usb-device.c:	return g_usb_device_get_vid(priv->usb_device);
libfwupdplugin/fu-usb-device.c:	if (priv->usb_device == NULL)
libfwupdplugin/fu-usb-device.c:	return g_usb_device_get_pid(priv->usb_device);
libfwupdplugin/fu-usb-device.c:	if (priv->usb_device == NULL)
libfwupdplugin/fu-usb-device.c:	return g_usb_device_get_platform_id(priv->usb_device);
libfwupdplugin/fu-usb-device.c:	if (priv->usb_device == NULL)
libfwupdplugin/fu-usb-device.c:	return g_usb_device_get_spec(priv->usb_device);
libfwupdplugin/fu-usb-device.c:	g_set_object(&priv->usb_device, usb_device);
libfwupdplugin/fu-usb-device.c:		g_clear_object(&priv->usb_device_locker);
libfwupdplugin/fu-usb-device.c:		    g_usb_device_get_bus(priv->usb_device))
libfwupdplugin/fu-usb-device.c:		    g_usb_device_get_address(priv->usb_device))
libfwupdplugin/fu-usb-device.c:			g_usb_device_get_bus(priv->usb_device),
libfwupdplugin/fu-usb-device.c:			g_usb_device_get_address(priv->usb_device),
libfwupdplugin/fu-usb-device.c:		    g_usb_device_get_bus(priv->usb_device),
libfwupdplugin/fu-usb-device.c:		    g_usb_device_get_address(priv->usb_device));
libfwupdplugin/fu-usb-device.c:	return priv->usb_device;
libfwupdplugin/fu-usb-device.c:	if (priv->usb_device != NULL) {
libfwupdplugin/fu-usb-device.c:		GUsbDeviceClassCode code = g_usb_device_get_device_class(priv->usb_device);
libfwupdplugin/fu-context.c:	return fu_smbios_get_string(priv->smbios, structure_type, offset, NULL);
libfwupdplugin/fu-context.c:	return fu_smbios_get_data(priv->smbios, structure_type, NULL);
libfwupdplugin/fu-context.c:	return fu_smbios_get_integer(priv->smbios, type, offset, NULL);
libfwupdplugin/fu-context.c:	return fu_hwids_has_guid(priv->hwids, guid);
libfwupdplugin/fu-context.c:	return fu_hwids_get_guids(priv->hwids);
libfwupdplugin/fu-context.c:	return fu_hwids_get_value(priv->hwids, key);
libfwupdplugin/fu-context.c:	return fu_hwids_get_replace_values(priv->hwids, keys, error);
libfwupdplugin/fu-context.c:	if (priv->runtime_versions == NULL)
libfwupdplugin/fu-context.c:	g_hash_table_insert(priv->runtime_versions, g_strdup(component_id), g_strdup(version));
libfwupdplugin/fu-context.c:	priv->runtime_versions = g_hash_table_ref(runtime_versions);
libfwupdplugin/fu-context.c:	if (priv->compile_versions == NULL)
libfwupdplugin/fu-context.c:	g_hash_table_insert(priv->compile_versions, g_strdup(component_id), g_strdup(version));
libfwupdplugin/fu-context.c:	priv->compile_versions = g_hash_table_ref(compile_versions);
libfwupdplugin/fu-context.c:	for (guint i = 0; i < priv->udev_subsystems->len; i++) {
libfwupdplugin/fu-context.c:		const gchar *subsystem_tmp = g_ptr_array_index(priv->udev_subsystems, i);
libfwupdplugin/fu-context.c:	g_ptr_array_add(priv->udev_subsystems, g_strdup(subsystem));
libfwupdplugin/fu-context.c:	return priv->udev_subsystems;
libfwupdplugin/fu-context.c:	g_hash_table_insert(priv->firmware_gtypes, g_strdup(id), GSIZE_TO_POINTER(gtype));
libfwupdplugin/fu-context.c:	return GPOINTER_TO_SIZE(g_hash_table_lookup(priv->firmware_gtypes, id));
libfwupdplugin/fu-context.c:	g_autoptr(GList) keys = g_hash_table_get_keys(priv->firmware_gtypes);
libfwupdplugin/fu-context.c:	if (priv->quirks == NULL)
libfwupdplugin/fu-context.c:	fu_quirks_add_possible_key(priv->quirks, key);
libfwupdplugin/fu-context.c:	return fu_quirks_lookup_by_id(priv->quirks, guid, key);
libfwupdplugin/fu-context.c:	return fu_quirks_lookup_by_id_iter(priv->quirks, guid, (FuQuirksIter)iter_cb, user_data);
libfwupdplugin/fu-context.c:	if (!fu_smbios_setup(priv->smbios, &error_smbios))
libfwupdplugin/fu-context.c:	if (!fu_hwids_setup(priv->hwids, priv->smbios, &error_hwids))
libfwupdplugin/fu-context.c:	if (!fu_quirks_load(priv->quirks, flags, &error_local))
libfwupdplugin/fu-context.c:	return priv->battery_state;
libfwupdplugin/fu-context.c:	if (priv->battery_state == battery_state)
libfwupdplugin/fu-context.c:	priv->battery_state = battery_state;
libfwupdplugin/fu-context.c:	return priv->battery_level;
libfwupdplugin/fu-context.c:	if (priv->battery_level == battery_level)
libfwupdplugin/fu-context.c:	priv->battery_level = battery_level;
libfwupdplugin/fu-context.c:	return priv->battery_threshold;
libfwupdplugin/fu-context.c:	if (priv->battery_threshold == battery_threshold)
libfwupdplugin/fu-context.c:	priv->battery_threshold = battery_threshold;
libfwupdplugin/fu-context.c:		g_value_set_uint(value, priv->battery_state);
libfwupdplugin/fu-context.c:		g_value_set_uint(value, priv->battery_level);
libfwupdplugin/fu-context.c:		g_value_set_uint(value, priv->battery_threshold);
libfwupdplugin/fu-context.c:	if (priv->runtime_versions != NULL)
libfwupdplugin/fu-context.c:		g_hash_table_unref(priv->runtime_versions);
libfwupdplugin/fu-context.c:	if (priv->compile_versions != NULL)
libfwupdplugin/fu-context.c:		g_hash_table_unref(priv->compile_versions);
libfwupdplugin/fu-context.c:	g_object_unref(priv->hwids);
libfwupdplugin/fu-context.c:	g_object_unref(priv->quirks);
libfwupdplugin/fu-context.c:	g_object_unref(priv->smbios);
libfwupdplugin/fu-context.c:	g_hash_table_unref(priv->firmware_gtypes);
libfwupdplugin/fu-context.c:	g_ptr_array_unref(priv->udev_subsystems);
libfwupdplugin/fu-context.c:	priv->battery_level = FU_BATTERY_VALUE_INVALID;
libfwupdplugin/fu-context.c:	priv->battery_threshold = FU_BATTERY_VALUE_INVALID;
libfwupdplugin/fu-context.c:	priv->smbios = fu_smbios_new();
libfwupdplugin/fu-context.c:	priv->hwids = fu_hwids_new();
libfwupdplugin/fu-context.c:	priv->udev_subsystems = g_ptr_array_new_with_free_func(g_free);
libfwupdplugin/fu-context.c:	priv->firmware_gtypes = g_hash_table_new_full(g_str_hash, g_str_equal, g_free, NULL);
libfwupdplugin/fu-context.c:	priv->quirks = fu_quirks_new();
