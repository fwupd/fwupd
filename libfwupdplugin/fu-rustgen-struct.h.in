typedef GByteArray {{obj.name}};
G_DEFINE_AUTOPTR_CLEANUP_FUNC({{obj.name}}, g_byte_array_unref)

{%- if obj.export('New') == Export.PUBLIC %}
{{obj.name}} *{{obj.c_method('New')}}(void);
{%- endif %}
{%- if obj.export('Parse') == Export.PUBLIC %}
{{obj.name}} *{{obj.c_method('Parse')}}(const guint8 *buf, gsize bufsz, gsize offset, GError **error);
{%- endif %}
{%- if obj.export('ParseBytes') == Export.PUBLIC %}
{{obj.name}} *{{obj.c_method('ParseBytes')}}(GBytes *blob, gsize offset, GError **error);
{%- endif %}
{%- if obj.export('ParseStream') == Export.PUBLIC %}
{{obj.name}} *{{obj.c_method('ParseStream')}}(GInputStream *stream, gsize offset, GError **error);
{%- endif %}
{%- if obj.export('Validate') == Export.PUBLIC %}
gboolean {{obj.c_method('Validate')}}(const guint8 *buf, gsize bufsz, gsize offset, GError **error);
{%- endif %}
{%- if obj.export('ValidateBytes') == Export.PUBLIC %}
gboolean {{obj.c_method('ValidateBytes')}}(GBytes *blob, gsize offset, GError **error);
{%- endif %}
{%- if obj.export('ValidateStream') == Export.PUBLIC %}
gboolean {{obj.c_method('ValidateStream')}}(GInputStream *stream, gsize offset, GError **error);
{%- endif %}
{%- if obj.export('ToString') == Export.PUBLIC %}
gchar *{{obj.c_method('ToString')}}(const {{obj.name}} *st);
{%- endif %}

{%- for item in obj.items | selectattr('enabled') %}
{%- if item.export('Getters') == Export.PUBLIC %}
{%- if item.type == Type.STRING %}
gchar *{{item.c_getter}}(const {{obj.name}} *st);
{%- elif item.struct_obj %}
{{item.struct_obj.name}} *{{item.c_getter}}(const {{obj.name}} *st);
{%- elif item.type == Type.U8 and item.multiplier %}
const guint8 *{{item.c_getter}}(const {{obj.name}} *st, gsize *bufsz);
{%- elif item.type == Type.GUID %}
const fwupd_guid_t *{{item.c_getter}}(const {{obj.name}} *st);
{%- elif not item.multiplier and item.type in [Type.U8, Type.U16, Type.U24, Type.U32, Type.U64] %}
{{item.type_glib}} {{item.c_getter}}(const {{obj.name}} *st);
{%- endif %}
{%- endif %}
{%- endfor %}

{%- for item in obj.items | selectattr('enabled') %}
{%- if item.export('Setters') == Export.PUBLIC %}
{%- if item.type == Type.STRING %}
gboolean {{item.c_setter}}({{obj.name}} *st, const gchar *value, GError **error);
{%- elif item.struct_obj %}
gboolean
{{item.c_setter}}({{obj.name}} *st, {{item.struct_obj.name}} *st_donor, GError **error);
{%- elif item.type == Type.U8 and item.multiplier %}
gboolean {{item.c_setter}}({{obj.name}} *st, const guint8 *buf, gsize bufsz, GError **error);
{%- elif item.type == Type.GUID %}
void {{item.c_setter}}({{obj.name}} *st, const fwupd_guid_t *value);
{%- elif not item.multiplier and item.type in [Type.U8, Type.U16, Type.U24, Type.U32, Type.U64] %}
void {{item.c_setter}}({{obj.name}} *st, {{item.type_glib}} value);
{%- endif %}
{%- endif %}
{%- endfor %}

#ifndef __GI_SCANNER__
{%- for item in obj.items | selectattr('enabled') %}
#define {{item.c_define('OFFSET')}} 0x{{'{:X}'.format(item.offset)}}
{%- endfor %}
#endif

#ifndef __GI_SCANNER__
{%- for item in obj.items | selectattr('enabled') | selectattr('multiplier') %}
#define {{item.c_define('SIZE')}} 0x{{'{:X}'.format(item.size)}}
{%- endfor %}
#define {{obj.c_define('SIZE')}} 0x{{'{:X}'.format(obj.size)}}
#endif

#ifndef __GI_SCANNER__
{%- for item in obj.items | selectattr('enabled') | selectattr('default') %}
{%- if item.type == Type.STRING or item.multiplier %}
#define {{item.c_define('DEFAULT')}} "{{item.default}}"
{%- else %}
#define {{item.c_define('DEFAULT')}} {{item.default}}
{%- endif %}
{%- endfor %}
#endif
