on:
  workflow_call:
    inputs:
      publish:
        required: true
        type: boolean

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    needs: library
    strategy:
      fail-fast: false
      matrix:
        os: [fedora, debian-x86_64, arch, debian-i386, ubuntu-x86_64]
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - name: Docker login
        run: docker login docker.pkg.github.com -u $GITHUB_ACTOR -p $GITHUB_TOKEN
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
      - name: Download tarball
        if: matrix.os == 'fedora'
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
        id: download
        with:
          name: tarball
      - name: Build in container
        env:
          CI_NETWORK: true
          CI: true
          VERSION: ${{ needs.library.outputs.version }}
        run: |
          docker run --privileged -e CI_NETWORK=$CI_NETWORK -e CI=$CI -e VERSION=$VERSION -t \
              -v $GITHUB_WORKSPACE:/github/workspace \
              docker.pkg.github.com/fwupd/fwupd/fwupd-${{matrix.os}}:latest
      - name: Save any applicable artifacts
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: ${{ matrix.os }}
          path: ${{ github.workspace }}/dist/*
          if-no-files-found: ignore
      - name: Test in container
        env:
          CI_NETWORK: true
          CI: true
        run: |
          docker run --privileged -e CI_NETWORK=$CI_NETWORK -e CI=$CI -t \
              -v $GITHUB_WORKSPACE:/github/workspace \
              docker.pkg.github.com/fwupd/fwupd/fwupd-${{matrix.os}}:latest \
              contrib/ci/${{matrix.os}}-test.sh
      - name: Save any coverage data
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: coverage-${{ join(matrix.*, '-') }}
          path: ${{ github.workspace }}/coverage.xml
      - name: Upload to codecov
        if: matrix.os == 'debian-x86_64' || matrix.os == 'debian-i386' || matrix.os == 'arch'
        uses: codecov/codecov-action@v5
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  openbmc:
    runs-on: ubuntu-22.04
    if: ${{ !inputs.publish }}
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - name: Refresh dependencies
        run: |
          sudo rm -f /etc/apt/sources.list.d/microsoft-prod.list
          sudo apt update
      - name: Install dependencies
        run: |
          sudo ./contrib/ci/fwupd_setup_helpers.py install-dependencies -o ubuntu --yes
          sudo ./contrib/ci/fwupd_setup_helpers.py test-meson
      - name: Build
        run: |
          ./contrib/build-openbmc.sh --prefix=/home/runner/.root

  library:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - name: Refresh dependencies
        run: |
          sudo rm -f /etc/apt/sources.list.d/microsoft-prod.list
          sudo apt update
      - name: Install dependencies
        run: |
          sudo ./contrib/ci/fwupd_setup_helpers.py install-dependencies -o ubuntu --yes
          sudo ./contrib/ci/fwupd_setup_helpers.py test-meson
      - name: Build
        run: |
          meson setup build \
                      -Dbuild=library \
                      -Ddocs=disabled \
                      -Dman=false \
                      -Dauto_features=disabled \
                      -Dtests=false
          ninja -C build dist
      - name: Save version
        id: version
        run: |
          echo "version=$(meson introspect build --projectinfo | jq -r .version)" >> $GITHUB_OUTPUT
      - name: Save tarball
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: tarball
          path: ${{ github.workspace }}/build/meson-dist/*xz

  macos:
    runs-on: macos-latest
    if: ${{ !inputs.publish }}
    steps:
    - name: install dependencies
      run: |
        brew install meson usb.ids gobject-introspection libarchive json-glib protobuf-c vala gi-docgen
        python3 -m pip install --user jinja2 --break-system-packages
    - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
    - name: configure
      run: ./contrib/ci/build_macos.sh
    - name: build
      run: ninja -C build-macos

  build-windows:
    runs-on: ubuntu-latest
    container:
      image: fedora:41
    steps:
    - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
    - name: configure
      run: ./contrib/ci/build_windows.sh
    - name: upload-artifact
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
      with:
        name: windows
        path: |
          ${{ github.workspace }}/dist/setup/*.msi
          ${{ github.workspace }}/dist/news.txt

  publish-docs:
    name: Publish docs
    if: ${{ inputs.publish }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      - name: Download artifact
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
        id: download
        with:
          name: ubuntu-x86_64
      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.FWUPD_GITHUB_IO_SSH_KEY }}
          name: id_rsa # optional
          known_hosts: unnecessary
          if_key_exists: fail # replace / ignore / fail; optional (defaults to fail)
      - name: Clone docs
        run: |
          cd share/doc/fwupd
          git clone --depth 1 git@github.com:fwupd/fwupd.github.io.git
      - name: Trigger docs deployment
        run: |
          cd share/doc/fwupd/fwupd.github.io
          git config credential.helper 'cache --timeout=120'
          git config user.email "info@fwupd.org"
          git config user.name "Documentation deployment Bot"
          rm -rf *
          cp ../../libfwupd* ../*html . -R
          git add .
          git commit -a --allow-empty -m "Trigger deployment"
          git push git@github.com:fwupd/fwupd.github.io.git

  publish-windows:
    name: Publish Windows binaries
    runs-on: ubuntu-latest
    if: ${{ inputs.publish }}
    needs: build-windows
    steps:
      - uses: actions/checkout@v4
      - name: Download artifact
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
        id: download
        with:
          name: windows
      - name: Populate release body
        id: read_release
        shell: bash
        run: |
          r=$(cat dist/news.txt)
          echo "RELEASE_BODY=$r" >> $GITHUB_OUTPUT
      - name: Upload Binaries to Release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ github.ref }}
          file_glob: true
          file: dist/setup/*.msi
          body: |
            ${{ steps.read_release.outputs.RELEASE_BODY }}  # <--- Use environment variables that was created earlier
